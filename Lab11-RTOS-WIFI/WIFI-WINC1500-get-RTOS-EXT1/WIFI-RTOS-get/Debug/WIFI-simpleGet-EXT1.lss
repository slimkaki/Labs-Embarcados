
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dd8c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040dd8c  0040dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040dd94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c680  204009d0  0040e764  000209d0  2**2
                  ALLOC
  4 .stack        00002000  2040d050  0041ade4  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040f050  0041cde4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00034ca5  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006ae6  00000000  00000000  000556fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001249a  00000000  00000000  0005c1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000014f0  00000000  00000000  0006e67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001840  00000000  00000000  0006fb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00010666  00000000  00000000  000713ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001c7cc  00000000  00000000  00081a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a45f  00000000  00000000  0009e1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004c38  00000000  00000000  00138640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 f0 40 20 81 57 40 00 7f 57 40 00 7f 57 40 00     P.@ .W@..W@..W@.
  400010:	7f 57 40 00 7f 57 40 00 7f 57 40 00 00 00 00 00     .W@..W@..W@.....
	...
  40002c:	99 05 40 00 7f 57 40 00 00 00 00 00 39 06 40 00     ..@..W@.....9.@.
  40003c:	a1 06 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     ..@..W@..W@..W@.
  40004c:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  40005c:	7f 57 40 00 7f 57 40 00 00 00 00 00 99 52 40 00     .W@..W@......R@.
  40006c:	ad 52 40 00 c1 52 40 00 7f 57 40 00 7f 57 40 00     .R@..R@..W@..W@.
  40007c:	7f 57 40 00 d5 52 40 00 e9 52 40 00 7f 57 40 00     .W@..R@..R@..W@.
  40008c:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  40009c:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  4000ac:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  4000bc:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  4000cc:	7f 57 40 00 00 00 00 00 7f 57 40 00 00 00 00 00     .W@......W@.....
  4000dc:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  4000ec:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  4000fc:	7f 57 40 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .W@..W@..W@..W@.
  40010c:	7f 57 40 00 7f 57 40 00 00 00 00 00 00 00 00 00     .W@..W@.........
  40011c:	00 00 00 00 7f 57 40 00 7f 57 40 00 7f 57 40 00     .....W@..W@..W@.
  40012c:	7f 57 40 00 7f 57 40 00 00 00 00 00 7f 57 40 00     .W@..W@......W@.
  40013c:	7f 57 40 00                                         .W@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040dd94 	.word	0x0040dd94

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040dd94 	.word	0x0040dd94
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040dd94 	.word	0x0040dd94
  4001a8:	00000000 	.word	0x00000000

004001ac <usart_serial_getchar>:
  4001ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001ae:	b083      	sub	sp, #12
  4001b0:	4605      	mov	r5, r0
  4001b2:	460c      	mov	r4, r1
  4001b4:	2300      	movs	r3, #0
  4001b6:	9301      	str	r3, [sp, #4]
  4001b8:	4b2a      	ldr	r3, [pc, #168]	; (400264 <usart_serial_getchar+0xb8>)
  4001ba:	4298      	cmp	r0, r3
  4001bc:	d013      	beq.n	4001e6 <usart_serial_getchar+0x3a>
  4001be:	4b2a      	ldr	r3, [pc, #168]	; (400268 <usart_serial_getchar+0xbc>)
  4001c0:	4298      	cmp	r0, r3
  4001c2:	d018      	beq.n	4001f6 <usart_serial_getchar+0x4a>
  4001c4:	4b29      	ldr	r3, [pc, #164]	; (40026c <usart_serial_getchar+0xc0>)
  4001c6:	4298      	cmp	r0, r3
  4001c8:	d01d      	beq.n	400206 <usart_serial_getchar+0x5a>
  4001ca:	4b29      	ldr	r3, [pc, #164]	; (400270 <usart_serial_getchar+0xc4>)
  4001cc:	429d      	cmp	r5, r3
  4001ce:	d022      	beq.n	400216 <usart_serial_getchar+0x6a>
  4001d0:	4b28      	ldr	r3, [pc, #160]	; (400274 <usart_serial_getchar+0xc8>)
  4001d2:	429d      	cmp	r5, r3
  4001d4:	d027      	beq.n	400226 <usart_serial_getchar+0x7a>
  4001d6:	4b28      	ldr	r3, [pc, #160]	; (400278 <usart_serial_getchar+0xcc>)
  4001d8:	429d      	cmp	r5, r3
  4001da:	d02e      	beq.n	40023a <usart_serial_getchar+0x8e>
  4001dc:	4b27      	ldr	r3, [pc, #156]	; (40027c <usart_serial_getchar+0xd0>)
  4001de:	429d      	cmp	r5, r3
  4001e0:	d035      	beq.n	40024e <usart_serial_getchar+0xa2>
  4001e2:	b003      	add	sp, #12
  4001e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4001e6:	461f      	mov	r7, r3
  4001e8:	4e25      	ldr	r6, [pc, #148]	; (400280 <usart_serial_getchar+0xd4>)
  4001ea:	4621      	mov	r1, r4
  4001ec:	4638      	mov	r0, r7
  4001ee:	47b0      	blx	r6
  4001f0:	2800      	cmp	r0, #0
  4001f2:	d1fa      	bne.n	4001ea <usart_serial_getchar+0x3e>
  4001f4:	e7e9      	b.n	4001ca <usart_serial_getchar+0x1e>
  4001f6:	461f      	mov	r7, r3
  4001f8:	4e21      	ldr	r6, [pc, #132]	; (400280 <usart_serial_getchar+0xd4>)
  4001fa:	4621      	mov	r1, r4
  4001fc:	4638      	mov	r0, r7
  4001fe:	47b0      	blx	r6
  400200:	2800      	cmp	r0, #0
  400202:	d1fa      	bne.n	4001fa <usart_serial_getchar+0x4e>
  400204:	e7e4      	b.n	4001d0 <usart_serial_getchar+0x24>
  400206:	461f      	mov	r7, r3
  400208:	4e1d      	ldr	r6, [pc, #116]	; (400280 <usart_serial_getchar+0xd4>)
  40020a:	4621      	mov	r1, r4
  40020c:	4638      	mov	r0, r7
  40020e:	47b0      	blx	r6
  400210:	2800      	cmp	r0, #0
  400212:	d1fa      	bne.n	40020a <usart_serial_getchar+0x5e>
  400214:	e7df      	b.n	4001d6 <usart_serial_getchar+0x2a>
  400216:	461f      	mov	r7, r3
  400218:	4e19      	ldr	r6, [pc, #100]	; (400280 <usart_serial_getchar+0xd4>)
  40021a:	4621      	mov	r1, r4
  40021c:	4638      	mov	r0, r7
  40021e:	47b0      	blx	r6
  400220:	2800      	cmp	r0, #0
  400222:	d1fa      	bne.n	40021a <usart_serial_getchar+0x6e>
  400224:	e7da      	b.n	4001dc <usart_serial_getchar+0x30>
  400226:	461e      	mov	r6, r3
  400228:	4d16      	ldr	r5, [pc, #88]	; (400284 <usart_serial_getchar+0xd8>)
  40022a:	a901      	add	r1, sp, #4
  40022c:	4630      	mov	r0, r6
  40022e:	47a8      	blx	r5
  400230:	2800      	cmp	r0, #0
  400232:	d1fa      	bne.n	40022a <usart_serial_getchar+0x7e>
  400234:	9b01      	ldr	r3, [sp, #4]
  400236:	7023      	strb	r3, [r4, #0]
  400238:	e7d3      	b.n	4001e2 <usart_serial_getchar+0x36>
  40023a:	461e      	mov	r6, r3
  40023c:	4d11      	ldr	r5, [pc, #68]	; (400284 <usart_serial_getchar+0xd8>)
  40023e:	a901      	add	r1, sp, #4
  400240:	4630      	mov	r0, r6
  400242:	47a8      	blx	r5
  400244:	2800      	cmp	r0, #0
  400246:	d1fa      	bne.n	40023e <usart_serial_getchar+0x92>
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e7c9      	b.n	4001e2 <usart_serial_getchar+0x36>
  40024e:	461e      	mov	r6, r3
  400250:	4d0c      	ldr	r5, [pc, #48]	; (400284 <usart_serial_getchar+0xd8>)
  400252:	a901      	add	r1, sp, #4
  400254:	4630      	mov	r0, r6
  400256:	47a8      	blx	r5
  400258:	2800      	cmp	r0, #0
  40025a:	d1fa      	bne.n	400252 <usart_serial_getchar+0xa6>
  40025c:	9b01      	ldr	r3, [sp, #4]
  40025e:	7023      	strb	r3, [r4, #0]
  400260:	e7bf      	b.n	4001e2 <usart_serial_getchar+0x36>
  400262:	bf00      	nop
  400264:	400e0800 	.word	0x400e0800
  400268:	400e0a00 	.word	0x400e0a00
  40026c:	400e1a00 	.word	0x400e1a00
  400270:	400e1c00 	.word	0x400e1c00
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000
  40027c:	4002c000 	.word	0x4002c000
  400280:	00405659 	.word	0x00405659
  400284:	00405767 	.word	0x00405767

00400288 <usart_serial_putchar>:
  400288:	b570      	push	{r4, r5, r6, lr}
  40028a:	460c      	mov	r4, r1
  40028c:	4b2a      	ldr	r3, [pc, #168]	; (400338 <usart_serial_putchar+0xb0>)
  40028e:	4298      	cmp	r0, r3
  400290:	d013      	beq.n	4002ba <usart_serial_putchar+0x32>
  400292:	4b2a      	ldr	r3, [pc, #168]	; (40033c <usart_serial_putchar+0xb4>)
  400294:	4298      	cmp	r0, r3
  400296:	d019      	beq.n	4002cc <usart_serial_putchar+0x44>
  400298:	4b29      	ldr	r3, [pc, #164]	; (400340 <usart_serial_putchar+0xb8>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d01f      	beq.n	4002de <usart_serial_putchar+0x56>
  40029e:	4b29      	ldr	r3, [pc, #164]	; (400344 <usart_serial_putchar+0xbc>)
  4002a0:	4298      	cmp	r0, r3
  4002a2:	d025      	beq.n	4002f0 <usart_serial_putchar+0x68>
  4002a4:	4b28      	ldr	r3, [pc, #160]	; (400348 <usart_serial_putchar+0xc0>)
  4002a6:	4298      	cmp	r0, r3
  4002a8:	d02b      	beq.n	400302 <usart_serial_putchar+0x7a>
  4002aa:	4b28      	ldr	r3, [pc, #160]	; (40034c <usart_serial_putchar+0xc4>)
  4002ac:	4298      	cmp	r0, r3
  4002ae:	d031      	beq.n	400314 <usart_serial_putchar+0x8c>
  4002b0:	4b27      	ldr	r3, [pc, #156]	; (400350 <usart_serial_putchar+0xc8>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d037      	beq.n	400326 <usart_serial_putchar+0x9e>
  4002b6:	2000      	movs	r0, #0
  4002b8:	bd70      	pop	{r4, r5, r6, pc}
  4002ba:	461e      	mov	r6, r3
  4002bc:	4d25      	ldr	r5, [pc, #148]	; (400354 <usart_serial_putchar+0xcc>)
  4002be:	4621      	mov	r1, r4
  4002c0:	4630      	mov	r0, r6
  4002c2:	47a8      	blx	r5
  4002c4:	2800      	cmp	r0, #0
  4002c6:	d1fa      	bne.n	4002be <usart_serial_putchar+0x36>
  4002c8:	2001      	movs	r0, #1
  4002ca:	bd70      	pop	{r4, r5, r6, pc}
  4002cc:	461e      	mov	r6, r3
  4002ce:	4d21      	ldr	r5, [pc, #132]	; (400354 <usart_serial_putchar+0xcc>)
  4002d0:	4621      	mov	r1, r4
  4002d2:	4630      	mov	r0, r6
  4002d4:	47a8      	blx	r5
  4002d6:	2800      	cmp	r0, #0
  4002d8:	d1fa      	bne.n	4002d0 <usart_serial_putchar+0x48>
  4002da:	2001      	movs	r0, #1
  4002dc:	bd70      	pop	{r4, r5, r6, pc}
  4002de:	461e      	mov	r6, r3
  4002e0:	4d1c      	ldr	r5, [pc, #112]	; (400354 <usart_serial_putchar+0xcc>)
  4002e2:	4621      	mov	r1, r4
  4002e4:	4630      	mov	r0, r6
  4002e6:	47a8      	blx	r5
  4002e8:	2800      	cmp	r0, #0
  4002ea:	d1fa      	bne.n	4002e2 <usart_serial_putchar+0x5a>
  4002ec:	2001      	movs	r0, #1
  4002ee:	bd70      	pop	{r4, r5, r6, pc}
  4002f0:	461e      	mov	r6, r3
  4002f2:	4d18      	ldr	r5, [pc, #96]	; (400354 <usart_serial_putchar+0xcc>)
  4002f4:	4621      	mov	r1, r4
  4002f6:	4630      	mov	r0, r6
  4002f8:	47a8      	blx	r5
  4002fa:	2800      	cmp	r0, #0
  4002fc:	d1fa      	bne.n	4002f4 <usart_serial_putchar+0x6c>
  4002fe:	2001      	movs	r0, #1
  400300:	bd70      	pop	{r4, r5, r6, pc}
  400302:	461e      	mov	r6, r3
  400304:	4d14      	ldr	r5, [pc, #80]	; (400358 <usart_serial_putchar+0xd0>)
  400306:	4621      	mov	r1, r4
  400308:	4630      	mov	r0, r6
  40030a:	47a8      	blx	r5
  40030c:	2800      	cmp	r0, #0
  40030e:	d1fa      	bne.n	400306 <usart_serial_putchar+0x7e>
  400310:	2001      	movs	r0, #1
  400312:	bd70      	pop	{r4, r5, r6, pc}
  400314:	461e      	mov	r6, r3
  400316:	4d10      	ldr	r5, [pc, #64]	; (400358 <usart_serial_putchar+0xd0>)
  400318:	4621      	mov	r1, r4
  40031a:	4630      	mov	r0, r6
  40031c:	47a8      	blx	r5
  40031e:	2800      	cmp	r0, #0
  400320:	d1fa      	bne.n	400318 <usart_serial_putchar+0x90>
  400322:	2001      	movs	r0, #1
  400324:	bd70      	pop	{r4, r5, r6, pc}
  400326:	461e      	mov	r6, r3
  400328:	4d0b      	ldr	r5, [pc, #44]	; (400358 <usart_serial_putchar+0xd0>)
  40032a:	4621      	mov	r1, r4
  40032c:	4630      	mov	r0, r6
  40032e:	47a8      	blx	r5
  400330:	2800      	cmp	r0, #0
  400332:	d1fa      	bne.n	40032a <usart_serial_putchar+0xa2>
  400334:	2001      	movs	r0, #1
  400336:	bd70      	pop	{r4, r5, r6, pc}
  400338:	400e0800 	.word	0x400e0800
  40033c:	400e0a00 	.word	0x400e0a00
  400340:	400e1a00 	.word	0x400e1a00
  400344:	400e1c00 	.word	0x400e1c00
  400348:	40024000 	.word	0x40024000
  40034c:	40028000 	.word	0x40028000
  400350:	4002c000 	.word	0x4002c000
  400354:	00405647 	.word	0x00405647
  400358:	00405751 	.word	0x00405751

0040035c <configure_console>:
  40035c:	b570      	push	{r4, r5, r6, lr}
  40035e:	b086      	sub	sp, #24
  400360:	200e      	movs	r0, #14
  400362:	4e17      	ldr	r6, [pc, #92]	; (4003c0 <configure_console+0x64>)
  400364:	47b0      	blx	r6
  400366:	4d17      	ldr	r5, [pc, #92]	; (4003c4 <configure_console+0x68>)
  400368:	4b17      	ldr	r3, [pc, #92]	; (4003c8 <configure_console+0x6c>)
  40036a:	601d      	str	r5, [r3, #0]
  40036c:	4a17      	ldr	r2, [pc, #92]	; (4003cc <configure_console+0x70>)
  40036e:	4b18      	ldr	r3, [pc, #96]	; (4003d0 <configure_console+0x74>)
  400370:	601a      	str	r2, [r3, #0]
  400372:	4a18      	ldr	r2, [pc, #96]	; (4003d4 <configure_console+0x78>)
  400374:	4b18      	ldr	r3, [pc, #96]	; (4003d8 <configure_console+0x7c>)
  400376:	601a      	str	r2, [r3, #0]
  400378:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40037c:	9300      	str	r3, [sp, #0]
  40037e:	23c0      	movs	r3, #192	; 0xc0
  400380:	9301      	str	r3, [sp, #4]
  400382:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400386:	9302      	str	r3, [sp, #8]
  400388:	2400      	movs	r4, #0
  40038a:	9403      	str	r4, [sp, #12]
  40038c:	9404      	str	r4, [sp, #16]
  40038e:	200e      	movs	r0, #14
  400390:	47b0      	blx	r6
  400392:	4a12      	ldr	r2, [pc, #72]	; (4003dc <configure_console+0x80>)
  400394:	4669      	mov	r1, sp
  400396:	4628      	mov	r0, r5
  400398:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <configure_console+0x84>)
  40039a:	4798      	blx	r3
  40039c:	4628      	mov	r0, r5
  40039e:	4b11      	ldr	r3, [pc, #68]	; (4003e4 <configure_console+0x88>)
  4003a0:	4798      	blx	r3
  4003a2:	4628      	mov	r0, r5
  4003a4:	4b10      	ldr	r3, [pc, #64]	; (4003e8 <configure_console+0x8c>)
  4003a6:	4798      	blx	r3
  4003a8:	4e10      	ldr	r6, [pc, #64]	; (4003ec <configure_console+0x90>)
  4003aa:	6833      	ldr	r3, [r6, #0]
  4003ac:	4621      	mov	r1, r4
  4003ae:	6898      	ldr	r0, [r3, #8]
  4003b0:	4d0f      	ldr	r5, [pc, #60]	; (4003f0 <configure_console+0x94>)
  4003b2:	47a8      	blx	r5
  4003b4:	6833      	ldr	r3, [r6, #0]
  4003b6:	4621      	mov	r1, r4
  4003b8:	6858      	ldr	r0, [r3, #4]
  4003ba:	47a8      	blx	r5
  4003bc:	b006      	add	sp, #24
  4003be:	bd70      	pop	{r4, r5, r6, pc}
  4003c0:	004054a1 	.word	0x004054a1
  4003c4:	40028000 	.word	0x40028000
  4003c8:	2040d01c 	.word	0x2040d01c
  4003cc:	00400289 	.word	0x00400289
  4003d0:	2040d018 	.word	0x2040d018
  4003d4:	004001ad 	.word	0x004001ad
  4003d8:	2040d014 	.word	0x2040d014
  4003dc:	08f0d180 	.word	0x08f0d180
  4003e0:	004056f1 	.word	0x004056f1
  4003e4:	00405745 	.word	0x00405745
  4003e8:	0040574b 	.word	0x0040574b
  4003ec:	20400024 	.word	0x20400024
  4003f0:	004062b1 	.word	0x004062b1

004003f4 <inet_aton>:
  4003f4:	b4f0      	push	{r4, r5, r6, r7}
  4003f6:	3801      	subs	r0, #1
  4003f8:	2400      	movs	r4, #0
  4003fa:	4622      	mov	r2, r4
  4003fc:	4625      	mov	r5, r4
  4003fe:	4626      	mov	r6, r4
  400400:	e011      	b.n	400426 <inet_aton+0x32>
  400402:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  400406:	2f09      	cmp	r7, #9
  400408:	d814      	bhi.n	400434 <inet_aton+0x40>
  40040a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40040e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
  400412:	e007      	b.n	400424 <inet_aton+0x30>
  400414:	3501      	adds	r5, #1
  400416:	2d03      	cmp	r5, #3
  400418:	dc24      	bgt.n	400464 <inet_aton+0x70>
  40041a:	2aff      	cmp	r2, #255	; 0xff
  40041c:	d824      	bhi.n	400468 <inet_aton+0x74>
  40041e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
  400422:	4632      	mov	r2, r6
  400424:	b14b      	cbz	r3, 40043a <inet_aton+0x46>
  400426:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40042a:	2b2e      	cmp	r3, #46	; 0x2e
  40042c:	d0f2      	beq.n	400414 <inet_aton+0x20>
  40042e:	d8e8      	bhi.n	400402 <inet_aton+0xe>
  400430:	2b00      	cmp	r3, #0
  400432:	d0f2      	beq.n	40041a <inet_aton+0x26>
  400434:	2000      	movs	r0, #0
  400436:	bcf0      	pop	{r4, r5, r6, r7}
  400438:	4770      	bx	lr
  40043a:	2d02      	cmp	r5, #2
  40043c:	dc03      	bgt.n	400446 <inet_aton+0x52>
  40043e:	f1c5 0303 	rsb	r3, r5, #3
  400442:	00db      	lsls	r3, r3, #3
  400444:	409c      	lsls	r4, r3
  400446:	b189      	cbz	r1, 40046c <inet_aton+0x78>
  400448:	0e23      	lsrs	r3, r4, #24
  40044a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40044e:	0222      	lsls	r2, r4, #8
  400450:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  400454:	431a      	orrs	r2, r3
  400456:	0a23      	lsrs	r3, r4, #8
  400458:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  40045c:	4313      	orrs	r3, r2
  40045e:	600b      	str	r3, [r1, #0]
  400460:	2001      	movs	r0, #1
  400462:	e7e8      	b.n	400436 <inet_aton+0x42>
  400464:	2000      	movs	r0, #0
  400466:	e7e6      	b.n	400436 <inet_aton+0x42>
  400468:	2000      	movs	r0, #0
  40046a:	e7e4      	b.n	400436 <inet_aton+0x42>
  40046c:	2001      	movs	r0, #1
  40046e:	e7e2      	b.n	400436 <inet_aton+0x42>

00400470 <vListInitialise>:
  400470:	f100 0308 	add.w	r3, r0, #8
  400474:	6043      	str	r3, [r0, #4]
  400476:	f04f 32ff 	mov.w	r2, #4294967295
  40047a:	6082      	str	r2, [r0, #8]
  40047c:	60c3      	str	r3, [r0, #12]
  40047e:	6103      	str	r3, [r0, #16]
  400480:	2300      	movs	r3, #0
  400482:	6003      	str	r3, [r0, #0]
  400484:	4770      	bx	lr

00400486 <vListInitialiseItem>:
  400486:	2300      	movs	r3, #0
  400488:	6103      	str	r3, [r0, #16]
  40048a:	4770      	bx	lr

0040048c <vListInsertEnd>:
  40048c:	6843      	ldr	r3, [r0, #4]
  40048e:	604b      	str	r3, [r1, #4]
  400490:	689a      	ldr	r2, [r3, #8]
  400492:	608a      	str	r2, [r1, #8]
  400494:	689a      	ldr	r2, [r3, #8]
  400496:	6051      	str	r1, [r2, #4]
  400498:	6099      	str	r1, [r3, #8]
  40049a:	6108      	str	r0, [r1, #16]
  40049c:	6803      	ldr	r3, [r0, #0]
  40049e:	3301      	adds	r3, #1
  4004a0:	6003      	str	r3, [r0, #0]
  4004a2:	4770      	bx	lr

004004a4 <vListInsert>:
  4004a4:	b430      	push	{r4, r5}
  4004a6:	680d      	ldr	r5, [r1, #0]
  4004a8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4004ac:	d002      	beq.n	4004b4 <vListInsert+0x10>
  4004ae:	f100 0208 	add.w	r2, r0, #8
  4004b2:	e002      	b.n	4004ba <vListInsert+0x16>
  4004b4:	6902      	ldr	r2, [r0, #16]
  4004b6:	e004      	b.n	4004c2 <vListInsert+0x1e>
  4004b8:	461a      	mov	r2, r3
  4004ba:	6853      	ldr	r3, [r2, #4]
  4004bc:	681c      	ldr	r4, [r3, #0]
  4004be:	42a5      	cmp	r5, r4
  4004c0:	d2fa      	bcs.n	4004b8 <vListInsert+0x14>
  4004c2:	6853      	ldr	r3, [r2, #4]
  4004c4:	604b      	str	r3, [r1, #4]
  4004c6:	6099      	str	r1, [r3, #8]
  4004c8:	608a      	str	r2, [r1, #8]
  4004ca:	6051      	str	r1, [r2, #4]
  4004cc:	6108      	str	r0, [r1, #16]
  4004ce:	6803      	ldr	r3, [r0, #0]
  4004d0:	3301      	adds	r3, #1
  4004d2:	6003      	str	r3, [r0, #0]
  4004d4:	bc30      	pop	{r4, r5}
  4004d6:	4770      	bx	lr

004004d8 <uxListRemove>:
  4004d8:	6903      	ldr	r3, [r0, #16]
  4004da:	6842      	ldr	r2, [r0, #4]
  4004dc:	6881      	ldr	r1, [r0, #8]
  4004de:	6091      	str	r1, [r2, #8]
  4004e0:	6882      	ldr	r2, [r0, #8]
  4004e2:	6841      	ldr	r1, [r0, #4]
  4004e4:	6051      	str	r1, [r2, #4]
  4004e6:	685a      	ldr	r2, [r3, #4]
  4004e8:	4290      	cmp	r0, r2
  4004ea:	d005      	beq.n	4004f8 <uxListRemove+0x20>
  4004ec:	2200      	movs	r2, #0
  4004ee:	6102      	str	r2, [r0, #16]
  4004f0:	6818      	ldr	r0, [r3, #0]
  4004f2:	3801      	subs	r0, #1
  4004f4:	6018      	str	r0, [r3, #0]
  4004f6:	4770      	bx	lr
  4004f8:	6882      	ldr	r2, [r0, #8]
  4004fa:	605a      	str	r2, [r3, #4]
  4004fc:	e7f6      	b.n	4004ec <uxListRemove+0x14>
	...

00400500 <prvTaskExitError>:
  400500:	4b0d      	ldr	r3, [pc, #52]	; (400538 <prvTaskExitError+0x38>)
  400502:	681b      	ldr	r3, [r3, #0]
  400504:	f1b3 3fff 	cmp.w	r3, #4294967295
  400508:	d00a      	beq.n	400520 <prvTaskExitError+0x20>
  40050a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40050e:	b672      	cpsid	i
  400510:	f383 8811 	msr	BASEPRI, r3
  400514:	f3bf 8f6f 	isb	sy
  400518:	f3bf 8f4f 	dsb	sy
  40051c:	b662      	cpsie	i
  40051e:	e7fe      	b.n	40051e <prvTaskExitError+0x1e>
  400520:	f04f 0380 	mov.w	r3, #128	; 0x80
  400524:	b672      	cpsid	i
  400526:	f383 8811 	msr	BASEPRI, r3
  40052a:	f3bf 8f6f 	isb	sy
  40052e:	f3bf 8f4f 	dsb	sy
  400532:	b662      	cpsie	i
  400534:	e7fe      	b.n	400534 <prvTaskExitError+0x34>
  400536:	bf00      	nop
  400538:	2040000c 	.word	0x2040000c

0040053c <prvPortStartFirstTask>:
  40053c:	4806      	ldr	r0, [pc, #24]	; (400558 <prvPortStartFirstTask+0x1c>)
  40053e:	6800      	ldr	r0, [r0, #0]
  400540:	6800      	ldr	r0, [r0, #0]
  400542:	f380 8808 	msr	MSP, r0
  400546:	b662      	cpsie	i
  400548:	b661      	cpsie	f
  40054a:	f3bf 8f4f 	dsb	sy
  40054e:	f3bf 8f6f 	isb	sy
  400552:	df00      	svc	0
  400554:	bf00      	nop
  400556:	0000      	.short	0x0000
  400558:	e000ed08 	.word	0xe000ed08

0040055c <vPortEnableVFP>:
  40055c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40056c <vPortEnableVFP+0x10>
  400560:	6801      	ldr	r1, [r0, #0]
  400562:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400566:	6001      	str	r1, [r0, #0]
  400568:	4770      	bx	lr
  40056a:	0000      	.short	0x0000
  40056c:	e000ed88 	.word	0xe000ed88

00400570 <pxPortInitialiseStack>:
  400570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400574:	f840 3c04 	str.w	r3, [r0, #-4]
  400578:	f840 1c08 	str.w	r1, [r0, #-8]
  40057c:	4b05      	ldr	r3, [pc, #20]	; (400594 <pxPortInitialiseStack+0x24>)
  40057e:	f840 3c0c 	str.w	r3, [r0, #-12]
  400582:	f840 2c20 	str.w	r2, [r0, #-32]
  400586:	f06f 0302 	mvn.w	r3, #2
  40058a:	f840 3c24 	str.w	r3, [r0, #-36]
  40058e:	3844      	subs	r0, #68	; 0x44
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	00400501 	.word	0x00400501

00400598 <SVC_Handler>:
  400598:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <pxCurrentTCBConst2>)
  40059a:	6819      	ldr	r1, [r3, #0]
  40059c:	6808      	ldr	r0, [r1, #0]
  40059e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005a2:	f380 8809 	msr	PSP, r0
  4005a6:	f3bf 8f6f 	isb	sy
  4005aa:	f04f 0000 	mov.w	r0, #0
  4005ae:	f380 8811 	msr	BASEPRI, r0
  4005b2:	4770      	bx	lr

004005b4 <pxCurrentTCBConst2>:
  4005b4:	2040c1fc 	.word	0x2040c1fc
  4005b8:	4770      	bx	lr
  4005ba:	bf00      	nop

004005bc <vPortEnterCritical>:
  4005bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005c0:	b672      	cpsid	i
  4005c2:	f383 8811 	msr	BASEPRI, r3
  4005c6:	f3bf 8f6f 	isb	sy
  4005ca:	f3bf 8f4f 	dsb	sy
  4005ce:	b662      	cpsie	i
  4005d0:	4a0b      	ldr	r2, [pc, #44]	; (400600 <vPortEnterCritical+0x44>)
  4005d2:	6813      	ldr	r3, [r2, #0]
  4005d4:	3301      	adds	r3, #1
  4005d6:	6013      	str	r3, [r2, #0]
  4005d8:	2b01      	cmp	r3, #1
  4005da:	d10f      	bne.n	4005fc <vPortEnterCritical+0x40>
  4005dc:	4b09      	ldr	r3, [pc, #36]	; (400604 <vPortEnterCritical+0x48>)
  4005de:	681b      	ldr	r3, [r3, #0]
  4005e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005e4:	d00a      	beq.n	4005fc <vPortEnterCritical+0x40>
  4005e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005ea:	b672      	cpsid	i
  4005ec:	f383 8811 	msr	BASEPRI, r3
  4005f0:	f3bf 8f6f 	isb	sy
  4005f4:	f3bf 8f4f 	dsb	sy
  4005f8:	b662      	cpsie	i
  4005fa:	e7fe      	b.n	4005fa <vPortEnterCritical+0x3e>
  4005fc:	4770      	bx	lr
  4005fe:	bf00      	nop
  400600:	2040000c 	.word	0x2040000c
  400604:	e000ed04 	.word	0xe000ed04

00400608 <vPortExitCritical>:
  400608:	4b0a      	ldr	r3, [pc, #40]	; (400634 <vPortExitCritical+0x2c>)
  40060a:	681b      	ldr	r3, [r3, #0]
  40060c:	b953      	cbnz	r3, 400624 <vPortExitCritical+0x1c>
  40060e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400612:	b672      	cpsid	i
  400614:	f383 8811 	msr	BASEPRI, r3
  400618:	f3bf 8f6f 	isb	sy
  40061c:	f3bf 8f4f 	dsb	sy
  400620:	b662      	cpsie	i
  400622:	e7fe      	b.n	400622 <vPortExitCritical+0x1a>
  400624:	3b01      	subs	r3, #1
  400626:	4a03      	ldr	r2, [pc, #12]	; (400634 <vPortExitCritical+0x2c>)
  400628:	6013      	str	r3, [r2, #0]
  40062a:	b90b      	cbnz	r3, 400630 <vPortExitCritical+0x28>
  40062c:	f383 8811 	msr	BASEPRI, r3
  400630:	4770      	bx	lr
  400632:	bf00      	nop
  400634:	2040000c 	.word	0x2040000c

00400638 <PendSV_Handler>:
  400638:	f3ef 8009 	mrs	r0, PSP
  40063c:	f3bf 8f6f 	isb	sy
  400640:	4b15      	ldr	r3, [pc, #84]	; (400698 <pxCurrentTCBConst>)
  400642:	681a      	ldr	r2, [r3, #0]
  400644:	f01e 0f10 	tst.w	lr, #16
  400648:	bf08      	it	eq
  40064a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40064e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400652:	6010      	str	r0, [r2, #0]
  400654:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400658:	f04f 0080 	mov.w	r0, #128	; 0x80
  40065c:	b672      	cpsid	i
  40065e:	f380 8811 	msr	BASEPRI, r0
  400662:	f3bf 8f4f 	dsb	sy
  400666:	f3bf 8f6f 	isb	sy
  40066a:	b662      	cpsie	i
  40066c:	f001 f8da 	bl	401824 <vTaskSwitchContext>
  400670:	f04f 0000 	mov.w	r0, #0
  400674:	f380 8811 	msr	BASEPRI, r0
  400678:	bc08      	pop	{r3}
  40067a:	6819      	ldr	r1, [r3, #0]
  40067c:	6808      	ldr	r0, [r1, #0]
  40067e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400682:	f01e 0f10 	tst.w	lr, #16
  400686:	bf08      	it	eq
  400688:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40068c:	f380 8809 	msr	PSP, r0
  400690:	f3bf 8f6f 	isb	sy
  400694:	4770      	bx	lr
  400696:	bf00      	nop

00400698 <pxCurrentTCBConst>:
  400698:	2040c1fc 	.word	0x2040c1fc
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop

004006a0 <SysTick_Handler>:
  4006a0:	b508      	push	{r3, lr}
  4006a2:	f3ef 8311 	mrs	r3, BASEPRI
  4006a6:	f04f 0280 	mov.w	r2, #128	; 0x80
  4006aa:	b672      	cpsid	i
  4006ac:	f382 8811 	msr	BASEPRI, r2
  4006b0:	f3bf 8f6f 	isb	sy
  4006b4:	f3bf 8f4f 	dsb	sy
  4006b8:	b662      	cpsie	i
  4006ba:	4b05      	ldr	r3, [pc, #20]	; (4006d0 <SysTick_Handler+0x30>)
  4006bc:	4798      	blx	r3
  4006be:	b118      	cbz	r0, 4006c8 <SysTick_Handler+0x28>
  4006c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4006c4:	4b03      	ldr	r3, [pc, #12]	; (4006d4 <SysTick_Handler+0x34>)
  4006c6:	601a      	str	r2, [r3, #0]
  4006c8:	2300      	movs	r3, #0
  4006ca:	f383 8811 	msr	BASEPRI, r3
  4006ce:	bd08      	pop	{r3, pc}
  4006d0:	00401491 	.word	0x00401491
  4006d4:	e000ed04 	.word	0xe000ed04

004006d8 <vPortSetupTimerInterrupt>:
  4006d8:	4a03      	ldr	r2, [pc, #12]	; (4006e8 <vPortSetupTimerInterrupt+0x10>)
  4006da:	4b04      	ldr	r3, [pc, #16]	; (4006ec <vPortSetupTimerInterrupt+0x14>)
  4006dc:	601a      	str	r2, [r3, #0]
  4006de:	2207      	movs	r2, #7
  4006e0:	3b04      	subs	r3, #4
  4006e2:	601a      	str	r2, [r3, #0]
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	000927bf 	.word	0x000927bf
  4006ec:	e000e014 	.word	0xe000e014

004006f0 <xPortStartScheduler>:
  4006f0:	b500      	push	{lr}
  4006f2:	b083      	sub	sp, #12
  4006f4:	4b25      	ldr	r3, [pc, #148]	; (40078c <xPortStartScheduler+0x9c>)
  4006f6:	781a      	ldrb	r2, [r3, #0]
  4006f8:	b2d2      	uxtb	r2, r2
  4006fa:	9201      	str	r2, [sp, #4]
  4006fc:	22ff      	movs	r2, #255	; 0xff
  4006fe:	701a      	strb	r2, [r3, #0]
  400700:	781b      	ldrb	r3, [r3, #0]
  400702:	b2db      	uxtb	r3, r3
  400704:	f88d 3003 	strb.w	r3, [sp, #3]
  400708:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40070c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400710:	4a1f      	ldr	r2, [pc, #124]	; (400790 <xPortStartScheduler+0xa0>)
  400712:	7013      	strb	r3, [r2, #0]
  400714:	2207      	movs	r2, #7
  400716:	4b1f      	ldr	r3, [pc, #124]	; (400794 <xPortStartScheduler+0xa4>)
  400718:	601a      	str	r2, [r3, #0]
  40071a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40071e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400722:	d010      	beq.n	400746 <xPortStartScheduler+0x56>
  400724:	2206      	movs	r2, #6
  400726:	e000      	b.n	40072a <xPortStartScheduler+0x3a>
  400728:	460a      	mov	r2, r1
  40072a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40072e:	005b      	lsls	r3, r3, #1
  400730:	b2db      	uxtb	r3, r3
  400732:	f88d 3003 	strb.w	r3, [sp, #3]
  400736:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40073a:	1e51      	subs	r1, r2, #1
  40073c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400740:	d1f2      	bne.n	400728 <xPortStartScheduler+0x38>
  400742:	4b14      	ldr	r3, [pc, #80]	; (400794 <xPortStartScheduler+0xa4>)
  400744:	601a      	str	r2, [r3, #0]
  400746:	4a13      	ldr	r2, [pc, #76]	; (400794 <xPortStartScheduler+0xa4>)
  400748:	6813      	ldr	r3, [r2, #0]
  40074a:	021b      	lsls	r3, r3, #8
  40074c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400750:	6013      	str	r3, [r2, #0]
  400752:	9b01      	ldr	r3, [sp, #4]
  400754:	b2db      	uxtb	r3, r3
  400756:	4a0d      	ldr	r2, [pc, #52]	; (40078c <xPortStartScheduler+0x9c>)
  400758:	7013      	strb	r3, [r2, #0]
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <xPortStartScheduler+0xa8>)
  40075c:	681a      	ldr	r2, [r3, #0]
  40075e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400762:	601a      	str	r2, [r3, #0]
  400764:	681a      	ldr	r2, [r3, #0]
  400766:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40076a:	601a      	str	r2, [r3, #0]
  40076c:	4b0b      	ldr	r3, [pc, #44]	; (40079c <xPortStartScheduler+0xac>)
  40076e:	4798      	blx	r3
  400770:	2200      	movs	r2, #0
  400772:	4b0b      	ldr	r3, [pc, #44]	; (4007a0 <xPortStartScheduler+0xb0>)
  400774:	601a      	str	r2, [r3, #0]
  400776:	4b0b      	ldr	r3, [pc, #44]	; (4007a4 <xPortStartScheduler+0xb4>)
  400778:	4798      	blx	r3
  40077a:	4a0b      	ldr	r2, [pc, #44]	; (4007a8 <xPortStartScheduler+0xb8>)
  40077c:	6813      	ldr	r3, [r2, #0]
  40077e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400782:	6013      	str	r3, [r2, #0]
  400784:	4b09      	ldr	r3, [pc, #36]	; (4007ac <xPortStartScheduler+0xbc>)
  400786:	4798      	blx	r3
  400788:	4b09      	ldr	r3, [pc, #36]	; (4007b0 <xPortStartScheduler+0xc0>)
  40078a:	4798      	blx	r3
  40078c:	e000e400 	.word	0xe000e400
  400790:	204009ec 	.word	0x204009ec
  400794:	204009f0 	.word	0x204009f0
  400798:	e000ed20 	.word	0xe000ed20
  40079c:	004006d9 	.word	0x004006d9
  4007a0:	2040000c 	.word	0x2040000c
  4007a4:	0040055d 	.word	0x0040055d
  4007a8:	e000ef34 	.word	0xe000ef34
  4007ac:	0040053d 	.word	0x0040053d
  4007b0:	00400501 	.word	0x00400501

004007b4 <vPortValidateInterruptPriority>:
  4007b4:	f3ef 8305 	mrs	r3, IPSR
  4007b8:	2b0f      	cmp	r3, #15
  4007ba:	d911      	bls.n	4007e0 <vPortValidateInterruptPriority+0x2c>
  4007bc:	4a12      	ldr	r2, [pc, #72]	; (400808 <vPortValidateInterruptPriority+0x54>)
  4007be:	5c9b      	ldrb	r3, [r3, r2]
  4007c0:	b2db      	uxtb	r3, r3
  4007c2:	4a12      	ldr	r2, [pc, #72]	; (40080c <vPortValidateInterruptPriority+0x58>)
  4007c4:	7812      	ldrb	r2, [r2, #0]
  4007c6:	429a      	cmp	r2, r3
  4007c8:	d90a      	bls.n	4007e0 <vPortValidateInterruptPriority+0x2c>
  4007ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007ce:	b672      	cpsid	i
  4007d0:	f383 8811 	msr	BASEPRI, r3
  4007d4:	f3bf 8f6f 	isb	sy
  4007d8:	f3bf 8f4f 	dsb	sy
  4007dc:	b662      	cpsie	i
  4007de:	e7fe      	b.n	4007de <vPortValidateInterruptPriority+0x2a>
  4007e0:	4b0b      	ldr	r3, [pc, #44]	; (400810 <vPortValidateInterruptPriority+0x5c>)
  4007e2:	681b      	ldr	r3, [r3, #0]
  4007e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4007e8:	4a0a      	ldr	r2, [pc, #40]	; (400814 <vPortValidateInterruptPriority+0x60>)
  4007ea:	6812      	ldr	r2, [r2, #0]
  4007ec:	4293      	cmp	r3, r2
  4007ee:	d90a      	bls.n	400806 <vPortValidateInterruptPriority+0x52>
  4007f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007f4:	b672      	cpsid	i
  4007f6:	f383 8811 	msr	BASEPRI, r3
  4007fa:	f3bf 8f6f 	isb	sy
  4007fe:	f3bf 8f4f 	dsb	sy
  400802:	b662      	cpsie	i
  400804:	e7fe      	b.n	400804 <vPortValidateInterruptPriority+0x50>
  400806:	4770      	bx	lr
  400808:	e000e3f0 	.word	0xe000e3f0
  40080c:	204009ec 	.word	0x204009ec
  400810:	e000ed0c 	.word	0xe000ed0c
  400814:	204009f0 	.word	0x204009f0

00400818 <pvPortMalloc>:
  400818:	b538      	push	{r3, r4, r5, lr}
  40081a:	4604      	mov	r4, r0
  40081c:	f010 0f07 	tst.w	r0, #7
  400820:	d002      	beq.n	400828 <pvPortMalloc+0x10>
  400822:	f020 0407 	bic.w	r4, r0, #7
  400826:	3408      	adds	r4, #8
  400828:	4b11      	ldr	r3, [pc, #68]	; (400870 <pvPortMalloc+0x58>)
  40082a:	4798      	blx	r3
  40082c:	4b11      	ldr	r3, [pc, #68]	; (400874 <pvPortMalloc+0x5c>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	b193      	cbz	r3, 400858 <pvPortMalloc+0x40>
  400832:	4b11      	ldr	r3, [pc, #68]	; (400878 <pvPortMalloc+0x60>)
  400834:	681b      	ldr	r3, [r3, #0]
  400836:	441c      	add	r4, r3
  400838:	42a3      	cmp	r3, r4
  40083a:	d213      	bcs.n	400864 <pvPortMalloc+0x4c>
  40083c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400840:	4294      	cmp	r4, r2
  400842:	d80f      	bhi.n	400864 <pvPortMalloc+0x4c>
  400844:	4a0b      	ldr	r2, [pc, #44]	; (400874 <pvPortMalloc+0x5c>)
  400846:	6815      	ldr	r5, [r2, #0]
  400848:	441d      	add	r5, r3
  40084a:	4b0b      	ldr	r3, [pc, #44]	; (400878 <pvPortMalloc+0x60>)
  40084c:	601c      	str	r4, [r3, #0]
  40084e:	4b0b      	ldr	r3, [pc, #44]	; (40087c <pvPortMalloc+0x64>)
  400850:	4798      	blx	r3
  400852:	b14d      	cbz	r5, 400868 <pvPortMalloc+0x50>
  400854:	4628      	mov	r0, r5
  400856:	bd38      	pop	{r3, r4, r5, pc}
  400858:	4b09      	ldr	r3, [pc, #36]	; (400880 <pvPortMalloc+0x68>)
  40085a:	f023 0307 	bic.w	r3, r3, #7
  40085e:	4a05      	ldr	r2, [pc, #20]	; (400874 <pvPortMalloc+0x5c>)
  400860:	6013      	str	r3, [r2, #0]
  400862:	e7e6      	b.n	400832 <pvPortMalloc+0x1a>
  400864:	4b05      	ldr	r3, [pc, #20]	; (40087c <pvPortMalloc+0x64>)
  400866:	4798      	blx	r3
  400868:	4b06      	ldr	r3, [pc, #24]	; (400884 <pvPortMalloc+0x6c>)
  40086a:	4798      	blx	r3
  40086c:	2500      	movs	r5, #0
  40086e:	e7f1      	b.n	400854 <pvPortMalloc+0x3c>
  400870:	00401475 	.word	0x00401475
  400874:	204009f4 	.word	0x204009f4
  400878:	2040c1f8 	.word	0x2040c1f8
  40087c:	004015dd 	.word	0x004015dd
  400880:	20400a00 	.word	0x20400a00
  400884:	00405f93 	.word	0x00405f93

00400888 <vPortFree>:
  400888:	b150      	cbz	r0, 4008a0 <vPortFree+0x18>
  40088a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40088e:	b672      	cpsid	i
  400890:	f383 8811 	msr	BASEPRI, r3
  400894:	f3bf 8f6f 	isb	sy
  400898:	f3bf 8f4f 	dsb	sy
  40089c:	b662      	cpsie	i
  40089e:	e7fe      	b.n	40089e <vPortFree+0x16>
  4008a0:	4770      	bx	lr
	...

004008a4 <prvCopyDataToQueue>:
  4008a4:	b538      	push	{r3, r4, r5, lr}
  4008a6:	4604      	mov	r4, r0
  4008a8:	4615      	mov	r5, r2
  4008aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4008ac:	b95a      	cbnz	r2, 4008c6 <prvCopyDataToQueue+0x22>
  4008ae:	6803      	ldr	r3, [r0, #0]
  4008b0:	2b00      	cmp	r3, #0
  4008b2:	d12e      	bne.n	400912 <prvCopyDataToQueue+0x6e>
  4008b4:	6840      	ldr	r0, [r0, #4]
  4008b6:	4b1b      	ldr	r3, [pc, #108]	; (400924 <prvCopyDataToQueue+0x80>)
  4008b8:	4798      	blx	r3
  4008ba:	2300      	movs	r3, #0
  4008bc:	6063      	str	r3, [r4, #4]
  4008be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4008c0:	3301      	adds	r3, #1
  4008c2:	63a3      	str	r3, [r4, #56]	; 0x38
  4008c4:	bd38      	pop	{r3, r4, r5, pc}
  4008c6:	b96d      	cbnz	r5, 4008e4 <prvCopyDataToQueue+0x40>
  4008c8:	6880      	ldr	r0, [r0, #8]
  4008ca:	4b17      	ldr	r3, [pc, #92]	; (400928 <prvCopyDataToQueue+0x84>)
  4008cc:	4798      	blx	r3
  4008ce:	68a3      	ldr	r3, [r4, #8]
  4008d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008d2:	4413      	add	r3, r2
  4008d4:	60a3      	str	r3, [r4, #8]
  4008d6:	6862      	ldr	r2, [r4, #4]
  4008d8:	4293      	cmp	r3, r2
  4008da:	d31c      	bcc.n	400916 <prvCopyDataToQueue+0x72>
  4008dc:	6823      	ldr	r3, [r4, #0]
  4008de:	60a3      	str	r3, [r4, #8]
  4008e0:	2000      	movs	r0, #0
  4008e2:	e7ec      	b.n	4008be <prvCopyDataToQueue+0x1a>
  4008e4:	68c0      	ldr	r0, [r0, #12]
  4008e6:	4b10      	ldr	r3, [pc, #64]	; (400928 <prvCopyDataToQueue+0x84>)
  4008e8:	4798      	blx	r3
  4008ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4008ec:	425b      	negs	r3, r3
  4008ee:	68e2      	ldr	r2, [r4, #12]
  4008f0:	441a      	add	r2, r3
  4008f2:	60e2      	str	r2, [r4, #12]
  4008f4:	6821      	ldr	r1, [r4, #0]
  4008f6:	428a      	cmp	r2, r1
  4008f8:	d202      	bcs.n	400900 <prvCopyDataToQueue+0x5c>
  4008fa:	6862      	ldr	r2, [r4, #4]
  4008fc:	4413      	add	r3, r2
  4008fe:	60e3      	str	r3, [r4, #12]
  400900:	2d02      	cmp	r5, #2
  400902:	d10a      	bne.n	40091a <prvCopyDataToQueue+0x76>
  400904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400906:	b153      	cbz	r3, 40091e <prvCopyDataToQueue+0x7a>
  400908:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40090a:	3b01      	subs	r3, #1
  40090c:	63a3      	str	r3, [r4, #56]	; 0x38
  40090e:	2000      	movs	r0, #0
  400910:	e7d5      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400912:	2000      	movs	r0, #0
  400914:	e7d3      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400916:	2000      	movs	r0, #0
  400918:	e7d1      	b.n	4008be <prvCopyDataToQueue+0x1a>
  40091a:	2000      	movs	r0, #0
  40091c:	e7cf      	b.n	4008be <prvCopyDataToQueue+0x1a>
  40091e:	2000      	movs	r0, #0
  400920:	e7cd      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400922:	bf00      	nop
  400924:	00401c25 	.word	0x00401c25
  400928:	004060e1 	.word	0x004060e1

0040092c <prvNotifyQueueSetContainer>:
  40092c:	b530      	push	{r4, r5, lr}
  40092e:	b083      	sub	sp, #12
  400930:	9001      	str	r0, [sp, #4]
  400932:	6d44      	ldr	r4, [r0, #84]	; 0x54
  400934:	b174      	cbz	r4, 400954 <prvNotifyQueueSetContainer+0x28>
  400936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40093a:	429a      	cmp	r2, r3
  40093c:	d315      	bcc.n	40096a <prvNotifyQueueSetContainer+0x3e>
  40093e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400942:	b672      	cpsid	i
  400944:	f383 8811 	msr	BASEPRI, r3
  400948:	f3bf 8f6f 	isb	sy
  40094c:	f3bf 8f4f 	dsb	sy
  400950:	b662      	cpsie	i
  400952:	e7fe      	b.n	400952 <prvNotifyQueueSetContainer+0x26>
  400954:	f04f 0380 	mov.w	r3, #128	; 0x80
  400958:	b672      	cpsid	i
  40095a:	f383 8811 	msr	BASEPRI, r3
  40095e:	f3bf 8f6f 	isb	sy
  400962:	f3bf 8f4f 	dsb	sy
  400966:	b662      	cpsie	i
  400968:	e7fe      	b.n	400968 <prvNotifyQueueSetContainer+0x3c>
  40096a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40096c:	4293      	cmp	r3, r2
  40096e:	d803      	bhi.n	400978 <prvNotifyQueueSetContainer+0x4c>
  400970:	2500      	movs	r5, #0
  400972:	4628      	mov	r0, r5
  400974:	b003      	add	sp, #12
  400976:	bd30      	pop	{r4, r5, pc}
  400978:	460a      	mov	r2, r1
  40097a:	a901      	add	r1, sp, #4
  40097c:	4620      	mov	r0, r4
  40097e:	4b0b      	ldr	r3, [pc, #44]	; (4009ac <prvNotifyQueueSetContainer+0x80>)
  400980:	4798      	blx	r3
  400982:	4605      	mov	r5, r0
  400984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400986:	f1b3 3fff 	cmp.w	r3, #4294967295
  40098a:	d10a      	bne.n	4009a2 <prvNotifyQueueSetContainer+0x76>
  40098c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40098e:	2b00      	cmp	r3, #0
  400990:	d0ef      	beq.n	400972 <prvNotifyQueueSetContainer+0x46>
  400992:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400996:	4b06      	ldr	r3, [pc, #24]	; (4009b0 <prvNotifyQueueSetContainer+0x84>)
  400998:	4798      	blx	r3
  40099a:	2800      	cmp	r0, #0
  40099c:	bf18      	it	ne
  40099e:	2501      	movne	r5, #1
  4009a0:	e7e7      	b.n	400972 <prvNotifyQueueSetContainer+0x46>
  4009a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009a4:	3301      	adds	r3, #1
  4009a6:	64a3      	str	r3, [r4, #72]	; 0x48
  4009a8:	e7e3      	b.n	400972 <prvNotifyQueueSetContainer+0x46>
  4009aa:	bf00      	nop
  4009ac:	004008a5 	.word	0x004008a5
  4009b0:	004019f9 	.word	0x004019f9

004009b4 <prvCopyDataFromQueue>:
  4009b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4009b6:	b172      	cbz	r2, 4009d6 <prvCopyDataFromQueue+0x22>
  4009b8:	b510      	push	{r4, lr}
  4009ba:	4603      	mov	r3, r0
  4009bc:	68c4      	ldr	r4, [r0, #12]
  4009be:	4414      	add	r4, r2
  4009c0:	60c4      	str	r4, [r0, #12]
  4009c2:	6840      	ldr	r0, [r0, #4]
  4009c4:	4284      	cmp	r4, r0
  4009c6:	d301      	bcc.n	4009cc <prvCopyDataFromQueue+0x18>
  4009c8:	6818      	ldr	r0, [r3, #0]
  4009ca:	60d8      	str	r0, [r3, #12]
  4009cc:	4608      	mov	r0, r1
  4009ce:	68d9      	ldr	r1, [r3, #12]
  4009d0:	4b01      	ldr	r3, [pc, #4]	; (4009d8 <prvCopyDataFromQueue+0x24>)
  4009d2:	4798      	blx	r3
  4009d4:	bd10      	pop	{r4, pc}
  4009d6:	4770      	bx	lr
  4009d8:	004060e1 	.word	0x004060e1

004009dc <prvUnlockQueue>:
  4009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009de:	4604      	mov	r4, r0
  4009e0:	4b22      	ldr	r3, [pc, #136]	; (400a6c <prvUnlockQueue+0x90>)
  4009e2:	4798      	blx	r3
  4009e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009e6:	2b00      	cmp	r3, #0
  4009e8:	dd1b      	ble.n	400a22 <prvUnlockQueue+0x46>
  4009ea:	4d21      	ldr	r5, [pc, #132]	; (400a70 <prvUnlockQueue+0x94>)
  4009ec:	4f21      	ldr	r7, [pc, #132]	; (400a74 <prvUnlockQueue+0x98>)
  4009ee:	4e22      	ldr	r6, [pc, #136]	; (400a78 <prvUnlockQueue+0x9c>)
  4009f0:	e00b      	b.n	400a0a <prvUnlockQueue+0x2e>
  4009f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4009f4:	b1ab      	cbz	r3, 400a22 <prvUnlockQueue+0x46>
  4009f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4009fa:	47b0      	blx	r6
  4009fc:	b978      	cbnz	r0, 400a1e <prvUnlockQueue+0x42>
  4009fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a00:	3b01      	subs	r3, #1
  400a02:	64a3      	str	r3, [r4, #72]	; 0x48
  400a04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a06:	2b00      	cmp	r3, #0
  400a08:	dd0b      	ble.n	400a22 <prvUnlockQueue+0x46>
  400a0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0f0      	beq.n	4009f2 <prvUnlockQueue+0x16>
  400a10:	2100      	movs	r1, #0
  400a12:	4620      	mov	r0, r4
  400a14:	47a8      	blx	r5
  400a16:	2801      	cmp	r0, #1
  400a18:	d1f1      	bne.n	4009fe <prvUnlockQueue+0x22>
  400a1a:	47b8      	blx	r7
  400a1c:	e7ef      	b.n	4009fe <prvUnlockQueue+0x22>
  400a1e:	47b8      	blx	r7
  400a20:	e7ed      	b.n	4009fe <prvUnlockQueue+0x22>
  400a22:	f04f 33ff 	mov.w	r3, #4294967295
  400a26:	64a3      	str	r3, [r4, #72]	; 0x48
  400a28:	4b14      	ldr	r3, [pc, #80]	; (400a7c <prvUnlockQueue+0xa0>)
  400a2a:	4798      	blx	r3
  400a2c:	4b0f      	ldr	r3, [pc, #60]	; (400a6c <prvUnlockQueue+0x90>)
  400a2e:	4798      	blx	r3
  400a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a32:	2b00      	cmp	r3, #0
  400a34:	dd14      	ble.n	400a60 <prvUnlockQueue+0x84>
  400a36:	6923      	ldr	r3, [r4, #16]
  400a38:	b193      	cbz	r3, 400a60 <prvUnlockQueue+0x84>
  400a3a:	f104 0610 	add.w	r6, r4, #16
  400a3e:	4d0e      	ldr	r5, [pc, #56]	; (400a78 <prvUnlockQueue+0x9c>)
  400a40:	4f0c      	ldr	r7, [pc, #48]	; (400a74 <prvUnlockQueue+0x98>)
  400a42:	e007      	b.n	400a54 <prvUnlockQueue+0x78>
  400a44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a46:	3b01      	subs	r3, #1
  400a48:	6463      	str	r3, [r4, #68]	; 0x44
  400a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	dd07      	ble.n	400a60 <prvUnlockQueue+0x84>
  400a50:	6923      	ldr	r3, [r4, #16]
  400a52:	b12b      	cbz	r3, 400a60 <prvUnlockQueue+0x84>
  400a54:	4630      	mov	r0, r6
  400a56:	47a8      	blx	r5
  400a58:	2800      	cmp	r0, #0
  400a5a:	d0f3      	beq.n	400a44 <prvUnlockQueue+0x68>
  400a5c:	47b8      	blx	r7
  400a5e:	e7f1      	b.n	400a44 <prvUnlockQueue+0x68>
  400a60:	f04f 33ff 	mov.w	r3, #4294967295
  400a64:	6463      	str	r3, [r4, #68]	; 0x44
  400a66:	4b05      	ldr	r3, [pc, #20]	; (400a7c <prvUnlockQueue+0xa0>)
  400a68:	4798      	blx	r3
  400a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a6c:	004005bd 	.word	0x004005bd
  400a70:	0040092d 	.word	0x0040092d
  400a74:	00401b55 	.word	0x00401b55
  400a78:	004019f9 	.word	0x004019f9
  400a7c:	00400609 	.word	0x00400609

00400a80 <xQueueGenericReset>:
  400a80:	b538      	push	{r3, r4, r5, lr}
  400a82:	b308      	cbz	r0, 400ac8 <xQueueGenericReset+0x48>
  400a84:	4604      	mov	r4, r0
  400a86:	460d      	mov	r5, r1
  400a88:	4b1d      	ldr	r3, [pc, #116]	; (400b00 <xQueueGenericReset+0x80>)
  400a8a:	4798      	blx	r3
  400a8c:	6822      	ldr	r2, [r4, #0]
  400a8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a92:	fb03 f301 	mul.w	r3, r3, r1
  400a96:	18d0      	adds	r0, r2, r3
  400a98:	6060      	str	r0, [r4, #4]
  400a9a:	2000      	movs	r0, #0
  400a9c:	63a0      	str	r0, [r4, #56]	; 0x38
  400a9e:	60a2      	str	r2, [r4, #8]
  400aa0:	1a5b      	subs	r3, r3, r1
  400aa2:	4413      	add	r3, r2
  400aa4:	60e3      	str	r3, [r4, #12]
  400aa6:	f04f 33ff 	mov.w	r3, #4294967295
  400aaa:	6463      	str	r3, [r4, #68]	; 0x44
  400aac:	64a3      	str	r3, [r4, #72]	; 0x48
  400aae:	b9fd      	cbnz	r5, 400af0 <xQueueGenericReset+0x70>
  400ab0:	6923      	ldr	r3, [r4, #16]
  400ab2:	b12b      	cbz	r3, 400ac0 <xQueueGenericReset+0x40>
  400ab4:	f104 0010 	add.w	r0, r4, #16
  400ab8:	4b12      	ldr	r3, [pc, #72]	; (400b04 <xQueueGenericReset+0x84>)
  400aba:	4798      	blx	r3
  400abc:	2801      	cmp	r0, #1
  400abe:	d00e      	beq.n	400ade <xQueueGenericReset+0x5e>
  400ac0:	4b11      	ldr	r3, [pc, #68]	; (400b08 <xQueueGenericReset+0x88>)
  400ac2:	4798      	blx	r3
  400ac4:	2001      	movs	r0, #1
  400ac6:	bd38      	pop	{r3, r4, r5, pc}
  400ac8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400acc:	b672      	cpsid	i
  400ace:	f383 8811 	msr	BASEPRI, r3
  400ad2:	f3bf 8f6f 	isb	sy
  400ad6:	f3bf 8f4f 	dsb	sy
  400ada:	b662      	cpsie	i
  400adc:	e7fe      	b.n	400adc <xQueueGenericReset+0x5c>
  400ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ae2:	4b0a      	ldr	r3, [pc, #40]	; (400b0c <xQueueGenericReset+0x8c>)
  400ae4:	601a      	str	r2, [r3, #0]
  400ae6:	f3bf 8f4f 	dsb	sy
  400aea:	f3bf 8f6f 	isb	sy
  400aee:	e7e7      	b.n	400ac0 <xQueueGenericReset+0x40>
  400af0:	f104 0010 	add.w	r0, r4, #16
  400af4:	4d06      	ldr	r5, [pc, #24]	; (400b10 <xQueueGenericReset+0x90>)
  400af6:	47a8      	blx	r5
  400af8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400afc:	47a8      	blx	r5
  400afe:	e7df      	b.n	400ac0 <xQueueGenericReset+0x40>
  400b00:	004005bd 	.word	0x004005bd
  400b04:	004019f9 	.word	0x004019f9
  400b08:	00400609 	.word	0x00400609
  400b0c:	e000ed04 	.word	0xe000ed04
  400b10:	00400471 	.word	0x00400471

00400b14 <xQueueGenericCreate>:
  400b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b16:	b950      	cbnz	r0, 400b2e <xQueueGenericCreate+0x1a>
  400b18:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b1c:	b672      	cpsid	i
  400b1e:	f383 8811 	msr	BASEPRI, r3
  400b22:	f3bf 8f6f 	isb	sy
  400b26:	f3bf 8f4f 	dsb	sy
  400b2a:	b662      	cpsie	i
  400b2c:	e7fe      	b.n	400b2c <xQueueGenericCreate+0x18>
  400b2e:	4606      	mov	r6, r0
  400b30:	4617      	mov	r7, r2
  400b32:	460d      	mov	r5, r1
  400b34:	b189      	cbz	r1, 400b5a <xQueueGenericCreate+0x46>
  400b36:	fb01 f000 	mul.w	r0, r1, r0
  400b3a:	3059      	adds	r0, #89	; 0x59
  400b3c:	4b12      	ldr	r3, [pc, #72]	; (400b88 <xQueueGenericCreate+0x74>)
  400b3e:	4798      	blx	r3
  400b40:	4604      	mov	r4, r0
  400b42:	b9e8      	cbnz	r0, 400b80 <xQueueGenericCreate+0x6c>
  400b44:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b48:	b672      	cpsid	i
  400b4a:	f383 8811 	msr	BASEPRI, r3
  400b4e:	f3bf 8f6f 	isb	sy
  400b52:	f3bf 8f4f 	dsb	sy
  400b56:	b662      	cpsie	i
  400b58:	e7fe      	b.n	400b58 <xQueueGenericCreate+0x44>
  400b5a:	2058      	movs	r0, #88	; 0x58
  400b5c:	4b0a      	ldr	r3, [pc, #40]	; (400b88 <xQueueGenericCreate+0x74>)
  400b5e:	4798      	blx	r3
  400b60:	4604      	mov	r4, r0
  400b62:	2800      	cmp	r0, #0
  400b64:	d0ee      	beq.n	400b44 <xQueueGenericCreate+0x30>
  400b66:	6020      	str	r0, [r4, #0]
  400b68:	63e6      	str	r6, [r4, #60]	; 0x3c
  400b6a:	6425      	str	r5, [r4, #64]	; 0x40
  400b6c:	2101      	movs	r1, #1
  400b6e:	4620      	mov	r0, r4
  400b70:	4b06      	ldr	r3, [pc, #24]	; (400b8c <xQueueGenericCreate+0x78>)
  400b72:	4798      	blx	r3
  400b74:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  400b78:	2300      	movs	r3, #0
  400b7a:	6563      	str	r3, [r4, #84]	; 0x54
  400b7c:	4620      	mov	r0, r4
  400b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b80:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400b84:	6003      	str	r3, [r0, #0]
  400b86:	e7ef      	b.n	400b68 <xQueueGenericCreate+0x54>
  400b88:	00400819 	.word	0x00400819
  400b8c:	00400a81 	.word	0x00400a81

00400b90 <xQueueCreateCountingSemaphore>:
  400b90:	b950      	cbnz	r0, 400ba8 <xQueueCreateCountingSemaphore+0x18>
  400b92:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b96:	b672      	cpsid	i
  400b98:	f383 8811 	msr	BASEPRI, r3
  400b9c:	f3bf 8f6f 	isb	sy
  400ba0:	f3bf 8f4f 	dsb	sy
  400ba4:	b662      	cpsie	i
  400ba6:	e7fe      	b.n	400ba6 <xQueueCreateCountingSemaphore+0x16>
  400ba8:	4288      	cmp	r0, r1
  400baa:	d20a      	bcs.n	400bc2 <xQueueCreateCountingSemaphore+0x32>
  400bac:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bb0:	b672      	cpsid	i
  400bb2:	f383 8811 	msr	BASEPRI, r3
  400bb6:	f3bf 8f6f 	isb	sy
  400bba:	f3bf 8f4f 	dsb	sy
  400bbe:	b662      	cpsie	i
  400bc0:	e7fe      	b.n	400bc0 <xQueueCreateCountingSemaphore+0x30>
  400bc2:	b510      	push	{r4, lr}
  400bc4:	460c      	mov	r4, r1
  400bc6:	2202      	movs	r2, #2
  400bc8:	2100      	movs	r1, #0
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <xQueueCreateCountingSemaphore+0x5c>)
  400bcc:	4798      	blx	r3
  400bce:	b108      	cbz	r0, 400bd4 <xQueueCreateCountingSemaphore+0x44>
  400bd0:	6384      	str	r4, [r0, #56]	; 0x38
  400bd2:	bd10      	pop	{r4, pc}
  400bd4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bd8:	b672      	cpsid	i
  400bda:	f383 8811 	msr	BASEPRI, r3
  400bde:	f3bf 8f6f 	isb	sy
  400be2:	f3bf 8f4f 	dsb	sy
  400be6:	b662      	cpsie	i
  400be8:	e7fe      	b.n	400be8 <xQueueCreateCountingSemaphore+0x58>
  400bea:	bf00      	nop
  400bec:	00400b15 	.word	0x00400b15

00400bf0 <xQueueGenericSend>:
  400bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bf4:	b085      	sub	sp, #20
  400bf6:	9201      	str	r2, [sp, #4]
  400bf8:	b1b8      	cbz	r0, 400c2a <xQueueGenericSend+0x3a>
  400bfa:	4604      	mov	r4, r0
  400bfc:	b301      	cbz	r1, 400c40 <xQueueGenericSend+0x50>
  400bfe:	2b02      	cmp	r3, #2
  400c00:	d02c      	beq.n	400c5c <xQueueGenericSend+0x6c>
  400c02:	461d      	mov	r5, r3
  400c04:	4688      	mov	r8, r1
  400c06:	4b66      	ldr	r3, [pc, #408]	; (400da0 <xQueueGenericSend+0x1b0>)
  400c08:	4798      	blx	r3
  400c0a:	2800      	cmp	r0, #0
  400c0c:	d134      	bne.n	400c78 <xQueueGenericSend+0x88>
  400c0e:	9b01      	ldr	r3, [sp, #4]
  400c10:	2b00      	cmp	r3, #0
  400c12:	d038      	beq.n	400c86 <xQueueGenericSend+0x96>
  400c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c18:	b672      	cpsid	i
  400c1a:	f383 8811 	msr	BASEPRI, r3
  400c1e:	f3bf 8f6f 	isb	sy
  400c22:	f3bf 8f4f 	dsb	sy
  400c26:	b662      	cpsie	i
  400c28:	e7fe      	b.n	400c28 <xQueueGenericSend+0x38>
  400c2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c2e:	b672      	cpsid	i
  400c30:	f383 8811 	msr	BASEPRI, r3
  400c34:	f3bf 8f6f 	isb	sy
  400c38:	f3bf 8f4f 	dsb	sy
  400c3c:	b662      	cpsie	i
  400c3e:	e7fe      	b.n	400c3e <xQueueGenericSend+0x4e>
  400c40:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c42:	2a00      	cmp	r2, #0
  400c44:	d0db      	beq.n	400bfe <xQueueGenericSend+0xe>
  400c46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c4a:	b672      	cpsid	i
  400c4c:	f383 8811 	msr	BASEPRI, r3
  400c50:	f3bf 8f6f 	isb	sy
  400c54:	f3bf 8f4f 	dsb	sy
  400c58:	b662      	cpsie	i
  400c5a:	e7fe      	b.n	400c5a <xQueueGenericSend+0x6a>
  400c5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400c5e:	2a01      	cmp	r2, #1
  400c60:	d0cf      	beq.n	400c02 <xQueueGenericSend+0x12>
  400c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c66:	b672      	cpsid	i
  400c68:	f383 8811 	msr	BASEPRI, r3
  400c6c:	f3bf 8f6f 	isb	sy
  400c70:	f3bf 8f4f 	dsb	sy
  400c74:	b662      	cpsie	i
  400c76:	e7fe      	b.n	400c76 <xQueueGenericSend+0x86>
  400c78:	2700      	movs	r7, #0
  400c7a:	4e4a      	ldr	r6, [pc, #296]	; (400da4 <xQueueGenericSend+0x1b4>)
  400c7c:	f8df a150 	ldr.w	sl, [pc, #336]	; 400dd0 <xQueueGenericSend+0x1e0>
  400c80:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400db0 <xQueueGenericSend+0x1c0>
  400c84:	e042      	b.n	400d0c <xQueueGenericSend+0x11c>
  400c86:	2700      	movs	r7, #0
  400c88:	e7f7      	b.n	400c7a <xQueueGenericSend+0x8a>
  400c8a:	462a      	mov	r2, r5
  400c8c:	4641      	mov	r1, r8
  400c8e:	4620      	mov	r0, r4
  400c90:	4b45      	ldr	r3, [pc, #276]	; (400da8 <xQueueGenericSend+0x1b8>)
  400c92:	4798      	blx	r3
  400c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400c96:	b19b      	cbz	r3, 400cc0 <xQueueGenericSend+0xd0>
  400c98:	4629      	mov	r1, r5
  400c9a:	4620      	mov	r0, r4
  400c9c:	4b43      	ldr	r3, [pc, #268]	; (400dac <xQueueGenericSend+0x1bc>)
  400c9e:	4798      	blx	r3
  400ca0:	2801      	cmp	r0, #1
  400ca2:	d107      	bne.n	400cb4 <xQueueGenericSend+0xc4>
  400ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ca8:	4b41      	ldr	r3, [pc, #260]	; (400db0 <xQueueGenericSend+0x1c0>)
  400caa:	601a      	str	r2, [r3, #0]
  400cac:	f3bf 8f4f 	dsb	sy
  400cb0:	f3bf 8f6f 	isb	sy
  400cb4:	4b3f      	ldr	r3, [pc, #252]	; (400db4 <xQueueGenericSend+0x1c4>)
  400cb6:	4798      	blx	r3
  400cb8:	2001      	movs	r0, #1
  400cba:	b005      	add	sp, #20
  400cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400cc2:	b173      	cbz	r3, 400ce2 <xQueueGenericSend+0xf2>
  400cc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cc8:	4b3b      	ldr	r3, [pc, #236]	; (400db8 <xQueueGenericSend+0x1c8>)
  400cca:	4798      	blx	r3
  400ccc:	2801      	cmp	r0, #1
  400cce:	d1f1      	bne.n	400cb4 <xQueueGenericSend+0xc4>
  400cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cd4:	4b36      	ldr	r3, [pc, #216]	; (400db0 <xQueueGenericSend+0x1c0>)
  400cd6:	601a      	str	r2, [r3, #0]
  400cd8:	f3bf 8f4f 	dsb	sy
  400cdc:	f3bf 8f6f 	isb	sy
  400ce0:	e7e8      	b.n	400cb4 <xQueueGenericSend+0xc4>
  400ce2:	2800      	cmp	r0, #0
  400ce4:	d0e6      	beq.n	400cb4 <xQueueGenericSend+0xc4>
  400ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cea:	4b31      	ldr	r3, [pc, #196]	; (400db0 <xQueueGenericSend+0x1c0>)
  400cec:	601a      	str	r2, [r3, #0]
  400cee:	f3bf 8f4f 	dsb	sy
  400cf2:	f3bf 8f6f 	isb	sy
  400cf6:	e7dd      	b.n	400cb4 <xQueueGenericSend+0xc4>
  400cf8:	4b2e      	ldr	r3, [pc, #184]	; (400db4 <xQueueGenericSend+0x1c4>)
  400cfa:	4798      	blx	r3
  400cfc:	2000      	movs	r0, #0
  400cfe:	e7dc      	b.n	400cba <xQueueGenericSend+0xca>
  400d00:	4620      	mov	r0, r4
  400d02:	4b2e      	ldr	r3, [pc, #184]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d04:	4798      	blx	r3
  400d06:	4b2e      	ldr	r3, [pc, #184]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d08:	4798      	blx	r3
  400d0a:	2701      	movs	r7, #1
  400d0c:	47b0      	blx	r6
  400d0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d12:	429a      	cmp	r2, r3
  400d14:	d3b9      	bcc.n	400c8a <xQueueGenericSend+0x9a>
  400d16:	2d02      	cmp	r5, #2
  400d18:	d0b7      	beq.n	400c8a <xQueueGenericSend+0x9a>
  400d1a:	9b01      	ldr	r3, [sp, #4]
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d0eb      	beq.n	400cf8 <xQueueGenericSend+0x108>
  400d20:	b90f      	cbnz	r7, 400d26 <xQueueGenericSend+0x136>
  400d22:	a802      	add	r0, sp, #8
  400d24:	47d0      	blx	sl
  400d26:	4b23      	ldr	r3, [pc, #140]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d28:	4798      	blx	r3
  400d2a:	4b26      	ldr	r3, [pc, #152]	; (400dc4 <xQueueGenericSend+0x1d4>)
  400d2c:	4798      	blx	r3
  400d2e:	47b0      	blx	r6
  400d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d32:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d36:	d101      	bne.n	400d3c <xQueueGenericSend+0x14c>
  400d38:	2300      	movs	r3, #0
  400d3a:	6463      	str	r3, [r4, #68]	; 0x44
  400d3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d42:	d101      	bne.n	400d48 <xQueueGenericSend+0x158>
  400d44:	2300      	movs	r3, #0
  400d46:	64a3      	str	r3, [r4, #72]	; 0x48
  400d48:	4b1a      	ldr	r3, [pc, #104]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d4a:	4798      	blx	r3
  400d4c:	a901      	add	r1, sp, #4
  400d4e:	a802      	add	r0, sp, #8
  400d50:	4b1d      	ldr	r3, [pc, #116]	; (400dc8 <xQueueGenericSend+0x1d8>)
  400d52:	4798      	blx	r3
  400d54:	b9e0      	cbnz	r0, 400d90 <xQueueGenericSend+0x1a0>
  400d56:	47b0      	blx	r6
  400d58:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400d5c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  400d5e:	4b15      	ldr	r3, [pc, #84]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d60:	4798      	blx	r3
  400d62:	45bb      	cmp	fp, r7
  400d64:	d1cc      	bne.n	400d00 <xQueueGenericSend+0x110>
  400d66:	9901      	ldr	r1, [sp, #4]
  400d68:	f104 0010 	add.w	r0, r4, #16
  400d6c:	4b17      	ldr	r3, [pc, #92]	; (400dcc <xQueueGenericSend+0x1dc>)
  400d6e:	4798      	blx	r3
  400d70:	4620      	mov	r0, r4
  400d72:	4b12      	ldr	r3, [pc, #72]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d74:	4798      	blx	r3
  400d76:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d78:	4798      	blx	r3
  400d7a:	2800      	cmp	r0, #0
  400d7c:	d1c5      	bne.n	400d0a <xQueueGenericSend+0x11a>
  400d7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400d82:	f8c9 3000 	str.w	r3, [r9]
  400d86:	f3bf 8f4f 	dsb	sy
  400d8a:	f3bf 8f6f 	isb	sy
  400d8e:	e7bc      	b.n	400d0a <xQueueGenericSend+0x11a>
  400d90:	4620      	mov	r0, r4
  400d92:	4b0a      	ldr	r3, [pc, #40]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d94:	4798      	blx	r3
  400d96:	4b0a      	ldr	r3, [pc, #40]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d98:	4798      	blx	r3
  400d9a:	2000      	movs	r0, #0
  400d9c:	e78d      	b.n	400cba <xQueueGenericSend+0xca>
  400d9e:	bf00      	nop
  400da0:	00401b61 	.word	0x00401b61
  400da4:	004005bd 	.word	0x004005bd
  400da8:	004008a5 	.word	0x004008a5
  400dac:	0040092d 	.word	0x0040092d
  400db0:	e000ed04 	.word	0xe000ed04
  400db4:	00400609 	.word	0x00400609
  400db8:	004019f9 	.word	0x004019f9
  400dbc:	004009dd 	.word	0x004009dd
  400dc0:	004015dd 	.word	0x004015dd
  400dc4:	00401475 	.word	0x00401475
  400dc8:	00401ac1 	.word	0x00401ac1
  400dcc:	004018f5 	.word	0x004018f5
  400dd0:	00401a91 	.word	0x00401a91

00400dd4 <xQueueGenericSendFromISR>:
  400dd4:	2800      	cmp	r0, #0
  400dd6:	d036      	beq.n	400e46 <xQueueGenericSendFromISR+0x72>
  400dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ddc:	4604      	mov	r4, r0
  400dde:	2900      	cmp	r1, #0
  400de0:	d03c      	beq.n	400e5c <xQueueGenericSendFromISR+0x88>
  400de2:	2b02      	cmp	r3, #2
  400de4:	d048      	beq.n	400e78 <xQueueGenericSendFromISR+0xa4>
  400de6:	461e      	mov	r6, r3
  400de8:	4615      	mov	r5, r2
  400dea:	4688      	mov	r8, r1
  400dec:	4b35      	ldr	r3, [pc, #212]	; (400ec4 <xQueueGenericSendFromISR+0xf0>)
  400dee:	4798      	blx	r3
  400df0:	f3ef 8711 	mrs	r7, BASEPRI
  400df4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400df8:	b672      	cpsid	i
  400dfa:	f383 8811 	msr	BASEPRI, r3
  400dfe:	f3bf 8f6f 	isb	sy
  400e02:	f3bf 8f4f 	dsb	sy
  400e06:	b662      	cpsie	i
  400e08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400e0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e0c:	429a      	cmp	r2, r3
  400e0e:	d301      	bcc.n	400e14 <xQueueGenericSendFromISR+0x40>
  400e10:	2e02      	cmp	r6, #2
  400e12:	d14f      	bne.n	400eb4 <xQueueGenericSendFromISR+0xe0>
  400e14:	4632      	mov	r2, r6
  400e16:	4641      	mov	r1, r8
  400e18:	4620      	mov	r0, r4
  400e1a:	4b2b      	ldr	r3, [pc, #172]	; (400ec8 <xQueueGenericSendFromISR+0xf4>)
  400e1c:	4798      	blx	r3
  400e1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e20:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e24:	d141      	bne.n	400eaa <xQueueGenericSendFromISR+0xd6>
  400e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400e28:	2b00      	cmp	r3, #0
  400e2a:	d033      	beq.n	400e94 <xQueueGenericSendFromISR+0xc0>
  400e2c:	4631      	mov	r1, r6
  400e2e:	4620      	mov	r0, r4
  400e30:	4b26      	ldr	r3, [pc, #152]	; (400ecc <xQueueGenericSendFromISR+0xf8>)
  400e32:	4798      	blx	r3
  400e34:	2d00      	cmp	r5, #0
  400e36:	d03f      	beq.n	400eb8 <xQueueGenericSendFromISR+0xe4>
  400e38:	2801      	cmp	r0, #1
  400e3a:	d13d      	bne.n	400eb8 <xQueueGenericSendFromISR+0xe4>
  400e3c:	6028      	str	r0, [r5, #0]
  400e3e:	f387 8811 	msr	BASEPRI, r7
  400e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e4a:	b672      	cpsid	i
  400e4c:	f383 8811 	msr	BASEPRI, r3
  400e50:	f3bf 8f6f 	isb	sy
  400e54:	f3bf 8f4f 	dsb	sy
  400e58:	b662      	cpsie	i
  400e5a:	e7fe      	b.n	400e5a <xQueueGenericSendFromISR+0x86>
  400e5c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400e5e:	2800      	cmp	r0, #0
  400e60:	d0bf      	beq.n	400de2 <xQueueGenericSendFromISR+0xe>
  400e62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e66:	b672      	cpsid	i
  400e68:	f383 8811 	msr	BASEPRI, r3
  400e6c:	f3bf 8f6f 	isb	sy
  400e70:	f3bf 8f4f 	dsb	sy
  400e74:	b662      	cpsie	i
  400e76:	e7fe      	b.n	400e76 <xQueueGenericSendFromISR+0xa2>
  400e78:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400e7a:	2801      	cmp	r0, #1
  400e7c:	d0b3      	beq.n	400de6 <xQueueGenericSendFromISR+0x12>
  400e7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e82:	b672      	cpsid	i
  400e84:	f383 8811 	msr	BASEPRI, r3
  400e88:	f3bf 8f6f 	isb	sy
  400e8c:	f3bf 8f4f 	dsb	sy
  400e90:	b662      	cpsie	i
  400e92:	e7fe      	b.n	400e92 <xQueueGenericSendFromISR+0xbe>
  400e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e96:	b18b      	cbz	r3, 400ebc <xQueueGenericSendFromISR+0xe8>
  400e98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e9c:	4b0c      	ldr	r3, [pc, #48]	; (400ed0 <xQueueGenericSendFromISR+0xfc>)
  400e9e:	4798      	blx	r3
  400ea0:	b175      	cbz	r5, 400ec0 <xQueueGenericSendFromISR+0xec>
  400ea2:	b168      	cbz	r0, 400ec0 <xQueueGenericSendFromISR+0xec>
  400ea4:	2001      	movs	r0, #1
  400ea6:	6028      	str	r0, [r5, #0]
  400ea8:	e7c9      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400eac:	3301      	adds	r3, #1
  400eae:	64a3      	str	r3, [r4, #72]	; 0x48
  400eb0:	2001      	movs	r0, #1
  400eb2:	e7c4      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400eb4:	2000      	movs	r0, #0
  400eb6:	e7c2      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400eb8:	2001      	movs	r0, #1
  400eba:	e7c0      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ebc:	2001      	movs	r0, #1
  400ebe:	e7be      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ec0:	2001      	movs	r0, #1
  400ec2:	e7bc      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ec4:	004007b5 	.word	0x004007b5
  400ec8:	004008a5 	.word	0x004008a5
  400ecc:	0040092d 	.word	0x0040092d
  400ed0:	004019f9 	.word	0x004019f9

00400ed4 <xQueueGenericReceive>:
  400ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400ed8:	b084      	sub	sp, #16
  400eda:	9201      	str	r2, [sp, #4]
  400edc:	b198      	cbz	r0, 400f06 <xQueueGenericReceive+0x32>
  400ede:	4604      	mov	r4, r0
  400ee0:	b1e1      	cbz	r1, 400f1c <xQueueGenericReceive+0x48>
  400ee2:	4698      	mov	r8, r3
  400ee4:	460f      	mov	r7, r1
  400ee6:	4b61      	ldr	r3, [pc, #388]	; (40106c <xQueueGenericReceive+0x198>)
  400ee8:	4798      	blx	r3
  400eea:	bb28      	cbnz	r0, 400f38 <xQueueGenericReceive+0x64>
  400eec:	9b01      	ldr	r3, [sp, #4]
  400eee:	b353      	cbz	r3, 400f46 <xQueueGenericReceive+0x72>
  400ef0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef4:	b672      	cpsid	i
  400ef6:	f383 8811 	msr	BASEPRI, r3
  400efa:	f3bf 8f6f 	isb	sy
  400efe:	f3bf 8f4f 	dsb	sy
  400f02:	b662      	cpsie	i
  400f04:	e7fe      	b.n	400f04 <xQueueGenericReceive+0x30>
  400f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f0a:	b672      	cpsid	i
  400f0c:	f383 8811 	msr	BASEPRI, r3
  400f10:	f3bf 8f6f 	isb	sy
  400f14:	f3bf 8f4f 	dsb	sy
  400f18:	b662      	cpsie	i
  400f1a:	e7fe      	b.n	400f1a <xQueueGenericReceive+0x46>
  400f1c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400f1e:	2a00      	cmp	r2, #0
  400f20:	d0df      	beq.n	400ee2 <xQueueGenericReceive+0xe>
  400f22:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f26:	b672      	cpsid	i
  400f28:	f383 8811 	msr	BASEPRI, r3
  400f2c:	f3bf 8f6f 	isb	sy
  400f30:	f3bf 8f4f 	dsb	sy
  400f34:	b662      	cpsie	i
  400f36:	e7fe      	b.n	400f36 <xQueueGenericReceive+0x62>
  400f38:	2600      	movs	r6, #0
  400f3a:	4d4d      	ldr	r5, [pc, #308]	; (401070 <xQueueGenericReceive+0x19c>)
  400f3c:	f8df a160 	ldr.w	sl, [pc, #352]	; 4010a0 <xQueueGenericReceive+0x1cc>
  400f40:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401080 <xQueueGenericReceive+0x1ac>
  400f44:	e04b      	b.n	400fde <xQueueGenericReceive+0x10a>
  400f46:	2600      	movs	r6, #0
  400f48:	e7f7      	b.n	400f3a <xQueueGenericReceive+0x66>
  400f4a:	68e5      	ldr	r5, [r4, #12]
  400f4c:	4639      	mov	r1, r7
  400f4e:	4620      	mov	r0, r4
  400f50:	4b48      	ldr	r3, [pc, #288]	; (401074 <xQueueGenericReceive+0x1a0>)
  400f52:	4798      	blx	r3
  400f54:	f1b8 0f00 	cmp.w	r8, #0
  400f58:	d11d      	bne.n	400f96 <xQueueGenericReceive+0xc2>
  400f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f5c:	3b01      	subs	r3, #1
  400f5e:	63a3      	str	r3, [r4, #56]	; 0x38
  400f60:	6823      	ldr	r3, [r4, #0]
  400f62:	b913      	cbnz	r3, 400f6a <xQueueGenericReceive+0x96>
  400f64:	4b44      	ldr	r3, [pc, #272]	; (401078 <xQueueGenericReceive+0x1a4>)
  400f66:	4798      	blx	r3
  400f68:	6060      	str	r0, [r4, #4]
  400f6a:	6923      	ldr	r3, [r4, #16]
  400f6c:	b16b      	cbz	r3, 400f8a <xQueueGenericReceive+0xb6>
  400f6e:	f104 0010 	add.w	r0, r4, #16
  400f72:	4b42      	ldr	r3, [pc, #264]	; (40107c <xQueueGenericReceive+0x1a8>)
  400f74:	4798      	blx	r3
  400f76:	2801      	cmp	r0, #1
  400f78:	d107      	bne.n	400f8a <xQueueGenericReceive+0xb6>
  400f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f7e:	4b40      	ldr	r3, [pc, #256]	; (401080 <xQueueGenericReceive+0x1ac>)
  400f80:	601a      	str	r2, [r3, #0]
  400f82:	f3bf 8f4f 	dsb	sy
  400f86:	f3bf 8f6f 	isb	sy
  400f8a:	4b3e      	ldr	r3, [pc, #248]	; (401084 <xQueueGenericReceive+0x1b0>)
  400f8c:	4798      	blx	r3
  400f8e:	2001      	movs	r0, #1
  400f90:	b004      	add	sp, #16
  400f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400f96:	60e5      	str	r5, [r4, #12]
  400f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	d0f5      	beq.n	400f8a <xQueueGenericReceive+0xb6>
  400f9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fa2:	4b36      	ldr	r3, [pc, #216]	; (40107c <xQueueGenericReceive+0x1a8>)
  400fa4:	4798      	blx	r3
  400fa6:	2800      	cmp	r0, #0
  400fa8:	d0ef      	beq.n	400f8a <xQueueGenericReceive+0xb6>
  400faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fae:	4b34      	ldr	r3, [pc, #208]	; (401080 <xQueueGenericReceive+0x1ac>)
  400fb0:	601a      	str	r2, [r3, #0]
  400fb2:	f3bf 8f4f 	dsb	sy
  400fb6:	f3bf 8f6f 	isb	sy
  400fba:	e7e6      	b.n	400f8a <xQueueGenericReceive+0xb6>
  400fbc:	4b31      	ldr	r3, [pc, #196]	; (401084 <xQueueGenericReceive+0x1b0>)
  400fbe:	4798      	blx	r3
  400fc0:	2000      	movs	r0, #0
  400fc2:	e7e5      	b.n	400f90 <xQueueGenericReceive+0xbc>
  400fc4:	47a8      	blx	r5
  400fc6:	6860      	ldr	r0, [r4, #4]
  400fc8:	4b2f      	ldr	r3, [pc, #188]	; (401088 <xQueueGenericReceive+0x1b4>)
  400fca:	4798      	blx	r3
  400fcc:	4b2d      	ldr	r3, [pc, #180]	; (401084 <xQueueGenericReceive+0x1b0>)
  400fce:	4798      	blx	r3
  400fd0:	e030      	b.n	401034 <xQueueGenericReceive+0x160>
  400fd2:	4620      	mov	r0, r4
  400fd4:	4b2d      	ldr	r3, [pc, #180]	; (40108c <xQueueGenericReceive+0x1b8>)
  400fd6:	4798      	blx	r3
  400fd8:	4b2d      	ldr	r3, [pc, #180]	; (401090 <xQueueGenericReceive+0x1bc>)
  400fda:	4798      	blx	r3
  400fdc:	2601      	movs	r6, #1
  400fde:	47a8      	blx	r5
  400fe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fe2:	2b00      	cmp	r3, #0
  400fe4:	d1b1      	bne.n	400f4a <xQueueGenericReceive+0x76>
  400fe6:	9b01      	ldr	r3, [sp, #4]
  400fe8:	2b00      	cmp	r3, #0
  400fea:	d0e7      	beq.n	400fbc <xQueueGenericReceive+0xe8>
  400fec:	b90e      	cbnz	r6, 400ff2 <xQueueGenericReceive+0x11e>
  400fee:	a802      	add	r0, sp, #8
  400ff0:	47d0      	blx	sl
  400ff2:	4b24      	ldr	r3, [pc, #144]	; (401084 <xQueueGenericReceive+0x1b0>)
  400ff4:	4798      	blx	r3
  400ff6:	4b27      	ldr	r3, [pc, #156]	; (401094 <xQueueGenericReceive+0x1c0>)
  400ff8:	4798      	blx	r3
  400ffa:	47a8      	blx	r5
  400ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401002:	d101      	bne.n	401008 <xQueueGenericReceive+0x134>
  401004:	2300      	movs	r3, #0
  401006:	6463      	str	r3, [r4, #68]	; 0x44
  401008:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40100a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40100e:	d101      	bne.n	401014 <xQueueGenericReceive+0x140>
  401010:	2300      	movs	r3, #0
  401012:	64a3      	str	r3, [r4, #72]	; 0x48
  401014:	4b1b      	ldr	r3, [pc, #108]	; (401084 <xQueueGenericReceive+0x1b0>)
  401016:	4798      	blx	r3
  401018:	a901      	add	r1, sp, #4
  40101a:	a802      	add	r0, sp, #8
  40101c:	4b1e      	ldr	r3, [pc, #120]	; (401098 <xQueueGenericReceive+0x1c4>)
  40101e:	4798      	blx	r3
  401020:	b9e8      	cbnz	r0, 40105e <xQueueGenericReceive+0x18a>
  401022:	47a8      	blx	r5
  401024:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  401026:	4b17      	ldr	r3, [pc, #92]	; (401084 <xQueueGenericReceive+0x1b0>)
  401028:	4798      	blx	r3
  40102a:	2e00      	cmp	r6, #0
  40102c:	d1d1      	bne.n	400fd2 <xQueueGenericReceive+0xfe>
  40102e:	6823      	ldr	r3, [r4, #0]
  401030:	2b00      	cmp	r3, #0
  401032:	d0c7      	beq.n	400fc4 <xQueueGenericReceive+0xf0>
  401034:	9901      	ldr	r1, [sp, #4]
  401036:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40103a:	4b18      	ldr	r3, [pc, #96]	; (40109c <xQueueGenericReceive+0x1c8>)
  40103c:	4798      	blx	r3
  40103e:	4620      	mov	r0, r4
  401040:	4b12      	ldr	r3, [pc, #72]	; (40108c <xQueueGenericReceive+0x1b8>)
  401042:	4798      	blx	r3
  401044:	4b12      	ldr	r3, [pc, #72]	; (401090 <xQueueGenericReceive+0x1bc>)
  401046:	4798      	blx	r3
  401048:	2800      	cmp	r0, #0
  40104a:	d1c7      	bne.n	400fdc <xQueueGenericReceive+0x108>
  40104c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401050:	f8c9 3000 	str.w	r3, [r9]
  401054:	f3bf 8f4f 	dsb	sy
  401058:	f3bf 8f6f 	isb	sy
  40105c:	e7be      	b.n	400fdc <xQueueGenericReceive+0x108>
  40105e:	4620      	mov	r0, r4
  401060:	4b0a      	ldr	r3, [pc, #40]	; (40108c <xQueueGenericReceive+0x1b8>)
  401062:	4798      	blx	r3
  401064:	4b0a      	ldr	r3, [pc, #40]	; (401090 <xQueueGenericReceive+0x1bc>)
  401066:	4798      	blx	r3
  401068:	2000      	movs	r0, #0
  40106a:	e791      	b.n	400f90 <xQueueGenericReceive+0xbc>
  40106c:	00401b61 	.word	0x00401b61
  401070:	004005bd 	.word	0x004005bd
  401074:	004009b5 	.word	0x004009b5
  401078:	00401ce1 	.word	0x00401ce1
  40107c:	004019f9 	.word	0x004019f9
  401080:	e000ed04 	.word	0xe000ed04
  401084:	00400609 	.word	0x00400609
  401088:	00401b81 	.word	0x00401b81
  40108c:	004009dd 	.word	0x004009dd
  401090:	004015dd 	.word	0x004015dd
  401094:	00401475 	.word	0x00401475
  401098:	00401ac1 	.word	0x00401ac1
  40109c:	004018f5 	.word	0x004018f5
  4010a0:	00401a91 	.word	0x00401a91

004010a4 <vQueueAddToRegistry>:
  4010a4:	b410      	push	{r4}
  4010a6:	4b0b      	ldr	r3, [pc, #44]	; (4010d4 <vQueueAddToRegistry+0x30>)
  4010a8:	681b      	ldr	r3, [r3, #0]
  4010aa:	b153      	cbz	r3, 4010c2 <vQueueAddToRegistry+0x1e>
  4010ac:	2301      	movs	r3, #1
  4010ae:	4c09      	ldr	r4, [pc, #36]	; (4010d4 <vQueueAddToRegistry+0x30>)
  4010b0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4010b4:	b132      	cbz	r2, 4010c4 <vQueueAddToRegistry+0x20>
  4010b6:	3301      	adds	r3, #1
  4010b8:	2b08      	cmp	r3, #8
  4010ba:	d1f9      	bne.n	4010b0 <vQueueAddToRegistry+0xc>
  4010bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010c0:	4770      	bx	lr
  4010c2:	2300      	movs	r3, #0
  4010c4:	4a03      	ldr	r2, [pc, #12]	; (4010d4 <vQueueAddToRegistry+0x30>)
  4010c6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  4010ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4010ce:	6058      	str	r0, [r3, #4]
  4010d0:	e7f4      	b.n	4010bc <vQueueAddToRegistry+0x18>
  4010d2:	bf00      	nop
  4010d4:	2040cf14 	.word	0x2040cf14

004010d8 <vQueueWaitForMessageRestricted>:
  4010d8:	b570      	push	{r4, r5, r6, lr}
  4010da:	4604      	mov	r4, r0
  4010dc:	460d      	mov	r5, r1
  4010de:	4616      	mov	r6, r2
  4010e0:	4b0f      	ldr	r3, [pc, #60]	; (401120 <vQueueWaitForMessageRestricted+0x48>)
  4010e2:	4798      	blx	r3
  4010e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4010e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ea:	d00b      	beq.n	401104 <vQueueWaitForMessageRestricted+0x2c>
  4010ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010f2:	d00a      	beq.n	40110a <vQueueWaitForMessageRestricted+0x32>
  4010f4:	4b0b      	ldr	r3, [pc, #44]	; (401124 <vQueueWaitForMessageRestricted+0x4c>)
  4010f6:	4798      	blx	r3
  4010f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010fa:	b14b      	cbz	r3, 401110 <vQueueWaitForMessageRestricted+0x38>
  4010fc:	4620      	mov	r0, r4
  4010fe:	4b0a      	ldr	r3, [pc, #40]	; (401128 <vQueueWaitForMessageRestricted+0x50>)
  401100:	4798      	blx	r3
  401102:	bd70      	pop	{r4, r5, r6, pc}
  401104:	2300      	movs	r3, #0
  401106:	6463      	str	r3, [r4, #68]	; 0x44
  401108:	e7f0      	b.n	4010ec <vQueueWaitForMessageRestricted+0x14>
  40110a:	2300      	movs	r3, #0
  40110c:	64a3      	str	r3, [r4, #72]	; 0x48
  40110e:	e7f1      	b.n	4010f4 <vQueueWaitForMessageRestricted+0x1c>
  401110:	4632      	mov	r2, r6
  401112:	4629      	mov	r1, r5
  401114:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401118:	4b04      	ldr	r3, [pc, #16]	; (40112c <vQueueWaitForMessageRestricted+0x54>)
  40111a:	4798      	blx	r3
  40111c:	e7ee      	b.n	4010fc <vQueueWaitForMessageRestricted+0x24>
  40111e:	bf00      	nop
  401120:	004005bd 	.word	0x004005bd
  401124:	00400609 	.word	0x00400609
  401128:	004009dd 	.word	0x004009dd
  40112c:	00401979 	.word	0x00401979

00401130 <prvResetNextTaskUnblockTime>:
  401130:	4b08      	ldr	r3, [pc, #32]	; (401154 <prvResetNextTaskUnblockTime+0x24>)
  401132:	681b      	ldr	r3, [r3, #0]
  401134:	681b      	ldr	r3, [r3, #0]
  401136:	b13b      	cbz	r3, 401148 <prvResetNextTaskUnblockTime+0x18>
  401138:	4b06      	ldr	r3, [pc, #24]	; (401154 <prvResetNextTaskUnblockTime+0x24>)
  40113a:	681b      	ldr	r3, [r3, #0]
  40113c:	68db      	ldr	r3, [r3, #12]
  40113e:	68db      	ldr	r3, [r3, #12]
  401140:	685a      	ldr	r2, [r3, #4]
  401142:	4b05      	ldr	r3, [pc, #20]	; (401158 <prvResetNextTaskUnblockTime+0x28>)
  401144:	601a      	str	r2, [r3, #0]
  401146:	4770      	bx	lr
  401148:	f04f 32ff 	mov.w	r2, #4294967295
  40114c:	4b02      	ldr	r3, [pc, #8]	; (401158 <prvResetNextTaskUnblockTime+0x28>)
  40114e:	601a      	str	r2, [r3, #0]
  401150:	4770      	bx	lr
  401152:	bf00      	nop
  401154:	2040c200 	.word	0x2040c200
  401158:	2040c2ac 	.word	0x2040c2ac

0040115c <prvAddCurrentTaskToDelayedList>:
  40115c:	b510      	push	{r4, lr}
  40115e:	4b0f      	ldr	r3, [pc, #60]	; (40119c <prvAddCurrentTaskToDelayedList+0x40>)
  401160:	681b      	ldr	r3, [r3, #0]
  401162:	6058      	str	r0, [r3, #4]
  401164:	4b0e      	ldr	r3, [pc, #56]	; (4011a0 <prvAddCurrentTaskToDelayedList+0x44>)
  401166:	681b      	ldr	r3, [r3, #0]
  401168:	4298      	cmp	r0, r3
  40116a:	d30e      	bcc.n	40118a <prvAddCurrentTaskToDelayedList+0x2e>
  40116c:	4604      	mov	r4, r0
  40116e:	4b0d      	ldr	r3, [pc, #52]	; (4011a4 <prvAddCurrentTaskToDelayedList+0x48>)
  401170:	6818      	ldr	r0, [r3, #0]
  401172:	4b0a      	ldr	r3, [pc, #40]	; (40119c <prvAddCurrentTaskToDelayedList+0x40>)
  401174:	6819      	ldr	r1, [r3, #0]
  401176:	3104      	adds	r1, #4
  401178:	4b0b      	ldr	r3, [pc, #44]	; (4011a8 <prvAddCurrentTaskToDelayedList+0x4c>)
  40117a:	4798      	blx	r3
  40117c:	4b0b      	ldr	r3, [pc, #44]	; (4011ac <prvAddCurrentTaskToDelayedList+0x50>)
  40117e:	681b      	ldr	r3, [r3, #0]
  401180:	429c      	cmp	r4, r3
  401182:	d201      	bcs.n	401188 <prvAddCurrentTaskToDelayedList+0x2c>
  401184:	4b09      	ldr	r3, [pc, #36]	; (4011ac <prvAddCurrentTaskToDelayedList+0x50>)
  401186:	601c      	str	r4, [r3, #0]
  401188:	bd10      	pop	{r4, pc}
  40118a:	4b09      	ldr	r3, [pc, #36]	; (4011b0 <prvAddCurrentTaskToDelayedList+0x54>)
  40118c:	6818      	ldr	r0, [r3, #0]
  40118e:	4b03      	ldr	r3, [pc, #12]	; (40119c <prvAddCurrentTaskToDelayedList+0x40>)
  401190:	6819      	ldr	r1, [r3, #0]
  401192:	3104      	adds	r1, #4
  401194:	4b04      	ldr	r3, [pc, #16]	; (4011a8 <prvAddCurrentTaskToDelayedList+0x4c>)
  401196:	4798      	blx	r3
  401198:	bd10      	pop	{r4, pc}
  40119a:	bf00      	nop
  40119c:	2040c1fc 	.word	0x2040c1fc
  4011a0:	2040c2f4 	.word	0x2040c2f4
  4011a4:	2040c200 	.word	0x2040c200
  4011a8:	004004a5 	.word	0x004004a5
  4011ac:	2040c2ac 	.word	0x2040c2ac
  4011b0:	2040c204 	.word	0x2040c204

004011b4 <xTaskGenericCreate>:
  4011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011b8:	b083      	sub	sp, #12
  4011ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4011bc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4011c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  4011c2:	b160      	cbz	r0, 4011de <xTaskGenericCreate+0x2a>
  4011c4:	2d04      	cmp	r5, #4
  4011c6:	d915      	bls.n	4011f4 <xTaskGenericCreate+0x40>
  4011c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011cc:	b672      	cpsid	i
  4011ce:	f383 8811 	msr	BASEPRI, r3
  4011d2:	f3bf 8f6f 	isb	sy
  4011d6:	f3bf 8f4f 	dsb	sy
  4011da:	b662      	cpsie	i
  4011dc:	e7fe      	b.n	4011dc <xTaskGenericCreate+0x28>
  4011de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011e2:	b672      	cpsid	i
  4011e4:	f383 8811 	msr	BASEPRI, r3
  4011e8:	f3bf 8f6f 	isb	sy
  4011ec:	f3bf 8f4f 	dsb	sy
  4011f0:	b662      	cpsie	i
  4011f2:	e7fe      	b.n	4011f2 <xTaskGenericCreate+0x3e>
  4011f4:	9001      	str	r0, [sp, #4]
  4011f6:	4698      	mov	r8, r3
  4011f8:	4691      	mov	r9, r2
  4011fa:	460f      	mov	r7, r1
  4011fc:	b936      	cbnz	r6, 40120c <xTaskGenericCreate+0x58>
  4011fe:	0090      	lsls	r0, r2, #2
  401200:	4b62      	ldr	r3, [pc, #392]	; (40138c <xTaskGenericCreate+0x1d8>)
  401202:	4798      	blx	r3
  401204:	4606      	mov	r6, r0
  401206:	2800      	cmp	r0, #0
  401208:	f000 809e 	beq.w	401348 <xTaskGenericCreate+0x194>
  40120c:	2058      	movs	r0, #88	; 0x58
  40120e:	4b5f      	ldr	r3, [pc, #380]	; (40138c <xTaskGenericCreate+0x1d8>)
  401210:	4798      	blx	r3
  401212:	4604      	mov	r4, r0
  401214:	2800      	cmp	r0, #0
  401216:	f000 8094 	beq.w	401342 <xTaskGenericCreate+0x18e>
  40121a:	6306      	str	r6, [r0, #48]	; 0x30
  40121c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401220:	21a5      	movs	r1, #165	; 0xa5
  401222:	4630      	mov	r0, r6
  401224:	4b5a      	ldr	r3, [pc, #360]	; (401390 <xTaskGenericCreate+0x1dc>)
  401226:	4798      	blx	r3
  401228:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40122c:	444e      	add	r6, r9
  40122e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401230:	eb03 0386 	add.w	r3, r3, r6, lsl #2
  401234:	f023 0607 	bic.w	r6, r3, #7
  401238:	783b      	ldrb	r3, [r7, #0]
  40123a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40123e:	783b      	ldrb	r3, [r7, #0]
  401240:	2b00      	cmp	r3, #0
  401242:	f040 8084 	bne.w	40134e <xTaskGenericCreate+0x19a>
  401246:	2700      	movs	r7, #0
  401248:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  40124c:	62e5      	str	r5, [r4, #44]	; 0x2c
  40124e:	64a5      	str	r5, [r4, #72]	; 0x48
  401250:	64e7      	str	r7, [r4, #76]	; 0x4c
  401252:	f104 0904 	add.w	r9, r4, #4
  401256:	4648      	mov	r0, r9
  401258:	f8df b184 	ldr.w	fp, [pc, #388]	; 4013e0 <xTaskGenericCreate+0x22c>
  40125c:	47d8      	blx	fp
  40125e:	f104 0018 	add.w	r0, r4, #24
  401262:	47d8      	blx	fp
  401264:	6124      	str	r4, [r4, #16]
  401266:	f1c5 0305 	rsb	r3, r5, #5
  40126a:	61a3      	str	r3, [r4, #24]
  40126c:	6264      	str	r4, [r4, #36]	; 0x24
  40126e:	6527      	str	r7, [r4, #80]	; 0x50
  401270:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
  401274:	4642      	mov	r2, r8
  401276:	9901      	ldr	r1, [sp, #4]
  401278:	4630      	mov	r0, r6
  40127a:	4b46      	ldr	r3, [pc, #280]	; (401394 <xTaskGenericCreate+0x1e0>)
  40127c:	4798      	blx	r3
  40127e:	6020      	str	r0, [r4, #0]
  401280:	f1ba 0f00 	cmp.w	sl, #0
  401284:	d001      	beq.n	40128a <xTaskGenericCreate+0xd6>
  401286:	f8ca 4000 	str.w	r4, [sl]
  40128a:	4b43      	ldr	r3, [pc, #268]	; (401398 <xTaskGenericCreate+0x1e4>)
  40128c:	4798      	blx	r3
  40128e:	4a43      	ldr	r2, [pc, #268]	; (40139c <xTaskGenericCreate+0x1e8>)
  401290:	6813      	ldr	r3, [r2, #0]
  401292:	3301      	adds	r3, #1
  401294:	6013      	str	r3, [r2, #0]
  401296:	4b42      	ldr	r3, [pc, #264]	; (4013a0 <xTaskGenericCreate+0x1ec>)
  401298:	681b      	ldr	r3, [r3, #0]
  40129a:	2b00      	cmp	r3, #0
  40129c:	d166      	bne.n	40136c <xTaskGenericCreate+0x1b8>
  40129e:	4b40      	ldr	r3, [pc, #256]	; (4013a0 <xTaskGenericCreate+0x1ec>)
  4012a0:	601c      	str	r4, [r3, #0]
  4012a2:	6813      	ldr	r3, [r2, #0]
  4012a4:	2b01      	cmp	r3, #1
  4012a6:	d121      	bne.n	4012ec <xTaskGenericCreate+0x138>
  4012a8:	4f3e      	ldr	r7, [pc, #248]	; (4013a4 <xTaskGenericCreate+0x1f0>)
  4012aa:	4638      	mov	r0, r7
  4012ac:	4e3e      	ldr	r6, [pc, #248]	; (4013a8 <xTaskGenericCreate+0x1f4>)
  4012ae:	47b0      	blx	r6
  4012b0:	f107 0014 	add.w	r0, r7, #20
  4012b4:	47b0      	blx	r6
  4012b6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4012ba:	47b0      	blx	r6
  4012bc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4012c0:	47b0      	blx	r6
  4012c2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4012c6:	47b0      	blx	r6
  4012c8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4013e4 <xTaskGenericCreate+0x230>
  4012cc:	4640      	mov	r0, r8
  4012ce:	47b0      	blx	r6
  4012d0:	4f36      	ldr	r7, [pc, #216]	; (4013ac <xTaskGenericCreate+0x1f8>)
  4012d2:	4638      	mov	r0, r7
  4012d4:	47b0      	blx	r6
  4012d6:	4836      	ldr	r0, [pc, #216]	; (4013b0 <xTaskGenericCreate+0x1fc>)
  4012d8:	47b0      	blx	r6
  4012da:	4836      	ldr	r0, [pc, #216]	; (4013b4 <xTaskGenericCreate+0x200>)
  4012dc:	47b0      	blx	r6
  4012de:	4836      	ldr	r0, [pc, #216]	; (4013b8 <xTaskGenericCreate+0x204>)
  4012e0:	47b0      	blx	r6
  4012e2:	4b36      	ldr	r3, [pc, #216]	; (4013bc <xTaskGenericCreate+0x208>)
  4012e4:	f8c3 8000 	str.w	r8, [r3]
  4012e8:	4b35      	ldr	r3, [pc, #212]	; (4013c0 <xTaskGenericCreate+0x20c>)
  4012ea:	601f      	str	r7, [r3, #0]
  4012ec:	4a35      	ldr	r2, [pc, #212]	; (4013c4 <xTaskGenericCreate+0x210>)
  4012ee:	6813      	ldr	r3, [r2, #0]
  4012f0:	3301      	adds	r3, #1
  4012f2:	6013      	str	r3, [r2, #0]
  4012f4:	6423      	str	r3, [r4, #64]	; 0x40
  4012f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4012f8:	4a33      	ldr	r2, [pc, #204]	; (4013c8 <xTaskGenericCreate+0x214>)
  4012fa:	6811      	ldr	r1, [r2, #0]
  4012fc:	2301      	movs	r3, #1
  4012fe:	4083      	lsls	r3, r0
  401300:	430b      	orrs	r3, r1
  401302:	6013      	str	r3, [r2, #0]
  401304:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401308:	4649      	mov	r1, r9
  40130a:	4b26      	ldr	r3, [pc, #152]	; (4013a4 <xTaskGenericCreate+0x1f0>)
  40130c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401310:	4b2e      	ldr	r3, [pc, #184]	; (4013cc <xTaskGenericCreate+0x218>)
  401312:	4798      	blx	r3
  401314:	4b2e      	ldr	r3, [pc, #184]	; (4013d0 <xTaskGenericCreate+0x21c>)
  401316:	4798      	blx	r3
  401318:	4b2e      	ldr	r3, [pc, #184]	; (4013d4 <xTaskGenericCreate+0x220>)
  40131a:	681b      	ldr	r3, [r3, #0]
  40131c:	2b00      	cmp	r3, #0
  40131e:	d031      	beq.n	401384 <xTaskGenericCreate+0x1d0>
  401320:	4b1f      	ldr	r3, [pc, #124]	; (4013a0 <xTaskGenericCreate+0x1ec>)
  401322:	681b      	ldr	r3, [r3, #0]
  401324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401326:	429d      	cmp	r5, r3
  401328:	d92e      	bls.n	401388 <xTaskGenericCreate+0x1d4>
  40132a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40132e:	4b2a      	ldr	r3, [pc, #168]	; (4013d8 <xTaskGenericCreate+0x224>)
  401330:	601a      	str	r2, [r3, #0]
  401332:	f3bf 8f4f 	dsb	sy
  401336:	f3bf 8f6f 	isb	sy
  40133a:	2001      	movs	r0, #1
  40133c:	b003      	add	sp, #12
  40133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401342:	4630      	mov	r0, r6
  401344:	4b25      	ldr	r3, [pc, #148]	; (4013dc <xTaskGenericCreate+0x228>)
  401346:	4798      	blx	r3
  401348:	f04f 30ff 	mov.w	r0, #4294967295
  40134c:	e7f6      	b.n	40133c <xTaskGenericCreate+0x188>
  40134e:	463b      	mov	r3, r7
  401350:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401354:	3709      	adds	r7, #9
  401356:	7859      	ldrb	r1, [r3, #1]
  401358:	f802 1f01 	strb.w	r1, [r2, #1]!
  40135c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401360:	2900      	cmp	r1, #0
  401362:	f43f af70 	beq.w	401246 <xTaskGenericCreate+0x92>
  401366:	42bb      	cmp	r3, r7
  401368:	d1f5      	bne.n	401356 <xTaskGenericCreate+0x1a2>
  40136a:	e76c      	b.n	401246 <xTaskGenericCreate+0x92>
  40136c:	4b19      	ldr	r3, [pc, #100]	; (4013d4 <xTaskGenericCreate+0x220>)
  40136e:	681b      	ldr	r3, [r3, #0]
  401370:	2b00      	cmp	r3, #0
  401372:	d1bb      	bne.n	4012ec <xTaskGenericCreate+0x138>
  401374:	4b0a      	ldr	r3, [pc, #40]	; (4013a0 <xTaskGenericCreate+0x1ec>)
  401376:	681b      	ldr	r3, [r3, #0]
  401378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40137a:	429d      	cmp	r5, r3
  40137c:	d3b6      	bcc.n	4012ec <xTaskGenericCreate+0x138>
  40137e:	4b08      	ldr	r3, [pc, #32]	; (4013a0 <xTaskGenericCreate+0x1ec>)
  401380:	601c      	str	r4, [r3, #0]
  401382:	e7b3      	b.n	4012ec <xTaskGenericCreate+0x138>
  401384:	2001      	movs	r0, #1
  401386:	e7d9      	b.n	40133c <xTaskGenericCreate+0x188>
  401388:	2001      	movs	r0, #1
  40138a:	e7d7      	b.n	40133c <xTaskGenericCreate+0x188>
  40138c:	00400819 	.word	0x00400819
  401390:	00406215 	.word	0x00406215
  401394:	00400571 	.word	0x00400571
  401398:	004005bd 	.word	0x004005bd
  40139c:	2040c26c 	.word	0x2040c26c
  4013a0:	2040c1fc 	.word	0x2040c1fc
  4013a4:	2040c208 	.word	0x2040c208
  4013a8:	00400471 	.word	0x00400471
  4013ac:	2040c298 	.word	0x2040c298
  4013b0:	2040c2b4 	.word	0x2040c2b4
  4013b4:	2040c2e0 	.word	0x2040c2e0
  4013b8:	2040c2cc 	.word	0x2040c2cc
  4013bc:	2040c200 	.word	0x2040c200
  4013c0:	2040c204 	.word	0x2040c204
  4013c4:	2040c278 	.word	0x2040c278
  4013c8:	2040c280 	.word	0x2040c280
  4013cc:	0040048d 	.word	0x0040048d
  4013d0:	00400609 	.word	0x00400609
  4013d4:	2040c2c8 	.word	0x2040c2c8
  4013d8:	e000ed04 	.word	0xe000ed04
  4013dc:	00400889 	.word	0x00400889
  4013e0:	00400487 	.word	0x00400487
  4013e4:	2040c284 	.word	0x2040c284

004013e8 <vTaskStartScheduler>:
  4013e8:	b510      	push	{r4, lr}
  4013ea:	b084      	sub	sp, #16
  4013ec:	2300      	movs	r3, #0
  4013ee:	9303      	str	r3, [sp, #12]
  4013f0:	9302      	str	r3, [sp, #8]
  4013f2:	9301      	str	r3, [sp, #4]
  4013f4:	9300      	str	r3, [sp, #0]
  4013f6:	2282      	movs	r2, #130	; 0x82
  4013f8:	4916      	ldr	r1, [pc, #88]	; (401454 <vTaskStartScheduler+0x6c>)
  4013fa:	4817      	ldr	r0, [pc, #92]	; (401458 <vTaskStartScheduler+0x70>)
  4013fc:	4c17      	ldr	r4, [pc, #92]	; (40145c <vTaskStartScheduler+0x74>)
  4013fe:	47a0      	blx	r4
  401400:	2801      	cmp	r0, #1
  401402:	d00b      	beq.n	40141c <vTaskStartScheduler+0x34>
  401404:	bb20      	cbnz	r0, 401450 <vTaskStartScheduler+0x68>
  401406:	f04f 0380 	mov.w	r3, #128	; 0x80
  40140a:	b672      	cpsid	i
  40140c:	f383 8811 	msr	BASEPRI, r3
  401410:	f3bf 8f6f 	isb	sy
  401414:	f3bf 8f4f 	dsb	sy
  401418:	b662      	cpsie	i
  40141a:	e7fe      	b.n	40141a <vTaskStartScheduler+0x32>
  40141c:	4b10      	ldr	r3, [pc, #64]	; (401460 <vTaskStartScheduler+0x78>)
  40141e:	4798      	blx	r3
  401420:	2801      	cmp	r0, #1
  401422:	d1ef      	bne.n	401404 <vTaskStartScheduler+0x1c>
  401424:	f04f 0380 	mov.w	r3, #128	; 0x80
  401428:	b672      	cpsid	i
  40142a:	f383 8811 	msr	BASEPRI, r3
  40142e:	f3bf 8f6f 	isb	sy
  401432:	f3bf 8f4f 	dsb	sy
  401436:	b662      	cpsie	i
  401438:	f04f 32ff 	mov.w	r2, #4294967295
  40143c:	4b09      	ldr	r3, [pc, #36]	; (401464 <vTaskStartScheduler+0x7c>)
  40143e:	601a      	str	r2, [r3, #0]
  401440:	2201      	movs	r2, #1
  401442:	4b09      	ldr	r3, [pc, #36]	; (401468 <vTaskStartScheduler+0x80>)
  401444:	601a      	str	r2, [r3, #0]
  401446:	2200      	movs	r2, #0
  401448:	4b08      	ldr	r3, [pc, #32]	; (40146c <vTaskStartScheduler+0x84>)
  40144a:	601a      	str	r2, [r3, #0]
  40144c:	4b08      	ldr	r3, [pc, #32]	; (401470 <vTaskStartScheduler+0x88>)
  40144e:	4798      	blx	r3
  401450:	b004      	add	sp, #16
  401452:	bd10      	pop	{r4, pc}
  401454:	0040cabc 	.word	0x0040cabc
  401458:	0040178d 	.word	0x0040178d
  40145c:	004011b5 	.word	0x004011b5
  401460:	00401dcd 	.word	0x00401dcd
  401464:	2040c2ac 	.word	0x2040c2ac
  401468:	2040c2c8 	.word	0x2040c2c8
  40146c:	2040c2f4 	.word	0x2040c2f4
  401470:	004006f1 	.word	0x004006f1

00401474 <vTaskSuspendAll>:
  401474:	4a02      	ldr	r2, [pc, #8]	; (401480 <vTaskSuspendAll+0xc>)
  401476:	6813      	ldr	r3, [r2, #0]
  401478:	3301      	adds	r3, #1
  40147a:	6013      	str	r3, [r2, #0]
  40147c:	4770      	bx	lr
  40147e:	bf00      	nop
  401480:	2040c274 	.word	0x2040c274

00401484 <xTaskGetTickCount>:
  401484:	4b01      	ldr	r3, [pc, #4]	; (40148c <xTaskGetTickCount+0x8>)
  401486:	6818      	ldr	r0, [r3, #0]
  401488:	4770      	bx	lr
  40148a:	bf00      	nop
  40148c:	2040c2f4 	.word	0x2040c2f4

00401490 <xTaskIncrementTick>:
  401490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401494:	4b42      	ldr	r3, [pc, #264]	; (4015a0 <xTaskIncrementTick+0x110>)
  401496:	681b      	ldr	r3, [r3, #0]
  401498:	2b00      	cmp	r3, #0
  40149a:	d178      	bne.n	40158e <xTaskIncrementTick+0xfe>
  40149c:	4b41      	ldr	r3, [pc, #260]	; (4015a4 <xTaskIncrementTick+0x114>)
  40149e:	681a      	ldr	r2, [r3, #0]
  4014a0:	3201      	adds	r2, #1
  4014a2:	601a      	str	r2, [r3, #0]
  4014a4:	681e      	ldr	r6, [r3, #0]
  4014a6:	b9d6      	cbnz	r6, 4014de <xTaskIncrementTick+0x4e>
  4014a8:	4b3f      	ldr	r3, [pc, #252]	; (4015a8 <xTaskIncrementTick+0x118>)
  4014aa:	681b      	ldr	r3, [r3, #0]
  4014ac:	681b      	ldr	r3, [r3, #0]
  4014ae:	b153      	cbz	r3, 4014c6 <xTaskIncrementTick+0x36>
  4014b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014b4:	b672      	cpsid	i
  4014b6:	f383 8811 	msr	BASEPRI, r3
  4014ba:	f3bf 8f6f 	isb	sy
  4014be:	f3bf 8f4f 	dsb	sy
  4014c2:	b662      	cpsie	i
  4014c4:	e7fe      	b.n	4014c4 <xTaskIncrementTick+0x34>
  4014c6:	4a38      	ldr	r2, [pc, #224]	; (4015a8 <xTaskIncrementTick+0x118>)
  4014c8:	6811      	ldr	r1, [r2, #0]
  4014ca:	4b38      	ldr	r3, [pc, #224]	; (4015ac <xTaskIncrementTick+0x11c>)
  4014cc:	6818      	ldr	r0, [r3, #0]
  4014ce:	6010      	str	r0, [r2, #0]
  4014d0:	6019      	str	r1, [r3, #0]
  4014d2:	4a37      	ldr	r2, [pc, #220]	; (4015b0 <xTaskIncrementTick+0x120>)
  4014d4:	6813      	ldr	r3, [r2, #0]
  4014d6:	3301      	adds	r3, #1
  4014d8:	6013      	str	r3, [r2, #0]
  4014da:	4b36      	ldr	r3, [pc, #216]	; (4015b4 <xTaskIncrementTick+0x124>)
  4014dc:	4798      	blx	r3
  4014de:	4b36      	ldr	r3, [pc, #216]	; (4015b8 <xTaskIncrementTick+0x128>)
  4014e0:	681b      	ldr	r3, [r3, #0]
  4014e2:	429e      	cmp	r6, r3
  4014e4:	d218      	bcs.n	401518 <xTaskIncrementTick+0x88>
  4014e6:	2400      	movs	r4, #0
  4014e8:	4b34      	ldr	r3, [pc, #208]	; (4015bc <xTaskIncrementTick+0x12c>)
  4014ea:	681b      	ldr	r3, [r3, #0]
  4014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4014ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4014f2:	4a33      	ldr	r2, [pc, #204]	; (4015c0 <xTaskIncrementTick+0x130>)
  4014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4014f8:	2b02      	cmp	r3, #2
  4014fa:	bf28      	it	cs
  4014fc:	2401      	movcs	r4, #1
  4014fe:	4b31      	ldr	r3, [pc, #196]	; (4015c4 <xTaskIncrementTick+0x134>)
  401500:	681b      	ldr	r3, [r3, #0]
  401502:	b90b      	cbnz	r3, 401508 <xTaskIncrementTick+0x78>
  401504:	4b30      	ldr	r3, [pc, #192]	; (4015c8 <xTaskIncrementTick+0x138>)
  401506:	4798      	blx	r3
  401508:	4b30      	ldr	r3, [pc, #192]	; (4015cc <xTaskIncrementTick+0x13c>)
  40150a:	681b      	ldr	r3, [r3, #0]
  40150c:	2b00      	cmp	r3, #0
  40150e:	bf0c      	ite	eq
  401510:	4620      	moveq	r0, r4
  401512:	2001      	movne	r0, #1
  401514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401518:	2400      	movs	r4, #0
  40151a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4015a8 <xTaskIncrementTick+0x118>
  40151e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4015d8 <xTaskIncrementTick+0x148>
  401522:	4f2b      	ldr	r7, [pc, #172]	; (4015d0 <xTaskIncrementTick+0x140>)
  401524:	e01f      	b.n	401566 <xTaskIncrementTick+0xd6>
  401526:	f04f 32ff 	mov.w	r2, #4294967295
  40152a:	4b23      	ldr	r3, [pc, #140]	; (4015b8 <xTaskIncrementTick+0x128>)
  40152c:	601a      	str	r2, [r3, #0]
  40152e:	e7db      	b.n	4014e8 <xTaskIncrementTick+0x58>
  401530:	4a21      	ldr	r2, [pc, #132]	; (4015b8 <xTaskIncrementTick+0x128>)
  401532:	6013      	str	r3, [r2, #0]
  401534:	e7d8      	b.n	4014e8 <xTaskIncrementTick+0x58>
  401536:	f105 0018 	add.w	r0, r5, #24
  40153a:	47c0      	blx	r8
  40153c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40153e:	683a      	ldr	r2, [r7, #0]
  401540:	2301      	movs	r3, #1
  401542:	4083      	lsls	r3, r0
  401544:	4313      	orrs	r3, r2
  401546:	603b      	str	r3, [r7, #0]
  401548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40154c:	4651      	mov	r1, sl
  40154e:	4b1c      	ldr	r3, [pc, #112]	; (4015c0 <xTaskIncrementTick+0x130>)
  401550:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401554:	4b1f      	ldr	r3, [pc, #124]	; (4015d4 <xTaskIncrementTick+0x144>)
  401556:	4798      	blx	r3
  401558:	4b18      	ldr	r3, [pc, #96]	; (4015bc <xTaskIncrementTick+0x12c>)
  40155a:	681b      	ldr	r3, [r3, #0]
  40155c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401560:	429a      	cmp	r2, r3
  401562:	bf28      	it	cs
  401564:	2401      	movcs	r4, #1
  401566:	f8d9 3000 	ldr.w	r3, [r9]
  40156a:	681b      	ldr	r3, [r3, #0]
  40156c:	2b00      	cmp	r3, #0
  40156e:	d0da      	beq.n	401526 <xTaskIncrementTick+0x96>
  401570:	f8d9 3000 	ldr.w	r3, [r9]
  401574:	68db      	ldr	r3, [r3, #12]
  401576:	68dd      	ldr	r5, [r3, #12]
  401578:	686b      	ldr	r3, [r5, #4]
  40157a:	429e      	cmp	r6, r3
  40157c:	d3d8      	bcc.n	401530 <xTaskIncrementTick+0xa0>
  40157e:	f105 0a04 	add.w	sl, r5, #4
  401582:	4650      	mov	r0, sl
  401584:	47c0      	blx	r8
  401586:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401588:	2b00      	cmp	r3, #0
  40158a:	d1d4      	bne.n	401536 <xTaskIncrementTick+0xa6>
  40158c:	e7d6      	b.n	40153c <xTaskIncrementTick+0xac>
  40158e:	4a0d      	ldr	r2, [pc, #52]	; (4015c4 <xTaskIncrementTick+0x134>)
  401590:	6813      	ldr	r3, [r2, #0]
  401592:	3301      	adds	r3, #1
  401594:	6013      	str	r3, [r2, #0]
  401596:	4b0c      	ldr	r3, [pc, #48]	; (4015c8 <xTaskIncrementTick+0x138>)
  401598:	4798      	blx	r3
  40159a:	2400      	movs	r4, #0
  40159c:	e7b4      	b.n	401508 <xTaskIncrementTick+0x78>
  40159e:	bf00      	nop
  4015a0:	2040c274 	.word	0x2040c274
  4015a4:	2040c2f4 	.word	0x2040c2f4
  4015a8:	2040c200 	.word	0x2040c200
  4015ac:	2040c204 	.word	0x2040c204
  4015b0:	2040c2b0 	.word	0x2040c2b0
  4015b4:	00401131 	.word	0x00401131
  4015b8:	2040c2ac 	.word	0x2040c2ac
  4015bc:	2040c1fc 	.word	0x2040c1fc
  4015c0:	2040c208 	.word	0x2040c208
  4015c4:	2040c270 	.word	0x2040c270
  4015c8:	00405f91 	.word	0x00405f91
  4015cc:	2040c2f8 	.word	0x2040c2f8
  4015d0:	2040c280 	.word	0x2040c280
  4015d4:	0040048d 	.word	0x0040048d
  4015d8:	004004d9 	.word	0x004004d9

004015dc <xTaskResumeAll>:
  4015dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4015e0:	4b38      	ldr	r3, [pc, #224]	; (4016c4 <xTaskResumeAll+0xe8>)
  4015e2:	681b      	ldr	r3, [r3, #0]
  4015e4:	b953      	cbnz	r3, 4015fc <xTaskResumeAll+0x20>
  4015e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015ea:	b672      	cpsid	i
  4015ec:	f383 8811 	msr	BASEPRI, r3
  4015f0:	f3bf 8f6f 	isb	sy
  4015f4:	f3bf 8f4f 	dsb	sy
  4015f8:	b662      	cpsie	i
  4015fa:	e7fe      	b.n	4015fa <xTaskResumeAll+0x1e>
  4015fc:	4b32      	ldr	r3, [pc, #200]	; (4016c8 <xTaskResumeAll+0xec>)
  4015fe:	4798      	blx	r3
  401600:	4b30      	ldr	r3, [pc, #192]	; (4016c4 <xTaskResumeAll+0xe8>)
  401602:	681a      	ldr	r2, [r3, #0]
  401604:	3a01      	subs	r2, #1
  401606:	601a      	str	r2, [r3, #0]
  401608:	681b      	ldr	r3, [r3, #0]
  40160a:	2b00      	cmp	r3, #0
  40160c:	d155      	bne.n	4016ba <xTaskResumeAll+0xde>
  40160e:	4b2f      	ldr	r3, [pc, #188]	; (4016cc <xTaskResumeAll+0xf0>)
  401610:	681b      	ldr	r3, [r3, #0]
  401612:	2b00      	cmp	r3, #0
  401614:	d132      	bne.n	40167c <xTaskResumeAll+0xa0>
  401616:	2400      	movs	r4, #0
  401618:	4b2d      	ldr	r3, [pc, #180]	; (4016d0 <xTaskResumeAll+0xf4>)
  40161a:	4798      	blx	r3
  40161c:	4620      	mov	r0, r4
  40161e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401622:	68fb      	ldr	r3, [r7, #12]
  401624:	68dc      	ldr	r4, [r3, #12]
  401626:	f104 0018 	add.w	r0, r4, #24
  40162a:	47b0      	blx	r6
  40162c:	f104 0804 	add.w	r8, r4, #4
  401630:	4640      	mov	r0, r8
  401632:	47b0      	blx	r6
  401634:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401636:	682a      	ldr	r2, [r5, #0]
  401638:	2301      	movs	r3, #1
  40163a:	4083      	lsls	r3, r0
  40163c:	4313      	orrs	r3, r2
  40163e:	602b      	str	r3, [r5, #0]
  401640:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401644:	4641      	mov	r1, r8
  401646:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40164a:	4b22      	ldr	r3, [pc, #136]	; (4016d4 <xTaskResumeAll+0xf8>)
  40164c:	4798      	blx	r3
  40164e:	4b22      	ldr	r3, [pc, #136]	; (4016d8 <xTaskResumeAll+0xfc>)
  401650:	681b      	ldr	r3, [r3, #0]
  401652:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401656:	429a      	cmp	r2, r3
  401658:	d20c      	bcs.n	401674 <xTaskResumeAll+0x98>
  40165a:	683b      	ldr	r3, [r7, #0]
  40165c:	2b00      	cmp	r3, #0
  40165e:	d1e0      	bne.n	401622 <xTaskResumeAll+0x46>
  401660:	4b1e      	ldr	r3, [pc, #120]	; (4016dc <xTaskResumeAll+0x100>)
  401662:	681b      	ldr	r3, [r3, #0]
  401664:	b1db      	cbz	r3, 40169e <xTaskResumeAll+0xc2>
  401666:	4b1d      	ldr	r3, [pc, #116]	; (4016dc <xTaskResumeAll+0x100>)
  401668:	681b      	ldr	r3, [r3, #0]
  40166a:	b1c3      	cbz	r3, 40169e <xTaskResumeAll+0xc2>
  40166c:	4e1c      	ldr	r6, [pc, #112]	; (4016e0 <xTaskResumeAll+0x104>)
  40166e:	4d1d      	ldr	r5, [pc, #116]	; (4016e4 <xTaskResumeAll+0x108>)
  401670:	4c1a      	ldr	r4, [pc, #104]	; (4016dc <xTaskResumeAll+0x100>)
  401672:	e00e      	b.n	401692 <xTaskResumeAll+0xb6>
  401674:	2201      	movs	r2, #1
  401676:	4b1b      	ldr	r3, [pc, #108]	; (4016e4 <xTaskResumeAll+0x108>)
  401678:	601a      	str	r2, [r3, #0]
  40167a:	e7ee      	b.n	40165a <xTaskResumeAll+0x7e>
  40167c:	4f1a      	ldr	r7, [pc, #104]	; (4016e8 <xTaskResumeAll+0x10c>)
  40167e:	4e1b      	ldr	r6, [pc, #108]	; (4016ec <xTaskResumeAll+0x110>)
  401680:	4d1b      	ldr	r5, [pc, #108]	; (4016f0 <xTaskResumeAll+0x114>)
  401682:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4016f8 <xTaskResumeAll+0x11c>
  401686:	e7e8      	b.n	40165a <xTaskResumeAll+0x7e>
  401688:	6823      	ldr	r3, [r4, #0]
  40168a:	3b01      	subs	r3, #1
  40168c:	6023      	str	r3, [r4, #0]
  40168e:	6823      	ldr	r3, [r4, #0]
  401690:	b12b      	cbz	r3, 40169e <xTaskResumeAll+0xc2>
  401692:	47b0      	blx	r6
  401694:	2800      	cmp	r0, #0
  401696:	d0f7      	beq.n	401688 <xTaskResumeAll+0xac>
  401698:	2301      	movs	r3, #1
  40169a:	602b      	str	r3, [r5, #0]
  40169c:	e7f4      	b.n	401688 <xTaskResumeAll+0xac>
  40169e:	4b11      	ldr	r3, [pc, #68]	; (4016e4 <xTaskResumeAll+0x108>)
  4016a0:	681b      	ldr	r3, [r3, #0]
  4016a2:	2b01      	cmp	r3, #1
  4016a4:	d10b      	bne.n	4016be <xTaskResumeAll+0xe2>
  4016a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016aa:	4b12      	ldr	r3, [pc, #72]	; (4016f4 <xTaskResumeAll+0x118>)
  4016ac:	601a      	str	r2, [r3, #0]
  4016ae:	f3bf 8f4f 	dsb	sy
  4016b2:	f3bf 8f6f 	isb	sy
  4016b6:	2401      	movs	r4, #1
  4016b8:	e7ae      	b.n	401618 <xTaskResumeAll+0x3c>
  4016ba:	2400      	movs	r4, #0
  4016bc:	e7ac      	b.n	401618 <xTaskResumeAll+0x3c>
  4016be:	2400      	movs	r4, #0
  4016c0:	e7aa      	b.n	401618 <xTaskResumeAll+0x3c>
  4016c2:	bf00      	nop
  4016c4:	2040c274 	.word	0x2040c274
  4016c8:	004005bd 	.word	0x004005bd
  4016cc:	2040c26c 	.word	0x2040c26c
  4016d0:	00400609 	.word	0x00400609
  4016d4:	0040048d 	.word	0x0040048d
  4016d8:	2040c1fc 	.word	0x2040c1fc
  4016dc:	2040c270 	.word	0x2040c270
  4016e0:	00401491 	.word	0x00401491
  4016e4:	2040c2f8 	.word	0x2040c2f8
  4016e8:	2040c2b4 	.word	0x2040c2b4
  4016ec:	004004d9 	.word	0x004004d9
  4016f0:	2040c280 	.word	0x2040c280
  4016f4:	e000ed04 	.word	0xe000ed04
  4016f8:	2040c208 	.word	0x2040c208

004016fc <vTaskDelay>:
  4016fc:	b510      	push	{r4, lr}
  4016fe:	2800      	cmp	r0, #0
  401700:	d029      	beq.n	401756 <vTaskDelay+0x5a>
  401702:	4604      	mov	r4, r0
  401704:	4b18      	ldr	r3, [pc, #96]	; (401768 <vTaskDelay+0x6c>)
  401706:	681b      	ldr	r3, [r3, #0]
  401708:	b153      	cbz	r3, 401720 <vTaskDelay+0x24>
  40170a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40170e:	b672      	cpsid	i
  401710:	f383 8811 	msr	BASEPRI, r3
  401714:	f3bf 8f6f 	isb	sy
  401718:	f3bf 8f4f 	dsb	sy
  40171c:	b662      	cpsie	i
  40171e:	e7fe      	b.n	40171e <vTaskDelay+0x22>
  401720:	4b12      	ldr	r3, [pc, #72]	; (40176c <vTaskDelay+0x70>)
  401722:	4798      	blx	r3
  401724:	4b12      	ldr	r3, [pc, #72]	; (401770 <vTaskDelay+0x74>)
  401726:	681b      	ldr	r3, [r3, #0]
  401728:	441c      	add	r4, r3
  40172a:	4b12      	ldr	r3, [pc, #72]	; (401774 <vTaskDelay+0x78>)
  40172c:	6818      	ldr	r0, [r3, #0]
  40172e:	3004      	adds	r0, #4
  401730:	4b11      	ldr	r3, [pc, #68]	; (401778 <vTaskDelay+0x7c>)
  401732:	4798      	blx	r3
  401734:	b948      	cbnz	r0, 40174a <vTaskDelay+0x4e>
  401736:	4b0f      	ldr	r3, [pc, #60]	; (401774 <vTaskDelay+0x78>)
  401738:	681a      	ldr	r2, [r3, #0]
  40173a:	4910      	ldr	r1, [pc, #64]	; (40177c <vTaskDelay+0x80>)
  40173c:	680b      	ldr	r3, [r1, #0]
  40173e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401740:	2201      	movs	r2, #1
  401742:	4082      	lsls	r2, r0
  401744:	ea23 0302 	bic.w	r3, r3, r2
  401748:	600b      	str	r3, [r1, #0]
  40174a:	4620      	mov	r0, r4
  40174c:	4b0c      	ldr	r3, [pc, #48]	; (401780 <vTaskDelay+0x84>)
  40174e:	4798      	blx	r3
  401750:	4b0c      	ldr	r3, [pc, #48]	; (401784 <vTaskDelay+0x88>)
  401752:	4798      	blx	r3
  401754:	b938      	cbnz	r0, 401766 <vTaskDelay+0x6a>
  401756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40175a:	4b0b      	ldr	r3, [pc, #44]	; (401788 <vTaskDelay+0x8c>)
  40175c:	601a      	str	r2, [r3, #0]
  40175e:	f3bf 8f4f 	dsb	sy
  401762:	f3bf 8f6f 	isb	sy
  401766:	bd10      	pop	{r4, pc}
  401768:	2040c274 	.word	0x2040c274
  40176c:	00401475 	.word	0x00401475
  401770:	2040c2f4 	.word	0x2040c2f4
  401774:	2040c1fc 	.word	0x2040c1fc
  401778:	004004d9 	.word	0x004004d9
  40177c:	2040c280 	.word	0x2040c280
  401780:	0040115d 	.word	0x0040115d
  401784:	004015dd 	.word	0x004015dd
  401788:	e000ed04 	.word	0xe000ed04

0040178c <prvIdleTask>:
  40178c:	b580      	push	{r7, lr}
  40178e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401818 <prvIdleTask+0x8c>
  401792:	4e19      	ldr	r6, [pc, #100]	; (4017f8 <prvIdleTask+0x6c>)
  401794:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40181c <prvIdleTask+0x90>
  401798:	e02a      	b.n	4017f0 <prvIdleTask+0x64>
  40179a:	4b18      	ldr	r3, [pc, #96]	; (4017fc <prvIdleTask+0x70>)
  40179c:	681b      	ldr	r3, [r3, #0]
  40179e:	2b01      	cmp	r3, #1
  4017a0:	d81e      	bhi.n	4017e0 <prvIdleTask+0x54>
  4017a2:	682b      	ldr	r3, [r5, #0]
  4017a4:	2b00      	cmp	r3, #0
  4017a6:	d0f8      	beq.n	40179a <prvIdleTask+0xe>
  4017a8:	47c0      	blx	r8
  4017aa:	6834      	ldr	r4, [r6, #0]
  4017ac:	47b8      	blx	r7
  4017ae:	2c00      	cmp	r4, #0
  4017b0:	d0f7      	beq.n	4017a2 <prvIdleTask+0x16>
  4017b2:	4b13      	ldr	r3, [pc, #76]	; (401800 <prvIdleTask+0x74>)
  4017b4:	4798      	blx	r3
  4017b6:	68f3      	ldr	r3, [r6, #12]
  4017b8:	68dc      	ldr	r4, [r3, #12]
  4017ba:	1d20      	adds	r0, r4, #4
  4017bc:	4b11      	ldr	r3, [pc, #68]	; (401804 <prvIdleTask+0x78>)
  4017be:	4798      	blx	r3
  4017c0:	4a11      	ldr	r2, [pc, #68]	; (401808 <prvIdleTask+0x7c>)
  4017c2:	6813      	ldr	r3, [r2, #0]
  4017c4:	3b01      	subs	r3, #1
  4017c6:	6013      	str	r3, [r2, #0]
  4017c8:	682b      	ldr	r3, [r5, #0]
  4017ca:	3b01      	subs	r3, #1
  4017cc:	602b      	str	r3, [r5, #0]
  4017ce:	4b0f      	ldr	r3, [pc, #60]	; (40180c <prvIdleTask+0x80>)
  4017d0:	4798      	blx	r3
  4017d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4017d4:	f8df a048 	ldr.w	sl, [pc, #72]	; 401820 <prvIdleTask+0x94>
  4017d8:	47d0      	blx	sl
  4017da:	4620      	mov	r0, r4
  4017dc:	47d0      	blx	sl
  4017de:	e7e0      	b.n	4017a2 <prvIdleTask+0x16>
  4017e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4017e4:	f8c9 3000 	str.w	r3, [r9]
  4017e8:	f3bf 8f4f 	dsb	sy
  4017ec:	f3bf 8f6f 	isb	sy
  4017f0:	4d07      	ldr	r5, [pc, #28]	; (401810 <prvIdleTask+0x84>)
  4017f2:	4f08      	ldr	r7, [pc, #32]	; (401814 <prvIdleTask+0x88>)
  4017f4:	e7d5      	b.n	4017a2 <prvIdleTask+0x16>
  4017f6:	bf00      	nop
  4017f8:	2040c2e0 	.word	0x2040c2e0
  4017fc:	2040c208 	.word	0x2040c208
  401800:	004005bd 	.word	0x004005bd
  401804:	004004d9 	.word	0x004004d9
  401808:	2040c26c 	.word	0x2040c26c
  40180c:	00400609 	.word	0x00400609
  401810:	2040c27c 	.word	0x2040c27c
  401814:	004015dd 	.word	0x004015dd
  401818:	00401475 	.word	0x00401475
  40181c:	e000ed04 	.word	0xe000ed04
  401820:	00400889 	.word	0x00400889

00401824 <vTaskSwitchContext>:
  401824:	4b2d      	ldr	r3, [pc, #180]	; (4018dc <vTaskSwitchContext+0xb8>)
  401826:	681b      	ldr	r3, [r3, #0]
  401828:	2b00      	cmp	r3, #0
  40182a:	d12c      	bne.n	401886 <vTaskSwitchContext+0x62>
  40182c:	b510      	push	{r4, lr}
  40182e:	2200      	movs	r2, #0
  401830:	4b2b      	ldr	r3, [pc, #172]	; (4018e0 <vTaskSwitchContext+0xbc>)
  401832:	601a      	str	r2, [r3, #0]
  401834:	4b2b      	ldr	r3, [pc, #172]	; (4018e4 <vTaskSwitchContext+0xc0>)
  401836:	681b      	ldr	r3, [r3, #0]
  401838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40183a:	681a      	ldr	r2, [r3, #0]
  40183c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401840:	d103      	bne.n	40184a <vTaskSwitchContext+0x26>
  401842:	685a      	ldr	r2, [r3, #4]
  401844:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401848:	d021      	beq.n	40188e <vTaskSwitchContext+0x6a>
  40184a:	4b26      	ldr	r3, [pc, #152]	; (4018e4 <vTaskSwitchContext+0xc0>)
  40184c:	6818      	ldr	r0, [r3, #0]
  40184e:	6819      	ldr	r1, [r3, #0]
  401850:	3134      	adds	r1, #52	; 0x34
  401852:	4b25      	ldr	r3, [pc, #148]	; (4018e8 <vTaskSwitchContext+0xc4>)
  401854:	4798      	blx	r3
  401856:	4b25      	ldr	r3, [pc, #148]	; (4018ec <vTaskSwitchContext+0xc8>)
  401858:	681b      	ldr	r3, [r3, #0]
  40185a:	fab3 f383 	clz	r3, r3
  40185e:	b2db      	uxtb	r3, r3
  401860:	f1c3 031f 	rsb	r3, r3, #31
  401864:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401868:	4a21      	ldr	r2, [pc, #132]	; (4018f0 <vTaskSwitchContext+0xcc>)
  40186a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40186e:	b9ba      	cbnz	r2, 4018a0 <vTaskSwitchContext+0x7c>
  401870:	f04f 0380 	mov.w	r3, #128	; 0x80
  401874:	b672      	cpsid	i
  401876:	f383 8811 	msr	BASEPRI, r3
  40187a:	f3bf 8f6f 	isb	sy
  40187e:	f3bf 8f4f 	dsb	sy
  401882:	b662      	cpsie	i
  401884:	e7fe      	b.n	401884 <vTaskSwitchContext+0x60>
  401886:	2201      	movs	r2, #1
  401888:	4b15      	ldr	r3, [pc, #84]	; (4018e0 <vTaskSwitchContext+0xbc>)
  40188a:	601a      	str	r2, [r3, #0]
  40188c:	4770      	bx	lr
  40188e:	689a      	ldr	r2, [r3, #8]
  401890:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401894:	d1d9      	bne.n	40184a <vTaskSwitchContext+0x26>
  401896:	68db      	ldr	r3, [r3, #12]
  401898:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40189c:	d1d5      	bne.n	40184a <vTaskSwitchContext+0x26>
  40189e:	e7da      	b.n	401856 <vTaskSwitchContext+0x32>
  4018a0:	4a13      	ldr	r2, [pc, #76]	; (4018f0 <vTaskSwitchContext+0xcc>)
  4018a2:	0099      	lsls	r1, r3, #2
  4018a4:	18c8      	adds	r0, r1, r3
  4018a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4018aa:	6844      	ldr	r4, [r0, #4]
  4018ac:	6864      	ldr	r4, [r4, #4]
  4018ae:	6044      	str	r4, [r0, #4]
  4018b0:	4419      	add	r1, r3
  4018b2:	4602      	mov	r2, r0
  4018b4:	3208      	adds	r2, #8
  4018b6:	4294      	cmp	r4, r2
  4018b8:	d009      	beq.n	4018ce <vTaskSwitchContext+0xaa>
  4018ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4018be:	4a0c      	ldr	r2, [pc, #48]	; (4018f0 <vTaskSwitchContext+0xcc>)
  4018c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018c4:	685b      	ldr	r3, [r3, #4]
  4018c6:	68da      	ldr	r2, [r3, #12]
  4018c8:	4b06      	ldr	r3, [pc, #24]	; (4018e4 <vTaskSwitchContext+0xc0>)
  4018ca:	601a      	str	r2, [r3, #0]
  4018cc:	bd10      	pop	{r4, pc}
  4018ce:	6860      	ldr	r0, [r4, #4]
  4018d0:	4a07      	ldr	r2, [pc, #28]	; (4018f0 <vTaskSwitchContext+0xcc>)
  4018d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4018d6:	6050      	str	r0, [r2, #4]
  4018d8:	e7ef      	b.n	4018ba <vTaskSwitchContext+0x96>
  4018da:	bf00      	nop
  4018dc:	2040c274 	.word	0x2040c274
  4018e0:	2040c2f8 	.word	0x2040c2f8
  4018e4:	2040c1fc 	.word	0x2040c1fc
  4018e8:	00405f79 	.word	0x00405f79
  4018ec:	2040c280 	.word	0x2040c280
  4018f0:	2040c208 	.word	0x2040c208

004018f4 <vTaskPlaceOnEventList>:
  4018f4:	b538      	push	{r3, r4, r5, lr}
  4018f6:	b1e0      	cbz	r0, 401932 <vTaskPlaceOnEventList+0x3e>
  4018f8:	460c      	mov	r4, r1
  4018fa:	4d17      	ldr	r5, [pc, #92]	; (401958 <vTaskPlaceOnEventList+0x64>)
  4018fc:	6829      	ldr	r1, [r5, #0]
  4018fe:	3118      	adds	r1, #24
  401900:	4b16      	ldr	r3, [pc, #88]	; (40195c <vTaskPlaceOnEventList+0x68>)
  401902:	4798      	blx	r3
  401904:	6828      	ldr	r0, [r5, #0]
  401906:	3004      	adds	r0, #4
  401908:	4b15      	ldr	r3, [pc, #84]	; (401960 <vTaskPlaceOnEventList+0x6c>)
  40190a:	4798      	blx	r3
  40190c:	b940      	cbnz	r0, 401920 <vTaskPlaceOnEventList+0x2c>
  40190e:	682a      	ldr	r2, [r5, #0]
  401910:	4914      	ldr	r1, [pc, #80]	; (401964 <vTaskPlaceOnEventList+0x70>)
  401912:	680b      	ldr	r3, [r1, #0]
  401914:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401916:	2201      	movs	r2, #1
  401918:	4082      	lsls	r2, r0
  40191a:	ea23 0302 	bic.w	r3, r3, r2
  40191e:	600b      	str	r3, [r1, #0]
  401920:	f1b4 3fff 	cmp.w	r4, #4294967295
  401924:	d010      	beq.n	401948 <vTaskPlaceOnEventList+0x54>
  401926:	4b10      	ldr	r3, [pc, #64]	; (401968 <vTaskPlaceOnEventList+0x74>)
  401928:	6818      	ldr	r0, [r3, #0]
  40192a:	4420      	add	r0, r4
  40192c:	4b0f      	ldr	r3, [pc, #60]	; (40196c <vTaskPlaceOnEventList+0x78>)
  40192e:	4798      	blx	r3
  401930:	bd38      	pop	{r3, r4, r5, pc}
  401932:	f04f 0380 	mov.w	r3, #128	; 0x80
  401936:	b672      	cpsid	i
  401938:	f383 8811 	msr	BASEPRI, r3
  40193c:	f3bf 8f6f 	isb	sy
  401940:	f3bf 8f4f 	dsb	sy
  401944:	b662      	cpsie	i
  401946:	e7fe      	b.n	401946 <vTaskPlaceOnEventList+0x52>
  401948:	4b03      	ldr	r3, [pc, #12]	; (401958 <vTaskPlaceOnEventList+0x64>)
  40194a:	6819      	ldr	r1, [r3, #0]
  40194c:	3104      	adds	r1, #4
  40194e:	4808      	ldr	r0, [pc, #32]	; (401970 <vTaskPlaceOnEventList+0x7c>)
  401950:	4b08      	ldr	r3, [pc, #32]	; (401974 <vTaskPlaceOnEventList+0x80>)
  401952:	4798      	blx	r3
  401954:	bd38      	pop	{r3, r4, r5, pc}
  401956:	bf00      	nop
  401958:	2040c1fc 	.word	0x2040c1fc
  40195c:	004004a5 	.word	0x004004a5
  401960:	004004d9 	.word	0x004004d9
  401964:	2040c280 	.word	0x2040c280
  401968:	2040c2f4 	.word	0x2040c2f4
  40196c:	0040115d 	.word	0x0040115d
  401970:	2040c2cc 	.word	0x2040c2cc
  401974:	0040048d 	.word	0x0040048d

00401978 <vTaskPlaceOnEventListRestricted>:
  401978:	b1e8      	cbz	r0, 4019b6 <vTaskPlaceOnEventListRestricted+0x3e>
  40197a:	b570      	push	{r4, r5, r6, lr}
  40197c:	4615      	mov	r5, r2
  40197e:	460c      	mov	r4, r1
  401980:	4e16      	ldr	r6, [pc, #88]	; (4019dc <vTaskPlaceOnEventListRestricted+0x64>)
  401982:	6831      	ldr	r1, [r6, #0]
  401984:	3118      	adds	r1, #24
  401986:	4b16      	ldr	r3, [pc, #88]	; (4019e0 <vTaskPlaceOnEventListRestricted+0x68>)
  401988:	4798      	blx	r3
  40198a:	6830      	ldr	r0, [r6, #0]
  40198c:	3004      	adds	r0, #4
  40198e:	4b15      	ldr	r3, [pc, #84]	; (4019e4 <vTaskPlaceOnEventListRestricted+0x6c>)
  401990:	4798      	blx	r3
  401992:	b940      	cbnz	r0, 4019a6 <vTaskPlaceOnEventListRestricted+0x2e>
  401994:	6832      	ldr	r2, [r6, #0]
  401996:	4914      	ldr	r1, [pc, #80]	; (4019e8 <vTaskPlaceOnEventListRestricted+0x70>)
  401998:	680b      	ldr	r3, [r1, #0]
  40199a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40199c:	2201      	movs	r2, #1
  40199e:	4082      	lsls	r2, r0
  4019a0:	ea23 0302 	bic.w	r3, r3, r2
  4019a4:	600b      	str	r3, [r1, #0]
  4019a6:	2d01      	cmp	r5, #1
  4019a8:	d010      	beq.n	4019cc <vTaskPlaceOnEventListRestricted+0x54>
  4019aa:	4b10      	ldr	r3, [pc, #64]	; (4019ec <vTaskPlaceOnEventListRestricted+0x74>)
  4019ac:	6818      	ldr	r0, [r3, #0]
  4019ae:	4420      	add	r0, r4
  4019b0:	4b0f      	ldr	r3, [pc, #60]	; (4019f0 <vTaskPlaceOnEventListRestricted+0x78>)
  4019b2:	4798      	blx	r3
  4019b4:	bd70      	pop	{r4, r5, r6, pc}
  4019b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019ba:	b672      	cpsid	i
  4019bc:	f383 8811 	msr	BASEPRI, r3
  4019c0:	f3bf 8f6f 	isb	sy
  4019c4:	f3bf 8f4f 	dsb	sy
  4019c8:	b662      	cpsie	i
  4019ca:	e7fe      	b.n	4019ca <vTaskPlaceOnEventListRestricted+0x52>
  4019cc:	4b03      	ldr	r3, [pc, #12]	; (4019dc <vTaskPlaceOnEventListRestricted+0x64>)
  4019ce:	6819      	ldr	r1, [r3, #0]
  4019d0:	3104      	adds	r1, #4
  4019d2:	4808      	ldr	r0, [pc, #32]	; (4019f4 <vTaskPlaceOnEventListRestricted+0x7c>)
  4019d4:	4b02      	ldr	r3, [pc, #8]	; (4019e0 <vTaskPlaceOnEventListRestricted+0x68>)
  4019d6:	4798      	blx	r3
  4019d8:	bd70      	pop	{r4, r5, r6, pc}
  4019da:	bf00      	nop
  4019dc:	2040c1fc 	.word	0x2040c1fc
  4019e0:	0040048d 	.word	0x0040048d
  4019e4:	004004d9 	.word	0x004004d9
  4019e8:	2040c280 	.word	0x2040c280
  4019ec:	2040c2f4 	.word	0x2040c2f4
  4019f0:	0040115d 	.word	0x0040115d
  4019f4:	2040c2cc 	.word	0x2040c2cc

004019f8 <xTaskRemoveFromEventList>:
  4019f8:	b538      	push	{r3, r4, r5, lr}
  4019fa:	68c3      	ldr	r3, [r0, #12]
  4019fc:	68dc      	ldr	r4, [r3, #12]
  4019fe:	b324      	cbz	r4, 401a4a <xTaskRemoveFromEventList+0x52>
  401a00:	f104 0518 	add.w	r5, r4, #24
  401a04:	4628      	mov	r0, r5
  401a06:	4b1a      	ldr	r3, [pc, #104]	; (401a70 <xTaskRemoveFromEventList+0x78>)
  401a08:	4798      	blx	r3
  401a0a:	4b1a      	ldr	r3, [pc, #104]	; (401a74 <xTaskRemoveFromEventList+0x7c>)
  401a0c:	681b      	ldr	r3, [r3, #0]
  401a0e:	bb3b      	cbnz	r3, 401a60 <xTaskRemoveFromEventList+0x68>
  401a10:	1d25      	adds	r5, r4, #4
  401a12:	4628      	mov	r0, r5
  401a14:	4b16      	ldr	r3, [pc, #88]	; (401a70 <xTaskRemoveFromEventList+0x78>)
  401a16:	4798      	blx	r3
  401a18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a1a:	4a17      	ldr	r2, [pc, #92]	; (401a78 <xTaskRemoveFromEventList+0x80>)
  401a1c:	6811      	ldr	r1, [r2, #0]
  401a1e:	2301      	movs	r3, #1
  401a20:	4083      	lsls	r3, r0
  401a22:	430b      	orrs	r3, r1
  401a24:	6013      	str	r3, [r2, #0]
  401a26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a2a:	4629      	mov	r1, r5
  401a2c:	4b13      	ldr	r3, [pc, #76]	; (401a7c <xTaskRemoveFromEventList+0x84>)
  401a2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401a32:	4b13      	ldr	r3, [pc, #76]	; (401a80 <xTaskRemoveFromEventList+0x88>)
  401a34:	4798      	blx	r3
  401a36:	4b13      	ldr	r3, [pc, #76]	; (401a84 <xTaskRemoveFromEventList+0x8c>)
  401a38:	681b      	ldr	r3, [r3, #0]
  401a3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a3e:	429a      	cmp	r2, r3
  401a40:	d913      	bls.n	401a6a <xTaskRemoveFromEventList+0x72>
  401a42:	2001      	movs	r0, #1
  401a44:	4b10      	ldr	r3, [pc, #64]	; (401a88 <xTaskRemoveFromEventList+0x90>)
  401a46:	6018      	str	r0, [r3, #0]
  401a48:	bd38      	pop	{r3, r4, r5, pc}
  401a4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a4e:	b672      	cpsid	i
  401a50:	f383 8811 	msr	BASEPRI, r3
  401a54:	f3bf 8f6f 	isb	sy
  401a58:	f3bf 8f4f 	dsb	sy
  401a5c:	b662      	cpsie	i
  401a5e:	e7fe      	b.n	401a5e <xTaskRemoveFromEventList+0x66>
  401a60:	4629      	mov	r1, r5
  401a62:	480a      	ldr	r0, [pc, #40]	; (401a8c <xTaskRemoveFromEventList+0x94>)
  401a64:	4b06      	ldr	r3, [pc, #24]	; (401a80 <xTaskRemoveFromEventList+0x88>)
  401a66:	4798      	blx	r3
  401a68:	e7e5      	b.n	401a36 <xTaskRemoveFromEventList+0x3e>
  401a6a:	2000      	movs	r0, #0
  401a6c:	bd38      	pop	{r3, r4, r5, pc}
  401a6e:	bf00      	nop
  401a70:	004004d9 	.word	0x004004d9
  401a74:	2040c274 	.word	0x2040c274
  401a78:	2040c280 	.word	0x2040c280
  401a7c:	2040c208 	.word	0x2040c208
  401a80:	0040048d 	.word	0x0040048d
  401a84:	2040c1fc 	.word	0x2040c1fc
  401a88:	2040c2f8 	.word	0x2040c2f8
  401a8c:	2040c2b4 	.word	0x2040c2b4

00401a90 <vTaskSetTimeOutState>:
  401a90:	b130      	cbz	r0, 401aa0 <vTaskSetTimeOutState+0x10>
  401a92:	4a09      	ldr	r2, [pc, #36]	; (401ab8 <vTaskSetTimeOutState+0x28>)
  401a94:	6812      	ldr	r2, [r2, #0]
  401a96:	6002      	str	r2, [r0, #0]
  401a98:	4a08      	ldr	r2, [pc, #32]	; (401abc <vTaskSetTimeOutState+0x2c>)
  401a9a:	6812      	ldr	r2, [r2, #0]
  401a9c:	6042      	str	r2, [r0, #4]
  401a9e:	4770      	bx	lr
  401aa0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa4:	b672      	cpsid	i
  401aa6:	f383 8811 	msr	BASEPRI, r3
  401aaa:	f3bf 8f6f 	isb	sy
  401aae:	f3bf 8f4f 	dsb	sy
  401ab2:	b662      	cpsie	i
  401ab4:	e7fe      	b.n	401ab4 <vTaskSetTimeOutState+0x24>
  401ab6:	bf00      	nop
  401ab8:	2040c2b0 	.word	0x2040c2b0
  401abc:	2040c2f4 	.word	0x2040c2f4

00401ac0 <xTaskCheckForTimeOut>:
  401ac0:	b538      	push	{r3, r4, r5, lr}
  401ac2:	b1c0      	cbz	r0, 401af6 <xTaskCheckForTimeOut+0x36>
  401ac4:	4604      	mov	r4, r0
  401ac6:	b309      	cbz	r1, 401b0c <xTaskCheckForTimeOut+0x4c>
  401ac8:	460d      	mov	r5, r1
  401aca:	4b1d      	ldr	r3, [pc, #116]	; (401b40 <xTaskCheckForTimeOut+0x80>)
  401acc:	4798      	blx	r3
  401ace:	4b1d      	ldr	r3, [pc, #116]	; (401b44 <xTaskCheckForTimeOut+0x84>)
  401ad0:	681a      	ldr	r2, [r3, #0]
  401ad2:	682b      	ldr	r3, [r5, #0]
  401ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ad8:	d02e      	beq.n	401b38 <xTaskCheckForTimeOut+0x78>
  401ada:	491b      	ldr	r1, [pc, #108]	; (401b48 <xTaskCheckForTimeOut+0x88>)
  401adc:	6809      	ldr	r1, [r1, #0]
  401ade:	6820      	ldr	r0, [r4, #0]
  401ae0:	4288      	cmp	r0, r1
  401ae2:	d002      	beq.n	401aea <xTaskCheckForTimeOut+0x2a>
  401ae4:	6861      	ldr	r1, [r4, #4]
  401ae6:	428a      	cmp	r2, r1
  401ae8:	d228      	bcs.n	401b3c <xTaskCheckForTimeOut+0x7c>
  401aea:	6861      	ldr	r1, [r4, #4]
  401aec:	1a50      	subs	r0, r2, r1
  401aee:	4283      	cmp	r3, r0
  401af0:	d817      	bhi.n	401b22 <xTaskCheckForTimeOut+0x62>
  401af2:	2401      	movs	r4, #1
  401af4:	e01c      	b.n	401b30 <xTaskCheckForTimeOut+0x70>
  401af6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401afa:	b672      	cpsid	i
  401afc:	f383 8811 	msr	BASEPRI, r3
  401b00:	f3bf 8f6f 	isb	sy
  401b04:	f3bf 8f4f 	dsb	sy
  401b08:	b662      	cpsie	i
  401b0a:	e7fe      	b.n	401b0a <xTaskCheckForTimeOut+0x4a>
  401b0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b10:	b672      	cpsid	i
  401b12:	f383 8811 	msr	BASEPRI, r3
  401b16:	f3bf 8f6f 	isb	sy
  401b1a:	f3bf 8f4f 	dsb	sy
  401b1e:	b662      	cpsie	i
  401b20:	e7fe      	b.n	401b20 <xTaskCheckForTimeOut+0x60>
  401b22:	1a9b      	subs	r3, r3, r2
  401b24:	440b      	add	r3, r1
  401b26:	602b      	str	r3, [r5, #0]
  401b28:	4620      	mov	r0, r4
  401b2a:	4b08      	ldr	r3, [pc, #32]	; (401b4c <xTaskCheckForTimeOut+0x8c>)
  401b2c:	4798      	blx	r3
  401b2e:	2400      	movs	r4, #0
  401b30:	4b07      	ldr	r3, [pc, #28]	; (401b50 <xTaskCheckForTimeOut+0x90>)
  401b32:	4798      	blx	r3
  401b34:	4620      	mov	r0, r4
  401b36:	bd38      	pop	{r3, r4, r5, pc}
  401b38:	2400      	movs	r4, #0
  401b3a:	e7f9      	b.n	401b30 <xTaskCheckForTimeOut+0x70>
  401b3c:	2401      	movs	r4, #1
  401b3e:	e7f7      	b.n	401b30 <xTaskCheckForTimeOut+0x70>
  401b40:	004005bd 	.word	0x004005bd
  401b44:	2040c2f4 	.word	0x2040c2f4
  401b48:	2040c2b0 	.word	0x2040c2b0
  401b4c:	00401a91 	.word	0x00401a91
  401b50:	00400609 	.word	0x00400609

00401b54 <vTaskMissedYield>:
  401b54:	2201      	movs	r2, #1
  401b56:	4b01      	ldr	r3, [pc, #4]	; (401b5c <vTaskMissedYield+0x8>)
  401b58:	601a      	str	r2, [r3, #0]
  401b5a:	4770      	bx	lr
  401b5c:	2040c2f8 	.word	0x2040c2f8

00401b60 <xTaskGetSchedulerState>:
  401b60:	4b05      	ldr	r3, [pc, #20]	; (401b78 <xTaskGetSchedulerState+0x18>)
  401b62:	681b      	ldr	r3, [r3, #0]
  401b64:	b133      	cbz	r3, 401b74 <xTaskGetSchedulerState+0x14>
  401b66:	4b05      	ldr	r3, [pc, #20]	; (401b7c <xTaskGetSchedulerState+0x1c>)
  401b68:	681b      	ldr	r3, [r3, #0]
  401b6a:	2b00      	cmp	r3, #0
  401b6c:	bf0c      	ite	eq
  401b6e:	2002      	moveq	r0, #2
  401b70:	2000      	movne	r0, #0
  401b72:	4770      	bx	lr
  401b74:	2001      	movs	r0, #1
  401b76:	4770      	bx	lr
  401b78:	2040c2c8 	.word	0x2040c2c8
  401b7c:	2040c274 	.word	0x2040c274

00401b80 <vTaskPriorityInherit>:
  401b80:	2800      	cmp	r0, #0
  401b82:	d044      	beq.n	401c0e <vTaskPriorityInherit+0x8e>
  401b84:	b538      	push	{r3, r4, r5, lr}
  401b86:	4604      	mov	r4, r0
  401b88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401b8a:	4921      	ldr	r1, [pc, #132]	; (401c10 <vTaskPriorityInherit+0x90>)
  401b8c:	6809      	ldr	r1, [r1, #0]
  401b8e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401b90:	428a      	cmp	r2, r1
  401b92:	d214      	bcs.n	401bbe <vTaskPriorityInherit+0x3e>
  401b94:	6981      	ldr	r1, [r0, #24]
  401b96:	2900      	cmp	r1, #0
  401b98:	db05      	blt.n	401ba6 <vTaskPriorityInherit+0x26>
  401b9a:	491d      	ldr	r1, [pc, #116]	; (401c10 <vTaskPriorityInherit+0x90>)
  401b9c:	6809      	ldr	r1, [r1, #0]
  401b9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401ba0:	f1c1 0105 	rsb	r1, r1, #5
  401ba4:	6181      	str	r1, [r0, #24]
  401ba6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401baa:	491a      	ldr	r1, [pc, #104]	; (401c14 <vTaskPriorityInherit+0x94>)
  401bac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401bb0:	6961      	ldr	r1, [r4, #20]
  401bb2:	4291      	cmp	r1, r2
  401bb4:	d004      	beq.n	401bc0 <vTaskPriorityInherit+0x40>
  401bb6:	4a16      	ldr	r2, [pc, #88]	; (401c10 <vTaskPriorityInherit+0x90>)
  401bb8:	6812      	ldr	r2, [r2, #0]
  401bba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401bbc:	62e2      	str	r2, [r4, #44]	; 0x2c
  401bbe:	bd38      	pop	{r3, r4, r5, pc}
  401bc0:	1d25      	adds	r5, r4, #4
  401bc2:	4628      	mov	r0, r5
  401bc4:	4b14      	ldr	r3, [pc, #80]	; (401c18 <vTaskPriorityInherit+0x98>)
  401bc6:	4798      	blx	r3
  401bc8:	b970      	cbnz	r0, 401be8 <vTaskPriorityInherit+0x68>
  401bca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401bcc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401bd0:	4a10      	ldr	r2, [pc, #64]	; (401c14 <vTaskPriorityInherit+0x94>)
  401bd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401bd6:	b93a      	cbnz	r2, 401be8 <vTaskPriorityInherit+0x68>
  401bd8:	4810      	ldr	r0, [pc, #64]	; (401c1c <vTaskPriorityInherit+0x9c>)
  401bda:	6802      	ldr	r2, [r0, #0]
  401bdc:	2101      	movs	r1, #1
  401bde:	fa01 f303 	lsl.w	r3, r1, r3
  401be2:	ea22 0303 	bic.w	r3, r2, r3
  401be6:	6003      	str	r3, [r0, #0]
  401be8:	4b09      	ldr	r3, [pc, #36]	; (401c10 <vTaskPriorityInherit+0x90>)
  401bea:	681b      	ldr	r3, [r3, #0]
  401bec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401bee:	62e0      	str	r0, [r4, #44]	; 0x2c
  401bf0:	4a0a      	ldr	r2, [pc, #40]	; (401c1c <vTaskPriorityInherit+0x9c>)
  401bf2:	6811      	ldr	r1, [r2, #0]
  401bf4:	2301      	movs	r3, #1
  401bf6:	4083      	lsls	r3, r0
  401bf8:	430b      	orrs	r3, r1
  401bfa:	6013      	str	r3, [r2, #0]
  401bfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c00:	4629      	mov	r1, r5
  401c02:	4b04      	ldr	r3, [pc, #16]	; (401c14 <vTaskPriorityInherit+0x94>)
  401c04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c08:	4b05      	ldr	r3, [pc, #20]	; (401c20 <vTaskPriorityInherit+0xa0>)
  401c0a:	4798      	blx	r3
  401c0c:	bd38      	pop	{r3, r4, r5, pc}
  401c0e:	4770      	bx	lr
  401c10:	2040c1fc 	.word	0x2040c1fc
  401c14:	2040c208 	.word	0x2040c208
  401c18:	004004d9 	.word	0x004004d9
  401c1c:	2040c280 	.word	0x2040c280
  401c20:	0040048d 	.word	0x0040048d

00401c24 <xTaskPriorityDisinherit>:
  401c24:	2800      	cmp	r0, #0
  401c26:	d04d      	beq.n	401cc4 <xTaskPriorityDisinherit+0xa0>
  401c28:	b538      	push	{r3, r4, r5, lr}
  401c2a:	4604      	mov	r4, r0
  401c2c:	4a27      	ldr	r2, [pc, #156]	; (401ccc <xTaskPriorityDisinherit+0xa8>)
  401c2e:	6812      	ldr	r2, [r2, #0]
  401c30:	4290      	cmp	r0, r2
  401c32:	d00a      	beq.n	401c4a <xTaskPriorityDisinherit+0x26>
  401c34:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c38:	b672      	cpsid	i
  401c3a:	f383 8811 	msr	BASEPRI, r3
  401c3e:	f3bf 8f6f 	isb	sy
  401c42:	f3bf 8f4f 	dsb	sy
  401c46:	b662      	cpsie	i
  401c48:	e7fe      	b.n	401c48 <xTaskPriorityDisinherit+0x24>
  401c4a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401c4c:	b952      	cbnz	r2, 401c64 <xTaskPriorityDisinherit+0x40>
  401c4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c52:	b672      	cpsid	i
  401c54:	f383 8811 	msr	BASEPRI, r3
  401c58:	f3bf 8f6f 	isb	sy
  401c5c:	f3bf 8f4f 	dsb	sy
  401c60:	b662      	cpsie	i
  401c62:	e7fe      	b.n	401c62 <xTaskPriorityDisinherit+0x3e>
  401c64:	3a01      	subs	r2, #1
  401c66:	64c2      	str	r2, [r0, #76]	; 0x4c
  401c68:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401c6a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  401c6c:	4288      	cmp	r0, r1
  401c6e:	d02b      	beq.n	401cc8 <xTaskPriorityDisinherit+0xa4>
  401c70:	bb52      	cbnz	r2, 401cc8 <xTaskPriorityDisinherit+0xa4>
  401c72:	1d25      	adds	r5, r4, #4
  401c74:	4628      	mov	r0, r5
  401c76:	4b16      	ldr	r3, [pc, #88]	; (401cd0 <xTaskPriorityDisinherit+0xac>)
  401c78:	4798      	blx	r3
  401c7a:	b968      	cbnz	r0, 401c98 <xTaskPriorityDisinherit+0x74>
  401c7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401c7e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401c82:	4b14      	ldr	r3, [pc, #80]	; (401cd4 <xTaskPriorityDisinherit+0xb0>)
  401c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401c88:	b933      	cbnz	r3, 401c98 <xTaskPriorityDisinherit+0x74>
  401c8a:	4813      	ldr	r0, [pc, #76]	; (401cd8 <xTaskPriorityDisinherit+0xb4>)
  401c8c:	6803      	ldr	r3, [r0, #0]
  401c8e:	2201      	movs	r2, #1
  401c90:	408a      	lsls	r2, r1
  401c92:	ea23 0302 	bic.w	r3, r3, r2
  401c96:	6003      	str	r3, [r0, #0]
  401c98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401c9a:	62e0      	str	r0, [r4, #44]	; 0x2c
  401c9c:	f1c0 0305 	rsb	r3, r0, #5
  401ca0:	61a3      	str	r3, [r4, #24]
  401ca2:	4a0d      	ldr	r2, [pc, #52]	; (401cd8 <xTaskPriorityDisinherit+0xb4>)
  401ca4:	6811      	ldr	r1, [r2, #0]
  401ca6:	2401      	movs	r4, #1
  401ca8:	fa04 f300 	lsl.w	r3, r4, r0
  401cac:	430b      	orrs	r3, r1
  401cae:	6013      	str	r3, [r2, #0]
  401cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401cb4:	4629      	mov	r1, r5
  401cb6:	4b07      	ldr	r3, [pc, #28]	; (401cd4 <xTaskPriorityDisinherit+0xb0>)
  401cb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401cbc:	4b07      	ldr	r3, [pc, #28]	; (401cdc <xTaskPriorityDisinherit+0xb8>)
  401cbe:	4798      	blx	r3
  401cc0:	4620      	mov	r0, r4
  401cc2:	bd38      	pop	{r3, r4, r5, pc}
  401cc4:	2000      	movs	r0, #0
  401cc6:	4770      	bx	lr
  401cc8:	2000      	movs	r0, #0
  401cca:	bd38      	pop	{r3, r4, r5, pc}
  401ccc:	2040c1fc 	.word	0x2040c1fc
  401cd0:	004004d9 	.word	0x004004d9
  401cd4:	2040c208 	.word	0x2040c208
  401cd8:	2040c280 	.word	0x2040c280
  401cdc:	0040048d 	.word	0x0040048d

00401ce0 <pvTaskIncrementMutexHeldCount>:
  401ce0:	4b05      	ldr	r3, [pc, #20]	; (401cf8 <pvTaskIncrementMutexHeldCount+0x18>)
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	b123      	cbz	r3, 401cf0 <pvTaskIncrementMutexHeldCount+0x10>
  401ce6:	4b04      	ldr	r3, [pc, #16]	; (401cf8 <pvTaskIncrementMutexHeldCount+0x18>)
  401ce8:	681a      	ldr	r2, [r3, #0]
  401cea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401cec:	3301      	adds	r3, #1
  401cee:	64d3      	str	r3, [r2, #76]	; 0x4c
  401cf0:	4b01      	ldr	r3, [pc, #4]	; (401cf8 <pvTaskIncrementMutexHeldCount+0x18>)
  401cf2:	6818      	ldr	r0, [r3, #0]
  401cf4:	4770      	bx	lr
  401cf6:	bf00      	nop
  401cf8:	2040c1fc 	.word	0x2040c1fc

00401cfc <prvInsertTimerInActiveList>:
  401cfc:	b508      	push	{r3, lr}
  401cfe:	6041      	str	r1, [r0, #4]
  401d00:	6100      	str	r0, [r0, #16]
  401d02:	4291      	cmp	r1, r2
  401d04:	d80c      	bhi.n	401d20 <prvInsertTimerInActiveList+0x24>
  401d06:	1ad2      	subs	r2, r2, r3
  401d08:	6983      	ldr	r3, [r0, #24]
  401d0a:	429a      	cmp	r2, r3
  401d0c:	d301      	bcc.n	401d12 <prvInsertTimerInActiveList+0x16>
  401d0e:	2001      	movs	r0, #1
  401d10:	bd08      	pop	{r3, pc}
  401d12:	1d01      	adds	r1, r0, #4
  401d14:	4b09      	ldr	r3, [pc, #36]	; (401d3c <prvInsertTimerInActiveList+0x40>)
  401d16:	6818      	ldr	r0, [r3, #0]
  401d18:	4b09      	ldr	r3, [pc, #36]	; (401d40 <prvInsertTimerInActiveList+0x44>)
  401d1a:	4798      	blx	r3
  401d1c:	2000      	movs	r0, #0
  401d1e:	bd08      	pop	{r3, pc}
  401d20:	429a      	cmp	r2, r3
  401d22:	d203      	bcs.n	401d2c <prvInsertTimerInActiveList+0x30>
  401d24:	4299      	cmp	r1, r3
  401d26:	d301      	bcc.n	401d2c <prvInsertTimerInActiveList+0x30>
  401d28:	2001      	movs	r0, #1
  401d2a:	bd08      	pop	{r3, pc}
  401d2c:	1d01      	adds	r1, r0, #4
  401d2e:	4b05      	ldr	r3, [pc, #20]	; (401d44 <prvInsertTimerInActiveList+0x48>)
  401d30:	6818      	ldr	r0, [r3, #0]
  401d32:	4b03      	ldr	r3, [pc, #12]	; (401d40 <prvInsertTimerInActiveList+0x44>)
  401d34:	4798      	blx	r3
  401d36:	2000      	movs	r0, #0
  401d38:	bd08      	pop	{r3, pc}
  401d3a:	bf00      	nop
  401d3c:	2040c300 	.word	0x2040c300
  401d40:	004004a5 	.word	0x004004a5
  401d44:	2040c2fc 	.word	0x2040c2fc

00401d48 <prvCheckForValidListAndQueue>:
  401d48:	b570      	push	{r4, r5, r6, lr}
  401d4a:	4b15      	ldr	r3, [pc, #84]	; (401da0 <prvCheckForValidListAndQueue+0x58>)
  401d4c:	4798      	blx	r3
  401d4e:	4b15      	ldr	r3, [pc, #84]	; (401da4 <prvCheckForValidListAndQueue+0x5c>)
  401d50:	681b      	ldr	r3, [r3, #0]
  401d52:	b113      	cbz	r3, 401d5a <prvCheckForValidListAndQueue+0x12>
  401d54:	4b14      	ldr	r3, [pc, #80]	; (401da8 <prvCheckForValidListAndQueue+0x60>)
  401d56:	4798      	blx	r3
  401d58:	bd70      	pop	{r4, r5, r6, pc}
  401d5a:	4d14      	ldr	r5, [pc, #80]	; (401dac <prvCheckForValidListAndQueue+0x64>)
  401d5c:	4628      	mov	r0, r5
  401d5e:	4e14      	ldr	r6, [pc, #80]	; (401db0 <prvCheckForValidListAndQueue+0x68>)
  401d60:	47b0      	blx	r6
  401d62:	4c14      	ldr	r4, [pc, #80]	; (401db4 <prvCheckForValidListAndQueue+0x6c>)
  401d64:	4620      	mov	r0, r4
  401d66:	47b0      	blx	r6
  401d68:	4b13      	ldr	r3, [pc, #76]	; (401db8 <prvCheckForValidListAndQueue+0x70>)
  401d6a:	601d      	str	r5, [r3, #0]
  401d6c:	4b13      	ldr	r3, [pc, #76]	; (401dbc <prvCheckForValidListAndQueue+0x74>)
  401d6e:	601c      	str	r4, [r3, #0]
  401d70:	2200      	movs	r2, #0
  401d72:	2110      	movs	r1, #16
  401d74:	2005      	movs	r0, #5
  401d76:	4b12      	ldr	r3, [pc, #72]	; (401dc0 <prvCheckForValidListAndQueue+0x78>)
  401d78:	4798      	blx	r3
  401d7a:	4b0a      	ldr	r3, [pc, #40]	; (401da4 <prvCheckForValidListAndQueue+0x5c>)
  401d7c:	6018      	str	r0, [r3, #0]
  401d7e:	b118      	cbz	r0, 401d88 <prvCheckForValidListAndQueue+0x40>
  401d80:	4910      	ldr	r1, [pc, #64]	; (401dc4 <prvCheckForValidListAndQueue+0x7c>)
  401d82:	4b11      	ldr	r3, [pc, #68]	; (401dc8 <prvCheckForValidListAndQueue+0x80>)
  401d84:	4798      	blx	r3
  401d86:	e7e5      	b.n	401d54 <prvCheckForValidListAndQueue+0xc>
  401d88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d8c:	b672      	cpsid	i
  401d8e:	f383 8811 	msr	BASEPRI, r3
  401d92:	f3bf 8f6f 	isb	sy
  401d96:	f3bf 8f4f 	dsb	sy
  401d9a:	b662      	cpsie	i
  401d9c:	e7fe      	b.n	401d9c <prvCheckForValidListAndQueue+0x54>
  401d9e:	bf00      	nop
  401da0:	004005bd 	.word	0x004005bd
  401da4:	2040c330 	.word	0x2040c330
  401da8:	00400609 	.word	0x00400609
  401dac:	2040c304 	.word	0x2040c304
  401db0:	00400471 	.word	0x00400471
  401db4:	2040c318 	.word	0x2040c318
  401db8:	2040c2fc 	.word	0x2040c2fc
  401dbc:	2040c300 	.word	0x2040c300
  401dc0:	00400b15 	.word	0x00400b15
  401dc4:	0040cac4 	.word	0x0040cac4
  401dc8:	004010a5 	.word	0x004010a5

00401dcc <xTimerCreateTimerTask>:
  401dcc:	b510      	push	{r4, lr}
  401dce:	b084      	sub	sp, #16
  401dd0:	4b0f      	ldr	r3, [pc, #60]	; (401e10 <xTimerCreateTimerTask+0x44>)
  401dd2:	4798      	blx	r3
  401dd4:	4b0f      	ldr	r3, [pc, #60]	; (401e14 <xTimerCreateTimerTask+0x48>)
  401dd6:	681b      	ldr	r3, [r3, #0]
  401dd8:	b173      	cbz	r3, 401df8 <xTimerCreateTimerTask+0x2c>
  401dda:	2300      	movs	r3, #0
  401ddc:	9303      	str	r3, [sp, #12]
  401dde:	9302      	str	r3, [sp, #8]
  401de0:	9301      	str	r3, [sp, #4]
  401de2:	2204      	movs	r2, #4
  401de4:	9200      	str	r2, [sp, #0]
  401de6:	f44f 7282 	mov.w	r2, #260	; 0x104
  401dea:	490b      	ldr	r1, [pc, #44]	; (401e18 <xTimerCreateTimerTask+0x4c>)
  401dec:	480b      	ldr	r0, [pc, #44]	; (401e1c <xTimerCreateTimerTask+0x50>)
  401dee:	4c0c      	ldr	r4, [pc, #48]	; (401e20 <xTimerCreateTimerTask+0x54>)
  401df0:	47a0      	blx	r4
  401df2:	b108      	cbz	r0, 401df8 <xTimerCreateTimerTask+0x2c>
  401df4:	b004      	add	sp, #16
  401df6:	bd10      	pop	{r4, pc}
  401df8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dfc:	b672      	cpsid	i
  401dfe:	f383 8811 	msr	BASEPRI, r3
  401e02:	f3bf 8f6f 	isb	sy
  401e06:	f3bf 8f4f 	dsb	sy
  401e0a:	b662      	cpsie	i
  401e0c:	e7fe      	b.n	401e0c <xTimerCreateTimerTask+0x40>
  401e0e:	bf00      	nop
  401e10:	00401d49 	.word	0x00401d49
  401e14:	2040c330 	.word	0x2040c330
  401e18:	0040cacc 	.word	0x0040cacc
  401e1c:	00401f4d 	.word	0x00401f4d
  401e20:	004011b5 	.word	0x004011b5

00401e24 <xTimerGenericCommand>:
  401e24:	b1d8      	cbz	r0, 401e5e <xTimerGenericCommand+0x3a>
  401e26:	b530      	push	{r4, r5, lr}
  401e28:	b085      	sub	sp, #20
  401e2a:	4615      	mov	r5, r2
  401e2c:	4604      	mov	r4, r0
  401e2e:	4a15      	ldr	r2, [pc, #84]	; (401e84 <xTimerGenericCommand+0x60>)
  401e30:	6810      	ldr	r0, [r2, #0]
  401e32:	b320      	cbz	r0, 401e7e <xTimerGenericCommand+0x5a>
  401e34:	461a      	mov	r2, r3
  401e36:	9100      	str	r1, [sp, #0]
  401e38:	9501      	str	r5, [sp, #4]
  401e3a:	9402      	str	r4, [sp, #8]
  401e3c:	2905      	cmp	r1, #5
  401e3e:	dc19      	bgt.n	401e74 <xTimerGenericCommand+0x50>
  401e40:	4b11      	ldr	r3, [pc, #68]	; (401e88 <xTimerGenericCommand+0x64>)
  401e42:	4798      	blx	r3
  401e44:	2802      	cmp	r0, #2
  401e46:	f04f 0300 	mov.w	r3, #0
  401e4a:	bf0c      	ite	eq
  401e4c:	9a08      	ldreq	r2, [sp, #32]
  401e4e:	461a      	movne	r2, r3
  401e50:	4669      	mov	r1, sp
  401e52:	480c      	ldr	r0, [pc, #48]	; (401e84 <xTimerGenericCommand+0x60>)
  401e54:	6800      	ldr	r0, [r0, #0]
  401e56:	4c0d      	ldr	r4, [pc, #52]	; (401e8c <xTimerGenericCommand+0x68>)
  401e58:	47a0      	blx	r4
  401e5a:	b005      	add	sp, #20
  401e5c:	bd30      	pop	{r4, r5, pc}
  401e5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e62:	b672      	cpsid	i
  401e64:	f383 8811 	msr	BASEPRI, r3
  401e68:	f3bf 8f6f 	isb	sy
  401e6c:	f3bf 8f4f 	dsb	sy
  401e70:	b662      	cpsie	i
  401e72:	e7fe      	b.n	401e72 <xTimerGenericCommand+0x4e>
  401e74:	2300      	movs	r3, #0
  401e76:	4669      	mov	r1, sp
  401e78:	4c05      	ldr	r4, [pc, #20]	; (401e90 <xTimerGenericCommand+0x6c>)
  401e7a:	47a0      	blx	r4
  401e7c:	e7ed      	b.n	401e5a <xTimerGenericCommand+0x36>
  401e7e:	2000      	movs	r0, #0
  401e80:	e7eb      	b.n	401e5a <xTimerGenericCommand+0x36>
  401e82:	bf00      	nop
  401e84:	2040c330 	.word	0x2040c330
  401e88:	00401b61 	.word	0x00401b61
  401e8c:	00400bf1 	.word	0x00400bf1
  401e90:	00400dd5 	.word	0x00400dd5

00401e94 <prvSampleTimeNow>:
  401e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e98:	b082      	sub	sp, #8
  401e9a:	4680      	mov	r8, r0
  401e9c:	4b24      	ldr	r3, [pc, #144]	; (401f30 <prvSampleTimeNow+0x9c>)
  401e9e:	4798      	blx	r3
  401ea0:	4607      	mov	r7, r0
  401ea2:	4b24      	ldr	r3, [pc, #144]	; (401f34 <prvSampleTimeNow+0xa0>)
  401ea4:	681b      	ldr	r3, [r3, #0]
  401ea6:	4298      	cmp	r0, r3
  401ea8:	d31b      	bcc.n	401ee2 <prvSampleTimeNow+0x4e>
  401eaa:	2300      	movs	r3, #0
  401eac:	f8c8 3000 	str.w	r3, [r8]
  401eb0:	4b20      	ldr	r3, [pc, #128]	; (401f34 <prvSampleTimeNow+0xa0>)
  401eb2:	601f      	str	r7, [r3, #0]
  401eb4:	4638      	mov	r0, r7
  401eb6:	b002      	add	sp, #8
  401eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ebc:	2100      	movs	r1, #0
  401ebe:	9100      	str	r1, [sp, #0]
  401ec0:	460b      	mov	r3, r1
  401ec2:	4652      	mov	r2, sl
  401ec4:	4620      	mov	r0, r4
  401ec6:	4c1c      	ldr	r4, [pc, #112]	; (401f38 <prvSampleTimeNow+0xa4>)
  401ec8:	47a0      	blx	r4
  401eca:	b960      	cbnz	r0, 401ee6 <prvSampleTimeNow+0x52>
  401ecc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ed0:	b672      	cpsid	i
  401ed2:	f383 8811 	msr	BASEPRI, r3
  401ed6:	f3bf 8f6f 	isb	sy
  401eda:	f3bf 8f4f 	dsb	sy
  401ede:	b662      	cpsie	i
  401ee0:	e7fe      	b.n	401ee0 <prvSampleTimeNow+0x4c>
  401ee2:	4d16      	ldr	r5, [pc, #88]	; (401f3c <prvSampleTimeNow+0xa8>)
  401ee4:	4e16      	ldr	r6, [pc, #88]	; (401f40 <prvSampleTimeNow+0xac>)
  401ee6:	682b      	ldr	r3, [r5, #0]
  401ee8:	681a      	ldr	r2, [r3, #0]
  401eea:	b1c2      	cbz	r2, 401f1e <prvSampleTimeNow+0x8a>
  401eec:	68db      	ldr	r3, [r3, #12]
  401eee:	f8d3 a000 	ldr.w	sl, [r3]
  401ef2:	68dc      	ldr	r4, [r3, #12]
  401ef4:	f104 0904 	add.w	r9, r4, #4
  401ef8:	4648      	mov	r0, r9
  401efa:	47b0      	blx	r6
  401efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401efe:	4620      	mov	r0, r4
  401f00:	4798      	blx	r3
  401f02:	69e3      	ldr	r3, [r4, #28]
  401f04:	2b01      	cmp	r3, #1
  401f06:	d1ee      	bne.n	401ee6 <prvSampleTimeNow+0x52>
  401f08:	69a3      	ldr	r3, [r4, #24]
  401f0a:	4453      	add	r3, sl
  401f0c:	459a      	cmp	sl, r3
  401f0e:	d2d5      	bcs.n	401ebc <prvSampleTimeNow+0x28>
  401f10:	6063      	str	r3, [r4, #4]
  401f12:	6124      	str	r4, [r4, #16]
  401f14:	4649      	mov	r1, r9
  401f16:	6828      	ldr	r0, [r5, #0]
  401f18:	4b0a      	ldr	r3, [pc, #40]	; (401f44 <prvSampleTimeNow+0xb0>)
  401f1a:	4798      	blx	r3
  401f1c:	e7e3      	b.n	401ee6 <prvSampleTimeNow+0x52>
  401f1e:	4a0a      	ldr	r2, [pc, #40]	; (401f48 <prvSampleTimeNow+0xb4>)
  401f20:	6810      	ldr	r0, [r2, #0]
  401f22:	4906      	ldr	r1, [pc, #24]	; (401f3c <prvSampleTimeNow+0xa8>)
  401f24:	6008      	str	r0, [r1, #0]
  401f26:	6013      	str	r3, [r2, #0]
  401f28:	2301      	movs	r3, #1
  401f2a:	f8c8 3000 	str.w	r3, [r8]
  401f2e:	e7bf      	b.n	401eb0 <prvSampleTimeNow+0x1c>
  401f30:	00401485 	.word	0x00401485
  401f34:	2040c32c 	.word	0x2040c32c
  401f38:	00401e25 	.word	0x00401e25
  401f3c:	2040c2fc 	.word	0x2040c2fc
  401f40:	004004d9 	.word	0x004004d9
  401f44:	004004a5 	.word	0x004004a5
  401f48:	2040c300 	.word	0x2040c300

00401f4c <prvTimerTask>:
  401f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f50:	b088      	sub	sp, #32
  401f52:	4e75      	ldr	r6, [pc, #468]	; (402128 <prvTimerTask+0x1dc>)
  401f54:	4f75      	ldr	r7, [pc, #468]	; (40212c <prvTimerTask+0x1e0>)
  401f56:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402154 <prvTimerTask+0x208>
  401f5a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402158 <prvTimerTask+0x20c>
  401f5e:	6833      	ldr	r3, [r6, #0]
  401f60:	681a      	ldr	r2, [r3, #0]
  401f62:	2a00      	cmp	r2, #0
  401f64:	f000 80ce 	beq.w	402104 <prvTimerTask+0x1b8>
  401f68:	68db      	ldr	r3, [r3, #12]
  401f6a:	681c      	ldr	r4, [r3, #0]
  401f6c:	47b8      	blx	r7
  401f6e:	a804      	add	r0, sp, #16
  401f70:	4b6f      	ldr	r3, [pc, #444]	; (402130 <prvTimerTask+0x1e4>)
  401f72:	4798      	blx	r3
  401f74:	4605      	mov	r5, r0
  401f76:	9b04      	ldr	r3, [sp, #16]
  401f78:	2b00      	cmp	r3, #0
  401f7a:	d144      	bne.n	402006 <prvTimerTask+0xba>
  401f7c:	42a0      	cmp	r0, r4
  401f7e:	d212      	bcs.n	401fa6 <prvTimerTask+0x5a>
  401f80:	2200      	movs	r2, #0
  401f82:	1b61      	subs	r1, r4, r5
  401f84:	4b6b      	ldr	r3, [pc, #428]	; (402134 <prvTimerTask+0x1e8>)
  401f86:	6818      	ldr	r0, [r3, #0]
  401f88:	4b6b      	ldr	r3, [pc, #428]	; (402138 <prvTimerTask+0x1ec>)
  401f8a:	4798      	blx	r3
  401f8c:	4b6b      	ldr	r3, [pc, #428]	; (40213c <prvTimerTask+0x1f0>)
  401f8e:	4798      	blx	r3
  401f90:	2800      	cmp	r0, #0
  401f92:	d13a      	bne.n	40200a <prvTimerTask+0xbe>
  401f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f98:	f8c9 3000 	str.w	r3, [r9]
  401f9c:	f3bf 8f4f 	dsb	sy
  401fa0:	f3bf 8f6f 	isb	sy
  401fa4:	e031      	b.n	40200a <prvTimerTask+0xbe>
  401fa6:	4b65      	ldr	r3, [pc, #404]	; (40213c <prvTimerTask+0x1f0>)
  401fa8:	4798      	blx	r3
  401faa:	6833      	ldr	r3, [r6, #0]
  401fac:	68db      	ldr	r3, [r3, #12]
  401fae:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  401fb2:	f10a 0004 	add.w	r0, sl, #4
  401fb6:	47c0      	blx	r8
  401fb8:	f8da 301c 	ldr.w	r3, [sl, #28]
  401fbc:	2b01      	cmp	r3, #1
  401fbe:	d004      	beq.n	401fca <prvTimerTask+0x7e>
  401fc0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401fc4:	4650      	mov	r0, sl
  401fc6:	4798      	blx	r3
  401fc8:	e01f      	b.n	40200a <prvTimerTask+0xbe>
  401fca:	f8da 1018 	ldr.w	r1, [sl, #24]
  401fce:	4623      	mov	r3, r4
  401fd0:	462a      	mov	r2, r5
  401fd2:	4421      	add	r1, r4
  401fd4:	4650      	mov	r0, sl
  401fd6:	4d5a      	ldr	r5, [pc, #360]	; (402140 <prvTimerTask+0x1f4>)
  401fd8:	47a8      	blx	r5
  401fda:	2801      	cmp	r0, #1
  401fdc:	d1f0      	bne.n	401fc0 <prvTimerTask+0x74>
  401fde:	2100      	movs	r1, #0
  401fe0:	9100      	str	r1, [sp, #0]
  401fe2:	460b      	mov	r3, r1
  401fe4:	4622      	mov	r2, r4
  401fe6:	4650      	mov	r0, sl
  401fe8:	4c56      	ldr	r4, [pc, #344]	; (402144 <prvTimerTask+0x1f8>)
  401fea:	47a0      	blx	r4
  401fec:	2800      	cmp	r0, #0
  401fee:	d1e7      	bne.n	401fc0 <prvTimerTask+0x74>
  401ff0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ff4:	b672      	cpsid	i
  401ff6:	f383 8811 	msr	BASEPRI, r3
  401ffa:	f3bf 8f6f 	isb	sy
  401ffe:	f3bf 8f4f 	dsb	sy
  402002:	b662      	cpsie	i
  402004:	e7fe      	b.n	402004 <prvTimerTask+0xb8>
  402006:	4b4d      	ldr	r3, [pc, #308]	; (40213c <prvTimerTask+0x1f0>)
  402008:	4798      	blx	r3
  40200a:	4d4a      	ldr	r5, [pc, #296]	; (402134 <prvTimerTask+0x1e8>)
  40200c:	4c4e      	ldr	r4, [pc, #312]	; (402148 <prvTimerTask+0x1fc>)
  40200e:	e006      	b.n	40201e <prvTimerTask+0xd2>
  402010:	9907      	ldr	r1, [sp, #28]
  402012:	9806      	ldr	r0, [sp, #24]
  402014:	9b05      	ldr	r3, [sp, #20]
  402016:	4798      	blx	r3
  402018:	9b04      	ldr	r3, [sp, #16]
  40201a:	2b00      	cmp	r3, #0
  40201c:	da09      	bge.n	402032 <prvTimerTask+0xe6>
  40201e:	2300      	movs	r3, #0
  402020:	461a      	mov	r2, r3
  402022:	a904      	add	r1, sp, #16
  402024:	6828      	ldr	r0, [r5, #0]
  402026:	47a0      	blx	r4
  402028:	2800      	cmp	r0, #0
  40202a:	d098      	beq.n	401f5e <prvTimerTask+0x12>
  40202c:	9b04      	ldr	r3, [sp, #16]
  40202e:	2b00      	cmp	r3, #0
  402030:	dbee      	blt.n	402010 <prvTimerTask+0xc4>
  402032:	f8dd a018 	ldr.w	sl, [sp, #24]
  402036:	f8da 3014 	ldr.w	r3, [sl, #20]
  40203a:	b113      	cbz	r3, 402042 <prvTimerTask+0xf6>
  40203c:	f10a 0004 	add.w	r0, sl, #4
  402040:	47c0      	blx	r8
  402042:	a803      	add	r0, sp, #12
  402044:	4b3a      	ldr	r3, [pc, #232]	; (402130 <prvTimerTask+0x1e4>)
  402046:	4798      	blx	r3
  402048:	9b04      	ldr	r3, [sp, #16]
  40204a:	2b09      	cmp	r3, #9
  40204c:	d8e7      	bhi.n	40201e <prvTimerTask+0xd2>
  40204e:	a201      	add	r2, pc, #4	; (adr r2, 402054 <prvTimerTask+0x108>)
  402050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402054:	0040207d 	.word	0x0040207d
  402058:	0040207d 	.word	0x0040207d
  40205c:	0040207d 	.word	0x0040207d
  402060:	0040201f 	.word	0x0040201f
  402064:	004020d1 	.word	0x004020d1
  402068:	004020fd 	.word	0x004020fd
  40206c:	0040207d 	.word	0x0040207d
  402070:	0040207d 	.word	0x0040207d
  402074:	0040201f 	.word	0x0040201f
  402078:	004020d1 	.word	0x004020d1
  40207c:	9c05      	ldr	r4, [sp, #20]
  40207e:	f8da 1018 	ldr.w	r1, [sl, #24]
  402082:	4623      	mov	r3, r4
  402084:	4602      	mov	r2, r0
  402086:	4421      	add	r1, r4
  402088:	4650      	mov	r0, sl
  40208a:	4c2d      	ldr	r4, [pc, #180]	; (402140 <prvTimerTask+0x1f4>)
  40208c:	47a0      	blx	r4
  40208e:	2801      	cmp	r0, #1
  402090:	d1bc      	bne.n	40200c <prvTimerTask+0xc0>
  402092:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402096:	4650      	mov	r0, sl
  402098:	4798      	blx	r3
  40209a:	f8da 301c 	ldr.w	r3, [sl, #28]
  40209e:	2b01      	cmp	r3, #1
  4020a0:	d1b4      	bne.n	40200c <prvTimerTask+0xc0>
  4020a2:	f8da 2018 	ldr.w	r2, [sl, #24]
  4020a6:	2100      	movs	r1, #0
  4020a8:	9100      	str	r1, [sp, #0]
  4020aa:	460b      	mov	r3, r1
  4020ac:	9805      	ldr	r0, [sp, #20]
  4020ae:	4402      	add	r2, r0
  4020b0:	4650      	mov	r0, sl
  4020b2:	4c24      	ldr	r4, [pc, #144]	; (402144 <prvTimerTask+0x1f8>)
  4020b4:	47a0      	blx	r4
  4020b6:	2800      	cmp	r0, #0
  4020b8:	d1a8      	bne.n	40200c <prvTimerTask+0xc0>
  4020ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020be:	b672      	cpsid	i
  4020c0:	f383 8811 	msr	BASEPRI, r3
  4020c4:	f3bf 8f6f 	isb	sy
  4020c8:	f3bf 8f4f 	dsb	sy
  4020cc:	b662      	cpsie	i
  4020ce:	e7fe      	b.n	4020ce <prvTimerTask+0x182>
  4020d0:	9905      	ldr	r1, [sp, #20]
  4020d2:	f8ca 1018 	str.w	r1, [sl, #24]
  4020d6:	b131      	cbz	r1, 4020e6 <prvTimerTask+0x19a>
  4020d8:	4603      	mov	r3, r0
  4020da:	4602      	mov	r2, r0
  4020dc:	4401      	add	r1, r0
  4020de:	4650      	mov	r0, sl
  4020e0:	4c17      	ldr	r4, [pc, #92]	; (402140 <prvTimerTask+0x1f4>)
  4020e2:	47a0      	blx	r4
  4020e4:	e792      	b.n	40200c <prvTimerTask+0xc0>
  4020e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ea:	b672      	cpsid	i
  4020ec:	f383 8811 	msr	BASEPRI, r3
  4020f0:	f3bf 8f6f 	isb	sy
  4020f4:	f3bf 8f4f 	dsb	sy
  4020f8:	b662      	cpsie	i
  4020fa:	e7fe      	b.n	4020fa <prvTimerTask+0x1ae>
  4020fc:	4650      	mov	r0, sl
  4020fe:	4b13      	ldr	r3, [pc, #76]	; (40214c <prvTimerTask+0x200>)
  402100:	4798      	blx	r3
  402102:	e783      	b.n	40200c <prvTimerTask+0xc0>
  402104:	47b8      	blx	r7
  402106:	a804      	add	r0, sp, #16
  402108:	4b09      	ldr	r3, [pc, #36]	; (402130 <prvTimerTask+0x1e4>)
  40210a:	4798      	blx	r3
  40210c:	4605      	mov	r5, r0
  40210e:	9b04      	ldr	r3, [sp, #16]
  402110:	2b00      	cmp	r3, #0
  402112:	f47f af78 	bne.w	402006 <prvTimerTask+0xba>
  402116:	4b0e      	ldr	r3, [pc, #56]	; (402150 <prvTimerTask+0x204>)
  402118:	681b      	ldr	r3, [r3, #0]
  40211a:	681a      	ldr	r2, [r3, #0]
  40211c:	fab2 f282 	clz	r2, r2
  402120:	0952      	lsrs	r2, r2, #5
  402122:	2400      	movs	r4, #0
  402124:	e72d      	b.n	401f82 <prvTimerTask+0x36>
  402126:	bf00      	nop
  402128:	2040c2fc 	.word	0x2040c2fc
  40212c:	00401475 	.word	0x00401475
  402130:	00401e95 	.word	0x00401e95
  402134:	2040c330 	.word	0x2040c330
  402138:	004010d9 	.word	0x004010d9
  40213c:	004015dd 	.word	0x004015dd
  402140:	00401cfd 	.word	0x00401cfd
  402144:	00401e25 	.word	0x00401e25
  402148:	00400ed5 	.word	0x00400ed5
  40214c:	00400889 	.word	0x00400889
  402150:	2040c300 	.word	0x2040c300
  402154:	e000ed04 	.word	0xe000ed04
  402158:	004004d9 	.word	0x004004d9

0040215c <chip_isr>:
  //CORSI acorda task wifi freertos
  //BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  //xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  //vTaskNotifyGiveFromISR( xHandleWifi, &xHigherPriorityTaskWoken );
  
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40215c:	2810      	cmp	r0, #16
  40215e:	d108      	bne.n	402172 <chip_isr+0x16>
  402160:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402164:	d105      	bne.n	402172 <chip_isr+0x16>
{
  402166:	b508      	push	{r3, lr}
		if (gpfIsr) {
  402168:	4b02      	ldr	r3, [pc, #8]	; (402174 <chip_isr+0x18>)
  40216a:	681b      	ldr	r3, [r3, #0]
  40216c:	b103      	cbz	r3, 402170 <chip_isr+0x14>
			gpfIsr();
  40216e:	4798      	blx	r3
  402170:	bd08      	pop	{r3, pc}
  402172:	4770      	bx	lr
  402174:	2040c334 	.word	0x2040c334

00402178 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  402178:	b150      	cbz	r0, 402190 <nm_bsp_sleep+0x18>
{
  40217a:	b570      	push	{r4, r5, r6, lr}
  40217c:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  40217e:	4e05      	ldr	r6, [pc, #20]	; (402194 <nm_bsp_sleep+0x1c>)
  402180:	4d05      	ldr	r5, [pc, #20]	; (402198 <nm_bsp_sleep+0x20>)
  402182:	4630      	mov	r0, r6
  402184:	47a8      	blx	r5
	while(u32TimeMsec--) {
  402186:	3c01      	subs	r4, #1
  402188:	f1b4 3fff 	cmp.w	r4, #4294967295
  40218c:	d1f9      	bne.n	402182 <nm_bsp_sleep+0xa>
  40218e:	bd70      	pop	{r4, r5, r6, pc}
  402190:	4770      	bx	lr
  402192:	bf00      	nop
  402194:	00031635 	.word	0x00031635
  402198:	20400001 	.word	0x20400001

0040219c <nm_bsp_reset>:
{
  40219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021a0:	4f09      	ldr	r7, [pc, #36]	; (4021c8 <nm_bsp_reset+0x2c>)
  4021a2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4021a6:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4021aa:	4d08      	ldr	r5, [pc, #32]	; (4021cc <nm_bsp_reset+0x30>)
  4021ac:	2608      	movs	r6, #8
  4021ae:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  4021b0:	2064      	movs	r0, #100	; 0x64
  4021b2:	4c07      	ldr	r4, [pc, #28]	; (4021d0 <nm_bsp_reset+0x34>)
  4021b4:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4021b6:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  4021ba:	2064      	movs	r0, #100	; 0x64
  4021bc:	47a0      	blx	r4
  4021be:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  4021c0:	2064      	movs	r0, #100	; 0x64
  4021c2:	47a0      	blx	r4
  4021c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021c8:	400e1200 	.word	0x400e1200
  4021cc:	400e1000 	.word	0x400e1000
  4021d0:	00402179 	.word	0x00402179

004021d4 <nm_bsp_init>:
{
  4021d4:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4021d6:	2200      	movs	r2, #0
  4021d8:	4b14      	ldr	r3, [pc, #80]	; (40222c <nm_bsp_init+0x58>)
  4021da:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4021dc:	200a      	movs	r0, #10
  4021de:	4c14      	ldr	r4, [pc, #80]	; (402230 <nm_bsp_init+0x5c>)
  4021e0:	47a0      	blx	r4
  4021e2:	200b      	movs	r0, #11
  4021e4:	47a0      	blx	r4
  4021e6:	200c      	movs	r0, #12
  4021e8:	47a0      	blx	r4
  4021ea:	2010      	movs	r0, #16
  4021ec:	47a0      	blx	r4
  4021ee:	2011      	movs	r0, #17
  4021f0:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021f2:	4b10      	ldr	r3, [pc, #64]	; (402234 <nm_bsp_init+0x60>)
  4021f4:	2208      	movs	r2, #8
  4021f6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4021fc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021fe:	4a0e      	ldr	r2, [pc, #56]	; (402238 <nm_bsp_init+0x64>)
  402200:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402204:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402206:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40220a:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40220c:	2204      	movs	r2, #4
  40220e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402210:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402214:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  402216:	4b09      	ldr	r3, [pc, #36]	; (40223c <nm_bsp_init+0x68>)
  402218:	681b      	ldr	r3, [r3, #0]
  40221a:	f013 0f01 	tst.w	r3, #1
  40221e:	d001      	beq.n	402224 <nm_bsp_init+0x50>
  402220:	4b06      	ldr	r3, [pc, #24]	; (40223c <nm_bsp_init+0x68>)
  402222:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  402224:	4b06      	ldr	r3, [pc, #24]	; (402240 <nm_bsp_init+0x6c>)
  402226:	4798      	blx	r3
}
  402228:	2000      	movs	r0, #0
  40222a:	bd10      	pop	{r4, pc}
  40222c:	2040c334 	.word	0x2040c334
  402230:	004054a1 	.word	0x004054a1
  402234:	400e1000 	.word	0x400e1000
  402238:	400e1200 	.word	0x400e1200
  40223c:	e000e010 	.word	0xe000e010
  402240:	0040219d 	.word	0x0040219d

00402244 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  402244:	b530      	push	{r4, r5, lr}
  402246:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  402248:	4b17      	ldr	r3, [pc, #92]	; (4022a8 <nm_bsp_register_isr+0x64>)
  40224a:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40224c:	2010      	movs	r0, #16
  40224e:	4b17      	ldr	r3, [pc, #92]	; (4022ac <nm_bsp_register_isr+0x68>)
  402250:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  402252:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402256:	207c      	movs	r0, #124	; 0x7c
  402258:	4b15      	ldr	r3, [pc, #84]	; (4022b0 <nm_bsp_register_isr+0x6c>)
  40225a:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  40225c:	4c15      	ldr	r4, [pc, #84]	; (4022b4 <nm_bsp_register_isr+0x70>)
  40225e:	2201      	movs	r2, #1
  402260:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402264:	4620      	mov	r0, r4
  402266:	4b14      	ldr	r3, [pc, #80]	; (4022b8 <nm_bsp_register_isr+0x74>)
  402268:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40226a:	4b14      	ldr	r3, [pc, #80]	; (4022bc <nm_bsp_register_isr+0x78>)
  40226c:	9300      	str	r3, [sp, #0]
  40226e:	2351      	movs	r3, #81	; 0x51
  402270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402274:	2110      	movs	r1, #16
  402276:	4620      	mov	r0, r4
  402278:	4d11      	ldr	r5, [pc, #68]	; (4022c0 <nm_bsp_register_isr+0x7c>)
  40227a:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40227c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402280:	4620      	mov	r0, r4
  402282:	4b10      	ldr	r3, [pc, #64]	; (4022c4 <nm_bsp_register_isr+0x80>)
  402284:	4798      	blx	r3
  // corsi: clear PIO IRQ before enable nvic
  pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  402286:	4620      	mov	r0, r4
  402288:	4b0f      	ldr	r3, [pc, #60]	; (4022c8 <nm_bsp_register_isr+0x84>)
  40228a:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40228c:	4b0f      	ldr	r3, [pc, #60]	; (4022cc <nm_bsp_register_isr+0x88>)
  40228e:	22a0      	movs	r2, #160	; 0xa0
  402290:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402294:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402298:	601a      	str	r2, [r3, #0]
  // corsi: for use with RTOS priority shall be < configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY 
 	NVIC_SetPriority((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID, 5);
 	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40229a:	2205      	movs	r2, #5
  40229c:	2110      	movs	r1, #16
  40229e:	4620      	mov	r0, r4
  4022a0:	4b0b      	ldr	r3, [pc, #44]	; (4022d0 <nm_bsp_register_isr+0x8c>)
  4022a2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4022a4:	b003      	add	sp, #12
  4022a6:	bd30      	pop	{r4, r5, pc}
  4022a8:	2040c334 	.word	0x2040c334
  4022ac:	004054a1 	.word	0x004054a1
  4022b0:	004050a9 	.word	0x004050a9
  4022b4:	400e1400 	.word	0x400e1400
  4022b8:	00404ed1 	.word	0x00404ed1
  4022bc:	0040215d 	.word	0x0040215d
  4022c0:	00405229 	.word	0x00405229
  4022c4:	00405097 	.word	0x00405097
  4022c8:	0040509f 	.word	0x0040509f
  4022cc:	e000e100 	.word	0xe000e100
  4022d0:	004052fd 	.word	0x004052fd

004022d4 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4022d4:	b508      	push	{r3, lr}
	if (u8Enable) {
  4022d6:	b928      	cbnz	r0, 4022e4 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4022d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4022dc:	4804      	ldr	r0, [pc, #16]	; (4022f0 <nm_bsp_interrupt_ctrl+0x1c>)
  4022de:	4b05      	ldr	r3, [pc, #20]	; (4022f4 <nm_bsp_interrupt_ctrl+0x20>)
  4022e0:	4798      	blx	r3
  4022e2:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4022e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4022e8:	4801      	ldr	r0, [pc, #4]	; (4022f0 <nm_bsp_interrupt_ctrl+0x1c>)
  4022ea:	4b03      	ldr	r3, [pc, #12]	; (4022f8 <nm_bsp_interrupt_ctrl+0x24>)
  4022ec:	4798      	blx	r3
  4022ee:	bd08      	pop	{r3, pc}
  4022f0:	400e1400 	.word	0x400e1400
  4022f4:	0040509b 	.word	0x0040509b
  4022f8:	00405097 	.word	0x00405097

004022fc <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  4022fe:	4c39      	ldr	r4, [pc, #228]	; (4023e4 <nm_bus_init+0xe8>)
  402300:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  402304:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402306:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40230a:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40230c:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40230e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402312:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402314:	430b      	orrs	r3, r1
  402316:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402318:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40231a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40231e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402320:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402324:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402326:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40232a:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40232c:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40232e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402332:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402334:	4313      	orrs	r3, r2
  402336:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402338:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40233a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40233e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  402344:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402346:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40234a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40234c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40234e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402352:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402354:	4318      	orrs	r0, r3
  402356:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402358:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40235a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40235e:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402360:	6061      	str	r1, [r4, #4]
  402362:	6062      	str	r2, [r4, #4]
  402364:	6063      	str	r3, [r4, #4]
  402366:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40236a:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  40236c:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40236e:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  402370:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  402372:	4d1d      	ldr	r5, [pc, #116]	; (4023e8 <nm_bus_init+0xec>)
  402374:	4628      	mov	r0, r5
  402376:	4b1d      	ldr	r3, [pc, #116]	; (4023ec <nm_bus_init+0xf0>)
  402378:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40237a:	2302      	movs	r3, #2
  40237c:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40237e:	2380      	movs	r3, #128	; 0x80
  402380:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402382:	686b      	ldr	r3, [r5, #4]
  402384:	f043 0301 	orr.w	r3, r3, #1
  402388:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40238a:	686b      	ldr	r3, [r5, #4]
  40238c:	f043 0310 	orr.w	r3, r3, #16
  402390:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  402392:	2101      	movs	r1, #1
  402394:	4628      	mov	r0, r5
  402396:	4b16      	ldr	r3, [pc, #88]	; (4023f0 <nm_bus_init+0xf4>)
  402398:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  40239a:	2200      	movs	r2, #0
  40239c:	2101      	movs	r1, #1
  40239e:	4628      	mov	r0, r5
  4023a0:	4b14      	ldr	r3, [pc, #80]	; (4023f4 <nm_bus_init+0xf8>)
  4023a2:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4023a4:	2201      	movs	r2, #1
  4023a6:	4611      	mov	r1, r2
  4023a8:	4628      	mov	r0, r5
  4023aa:	4b13      	ldr	r3, [pc, #76]	; (4023f8 <nm_bus_init+0xfc>)
  4023ac:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4023ae:	2200      	movs	r2, #0
  4023b0:	2101      	movs	r1, #1
  4023b2:	4628      	mov	r0, r5
  4023b4:	4b11      	ldr	r3, [pc, #68]	; (4023fc <nm_bus_init+0x100>)
  4023b6:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4023b8:	4911      	ldr	r1, [pc, #68]	; (402400 <nm_bus_init+0x104>)
  4023ba:	4812      	ldr	r0, [pc, #72]	; (402404 <nm_bus_init+0x108>)
  4023bc:	4b12      	ldr	r3, [pc, #72]	; (402408 <nm_bus_init+0x10c>)
  4023be:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4023c0:	b2c2      	uxtb	r2, r0
  4023c2:	2101      	movs	r1, #1
  4023c4:	4628      	mov	r0, r5
  4023c6:	4b11      	ldr	r3, [pc, #68]	; (40240c <nm_bus_init+0x110>)
  4023c8:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4023ca:	2300      	movs	r3, #0
  4023cc:	461a      	mov	r2, r3
  4023ce:	2101      	movs	r1, #1
  4023d0:	4628      	mov	r0, r5
  4023d2:	4f0f      	ldr	r7, [pc, #60]	; (402410 <nm_bus_init+0x114>)
  4023d4:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4023d6:	2301      	movs	r3, #1
  4023d8:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4023da:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4023dc:	4b0d      	ldr	r3, [pc, #52]	; (402414 <nm_bus_init+0x118>)
  4023de:	4798      	blx	r3
#endif
	return result;
}
  4023e0:	2000      	movs	r0, #0
  4023e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023e4:	400e1400 	.word	0x400e1400
  4023e8:	40008000 	.word	0x40008000
  4023ec:	004054f5 	.word	0x004054f5
  4023f0:	00405521 	.word	0x00405521
  4023f4:	0040559b 	.word	0x0040559b
  4023f8:	004055b9 	.word	0x004055b9
  4023fc:	004055d7 	.word	0x004055d7
  402400:	11e1a300 	.word	0x11e1a300
  402404:	02dc6c00 	.word	0x02dc6c00
  402408:	004055eb 	.word	0x004055eb
  40240c:	00405601 	.word	0x00405601
  402410:	00405629 	.word	0x00405629
  402414:	0040219d 	.word	0x0040219d

00402418 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  402418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40241c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40241e:	2803      	cmp	r0, #3
  402420:	d144      	bne.n	4024ac <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  402422:	680e      	ldr	r6, [r1, #0]
  402424:	684d      	ldr	r5, [r1, #4]
  402426:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  402428:	2300      	movs	r3, #0
  40242a:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40242e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  402432:	b186      	cbz	r6, 402456 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  402434:	2d00      	cmp	r5, #0
  402436:	d136      	bne.n	4024a6 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  402438:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40243c:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40243e:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  402440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402444:	4b20      	ldr	r3, [pc, #128]	; (4024c8 <nm_bus_ioctl+0xb0>)
  402446:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  402448:	b32c      	cbz	r4, 402496 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40244a:	4f20      	ldr	r7, [pc, #128]	; (4024cc <nm_bus_ioctl+0xb4>)
  40244c:	f8df b094 	ldr.w	fp, [pc, #148]	; 4024e4 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  402450:	f8df a094 	ldr.w	sl, [pc, #148]	; 4024e8 <nm_bus_ioctl+0xd0>
  402454:	e006      	b.n	402464 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402456:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  40245a:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40245e:	ae01      	add	r6, sp, #4
  402460:	e7ee      	b.n	402440 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  402462:	b1c4      	cbz	r4, 402496 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402464:	2300      	movs	r3, #0
  402466:	461a      	mov	r2, r3
  402468:	7831      	ldrb	r1, [r6, #0]
  40246a:	4638      	mov	r0, r7
  40246c:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40246e:	f10d 0205 	add.w	r2, sp, #5
  402472:	f10d 0106 	add.w	r1, sp, #6
  402476:	4638      	mov	r0, r7
  402478:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  40247a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40247e:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  402480:	3c01      	subs	r4, #1
  402482:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  402484:	f1b8 0f00 	cmp.w	r8, #0
  402488:	d100      	bne.n	40248c <nm_bus_ioctl+0x74>
			pu8Miso++;
  40248a:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  40248c:	f1b9 0f00 	cmp.w	r9, #0
  402490:	d1e7      	bne.n	402462 <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  402492:	3601      	adds	r6, #1
  402494:	e7e5      	b.n	402462 <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  402496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40249a:	4b0b      	ldr	r3, [pc, #44]	; (4024c8 <nm_bus_ioctl+0xb0>)
  40249c:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  40249e:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4024a0:	b003      	add	sp, #12
  4024a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4024a6:	f06f 0005 	mvn.w	r0, #5
		break;
  4024aa:	e7f9      	b.n	4024a0 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4024ac:	f240 121f 	movw	r2, #287	; 0x11f
  4024b0:	4907      	ldr	r1, [pc, #28]	; (4024d0 <nm_bus_ioctl+0xb8>)
  4024b2:	4808      	ldr	r0, [pc, #32]	; (4024d4 <nm_bus_ioctl+0xbc>)
  4024b4:	4c08      	ldr	r4, [pc, #32]	; (4024d8 <nm_bus_ioctl+0xc0>)
  4024b6:	47a0      	blx	r4
  4024b8:	4808      	ldr	r0, [pc, #32]	; (4024dc <nm_bus_ioctl+0xc4>)
  4024ba:	47a0      	blx	r4
  4024bc:	4808      	ldr	r0, [pc, #32]	; (4024e0 <nm_bus_ioctl+0xc8>)
  4024be:	47a0      	blx	r4
			s8Ret = -1;
  4024c0:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  4024c4:	e7ec      	b.n	4024a0 <nm_bus_ioctl+0x88>
  4024c6:	bf00      	nop
  4024c8:	400e1400 	.word	0x400e1400
  4024cc:	40008000 	.word	0x40008000
  4024d0:	0040cad4 	.word	0x0040cad4
  4024d4:	0040cae4 	.word	0x0040cae4
  4024d8:	004060b9 	.word	0x004060b9
  4024dc:	0040caf8 	.word	0x0040caf8
  4024e0:	0040cb10 	.word	0x0040cb10
  4024e4:	00405567 	.word	0x00405567
  4024e8:	00405537 	.word	0x00405537

004024ec <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4024ec:	2202      	movs	r2, #2
  4024ee:	4b0e      	ldr	r3, [pc, #56]	; (402528 <nm_bus_deinit+0x3c>)
  4024f0:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4024f2:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4024f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4024fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4024fe:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402500:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402504:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402508:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40250a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40250e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402512:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402514:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40251c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40251e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  402522:	2000      	movs	r0, #0
  402524:	4770      	bx	lr
  402526:	bf00      	nop
  402528:	40008000 	.word	0x40008000

0040252c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  40252c:	b13a      	cbz	r2, 40253e <m2m_memcpy+0x12>
  40252e:	3901      	subs	r1, #1
  402530:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  402532:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402536:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  40253a:	4290      	cmp	r0, r2
  40253c:	d1f9      	bne.n	402532 <m2m_memcpy+0x6>
  40253e:	4770      	bx	lr

00402540 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  402540:	b122      	cbz	r2, 40254c <m2m_memset+0xc>
  402542:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402544:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402548:	4290      	cmp	r0, r2
  40254a:	d1fb      	bne.n	402544 <m2m_memset+0x4>
  40254c:	4770      	bx	lr

0040254e <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40254e:	7803      	ldrb	r3, [r0, #0]
  402550:	b143      	cbz	r3, 402564 <m2m_strlen+0x16>
  402552:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  402554:	3301      	adds	r3, #1
  402556:	b29b      	uxth	r3, r3
	while(*pcStr)
  402558:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40255c:	2a00      	cmp	r2, #0
  40255e:	d1f9      	bne.n	402554 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  402560:	4618      	mov	r0, r3
  402562:	4770      	bx	lr
	uint16	u16StrLen = 0;
  402564:	2300      	movs	r3, #0
  402566:	e7fb      	b.n	402560 <m2m_strlen+0x12>

00402568 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  402568:	4a02      	ldr	r2, [pc, #8]	; (402574 <isr+0xc>)
  40256a:	7813      	ldrb	r3, [r2, #0]
  40256c:	3301      	adds	r3, #1
  40256e:	b2db      	uxtb	r3, r3
  402570:	7013      	strb	r3, [r2, #0]
  402572:	4770      	bx	lr
  402574:	2040c33b 	.word	0x2040c33b

00402578 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402578:	4770      	bx	lr
	...

0040257c <hif_set_rx_done>:
{
  40257c:	b500      	push	{lr}
  40257e:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  402580:	2001      	movs	r0, #1
  402582:	4b0b      	ldr	r3, [pc, #44]	; (4025b0 <hif_set_rx_done+0x34>)
  402584:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402586:	a901      	add	r1, sp, #4
  402588:	f241 0070 	movw	r0, #4208	; 0x1070
  40258c:	4b09      	ldr	r3, [pc, #36]	; (4025b4 <hif_set_rx_done+0x38>)
  40258e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402590:	4603      	mov	r3, r0
  402592:	b118      	cbz	r0, 40259c <hif_set_rx_done+0x20>
}
  402594:	4618      	mov	r0, r3
  402596:	b003      	add	sp, #12
  402598:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  40259c:	9901      	ldr	r1, [sp, #4]
  40259e:	f041 0102 	orr.w	r1, r1, #2
  4025a2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4025a4:	f241 0070 	movw	r0, #4208	; 0x1070
  4025a8:	4b03      	ldr	r3, [pc, #12]	; (4025b8 <hif_set_rx_done+0x3c>)
  4025aa:	4798      	blx	r3
  4025ac:	4603      	mov	r3, r0
  4025ae:	e7f1      	b.n	402594 <hif_set_rx_done+0x18>
  4025b0:	004022d5 	.word	0x004022d5
  4025b4:	00403869 	.word	0x00403869
  4025b8:	00403875 	.word	0x00403875

004025bc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4025bc:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4025be:	4b12      	ldr	r3, [pc, #72]	; (402608 <hif_chip_wake+0x4c>)
  4025c0:	781b      	ldrb	r3, [r3, #0]
  4025c2:	b94b      	cbnz	r3, 4025d8 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4025c4:	4b11      	ldr	r3, [pc, #68]	; (40260c <hif_chip_wake+0x50>)
  4025c6:	781b      	ldrb	r3, [r3, #0]
  4025c8:	b2db      	uxtb	r3, r3
  4025ca:	2b03      	cmp	r3, #3
  4025cc:	d00c      	beq.n	4025e8 <hif_chip_wake+0x2c>
  4025ce:	4b0f      	ldr	r3, [pc, #60]	; (40260c <hif_chip_wake+0x50>)
  4025d0:	781b      	ldrb	r3, [r3, #0]
  4025d2:	b2db      	uxtb	r3, r3
  4025d4:	2b04      	cmp	r3, #4
  4025d6:	d007      	beq.n	4025e8 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4025d8:	4a0b      	ldr	r2, [pc, #44]	; (402608 <hif_chip_wake+0x4c>)
  4025da:	7813      	ldrb	r3, [r2, #0]
  4025dc:	3301      	adds	r3, #1
  4025de:	b2db      	uxtb	r3, r3
  4025e0:	7013      	strb	r3, [r2, #0]
  4025e2:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4025e4:	4618      	mov	r0, r3
  4025e6:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  4025e8:	4b09      	ldr	r3, [pc, #36]	; (402610 <hif_chip_wake+0x54>)
  4025ea:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4025ec:	4603      	mov	r3, r0
  4025ee:	2800      	cmp	r0, #0
  4025f0:	d1f8      	bne.n	4025e4 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4025f2:	f245 6178 	movw	r1, #22136	; 0x5678
  4025f6:	f241 0074 	movw	r0, #4212	; 0x1074
  4025fa:	4b06      	ldr	r3, [pc, #24]	; (402614 <hif_chip_wake+0x58>)
  4025fc:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4025fe:	4603      	mov	r3, r0
  402600:	2800      	cmp	r0, #0
  402602:	d0e9      	beq.n	4025d8 <hif_chip_wake+0x1c>
  402604:	e7ee      	b.n	4025e4 <hif_chip_wake+0x28>
  402606:	bf00      	nop
  402608:	2040c339 	.word	0x2040c339
  40260c:	2040c338 	.word	0x2040c338
  402610:	004033d9 	.word	0x004033d9
  402614:	00403875 	.word	0x00403875

00402618 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  402618:	4b1e      	ldr	r3, [pc, #120]	; (402694 <hif_chip_sleep+0x7c>)
  40261a:	781b      	ldrb	r3, [r3, #0]
  40261c:	b123      	cbz	r3, 402628 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  40261e:	4a1d      	ldr	r2, [pc, #116]	; (402694 <hif_chip_sleep+0x7c>)
  402620:	7813      	ldrb	r3, [r2, #0]
  402622:	3b01      	subs	r3, #1
  402624:	b2db      	uxtb	r3, r3
  402626:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402628:	4b1a      	ldr	r3, [pc, #104]	; (402694 <hif_chip_sleep+0x7c>)
  40262a:	781b      	ldrb	r3, [r3, #0]
  40262c:	2b00      	cmp	r3, #0
  40262e:	d12e      	bne.n	40268e <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402630:	4b19      	ldr	r3, [pc, #100]	; (402698 <hif_chip_sleep+0x80>)
  402632:	781b      	ldrb	r3, [r3, #0]
  402634:	b2db      	uxtb	r3, r3
  402636:	2b03      	cmp	r3, #3
  402638:	d006      	beq.n	402648 <hif_chip_sleep+0x30>
  40263a:	4b17      	ldr	r3, [pc, #92]	; (402698 <hif_chip_sleep+0x80>)
  40263c:	781b      	ldrb	r3, [r3, #0]
  40263e:	b2db      	uxtb	r3, r3
  402640:	2b04      	cmp	r3, #4
  402642:	d001      	beq.n	402648 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402644:	2300      	movs	r3, #0
  402646:	e023      	b.n	402690 <hif_chip_sleep+0x78>
{
  402648:	b500      	push	{lr}
  40264a:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  40264c:	2300      	movs	r3, #0
  40264e:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  402650:	f244 3121 	movw	r1, #17185	; 0x4321
  402654:	f241 0074 	movw	r0, #4212	; 0x1074
  402658:	4b10      	ldr	r3, [pc, #64]	; (40269c <hif_chip_sleep+0x84>)
  40265a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40265c:	4603      	mov	r3, r0
  40265e:	b118      	cbz	r0, 402668 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  402660:	4618      	mov	r0, r3
  402662:	b003      	add	sp, #12
  402664:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  402668:	a901      	add	r1, sp, #4
  40266a:	2001      	movs	r0, #1
  40266c:	4b0c      	ldr	r3, [pc, #48]	; (4026a0 <hif_chip_sleep+0x88>)
  40266e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402670:	4603      	mov	r3, r0
  402672:	2800      	cmp	r0, #0
  402674:	d1f4      	bne.n	402660 <hif_chip_sleep+0x48>
			if(reg&0x2)
  402676:	9901      	ldr	r1, [sp, #4]
  402678:	f011 0f02 	tst.w	r1, #2
  40267c:	d0f0      	beq.n	402660 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  40267e:	f021 0102 	bic.w	r1, r1, #2
  402682:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  402684:	2001      	movs	r0, #1
  402686:	4b05      	ldr	r3, [pc, #20]	; (40269c <hif_chip_sleep+0x84>)
  402688:	4798      	blx	r3
  40268a:	4603      	mov	r3, r0
  40268c:	e7e8      	b.n	402660 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  40268e:	2300      	movs	r3, #0
}
  402690:	4618      	mov	r0, r3
  402692:	4770      	bx	lr
  402694:	2040c339 	.word	0x2040c339
  402698:	2040c338 	.word	0x2040c338
  40269c:	00403875 	.word	0x00403875
  4026a0:	00403869 	.word	0x00403869

004026a4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4026a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026a8:	b087      	sub	sp, #28
  4026aa:	4607      	mov	r7, r0
  4026ac:	4688      	mov	r8, r1
  4026ae:	4692      	mov	sl, r2
  4026b0:	4699      	mov	r9, r3
  4026b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4026b4:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4026b8:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4026bc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4026c0:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4026c4:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4026c8:	2308      	movs	r3, #8
  4026ca:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4026ce:	2c00      	cmp	r4, #0
  4026d0:	f000 809f 	beq.w	402812 <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4026d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4026d8:	fa16 f383 	uxtah	r3, r6, r3
  4026dc:	442b      	add	r3, r5
  4026de:	b29b      	uxth	r3, r3
  4026e0:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  4026e4:	4b5c      	ldr	r3, [pc, #368]	; (402858 <hif_send+0x1b4>)
  4026e6:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4026e8:	4683      	mov	fp, r0
  4026ea:	2800      	cmp	r0, #0
  4026ec:	f040 80a2 	bne.w	402834 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  4026f0:	2300      	movs	r3, #0
  4026f2:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4026f4:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4026f8:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4026fa:	9b02      	ldr	r3, [sp, #8]
  4026fc:	431f      	orrs	r7, r3
  4026fe:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  402700:	9b02      	ldr	r3, [sp, #8]
  402702:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  402706:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  402708:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40270c:	9b02      	ldr	r3, [sp, #8]
  40270e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402712:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  402714:	9902      	ldr	r1, [sp, #8]
  402716:	f241 008c 	movw	r0, #4236	; 0x108c
  40271a:	4b50      	ldr	r3, [pc, #320]	; (40285c <hif_send+0x1b8>)
  40271c:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40271e:	4683      	mov	fp, r0
  402720:	2800      	cmp	r0, #0
  402722:	f040 8091 	bne.w	402848 <hif_send+0x1a4>


		reg = 0;
  402726:	2300      	movs	r3, #0
  402728:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  40272a:	9b02      	ldr	r3, [sp, #8]
  40272c:	f043 0302 	orr.w	r3, r3, #2
  402730:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  402732:	9902      	ldr	r1, [sp, #8]
  402734:	f241 0078 	movw	r0, #4216	; 0x1078
  402738:	4b48      	ldr	r3, [pc, #288]	; (40285c <hif_send+0x1b8>)
  40273a:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40273c:	4683      	mov	fp, r0
  40273e:	2800      	cmp	r0, #0
  402740:	f040 8082 	bne.w	402848 <hif_send+0x1a4>
		dma_addr = 0;
  402744:	2300      	movs	r3, #0
  402746:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402748:	f8ad 3006 	strh.w	r3, [sp, #6]
  40274c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402750:	b29b      	uxth	r3, r3
  402752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402756:	d216      	bcs.n	402786 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402758:	f241 0878 	movw	r8, #4216	; 0x1078
  40275c:	4f40      	ldr	r7, [pc, #256]	; (402860 <hif_send+0x1bc>)
  40275e:	a902      	add	r1, sp, #8
  402760:	4640      	mov	r0, r8
  402762:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  402764:	b978      	cbnz	r0, 402786 <hif_send+0xe2>
			if (!(reg & 0x2))
  402766:	9b02      	ldr	r3, [sp, #8]
  402768:	f013 0f02 	tst.w	r3, #2
  40276c:	d059      	beq.n	402822 <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  40276e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402772:	3301      	adds	r3, #1
  402774:	b29b      	uxth	r3, r3
  402776:	f8ad 3006 	strh.w	r3, [sp, #6]
  40277a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40277e:	b29b      	uxth	r3, r3
  402780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402784:	d3eb      	bcc.n	40275e <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  402786:	9b03      	ldr	r3, [sp, #12]
  402788:	2b00      	cmp	r3, #0
  40278a:	d061      	beq.n	402850 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  40278c:	9b03      	ldr	r3, [sp, #12]
  40278e:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  402790:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402794:	b29b      	uxth	r3, r3
  402796:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  40279a:	9804      	ldr	r0, [sp, #16]
  40279c:	2208      	movs	r2, #8
  40279e:	a905      	add	r1, sp, #20
  4027a0:	4b30      	ldr	r3, [pc, #192]	; (402864 <hif_send+0x1c0>)
  4027a2:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4027a4:	4683      	mov	fp, r0
  4027a6:	2800      	cmp	r0, #0
  4027a8:	d14e      	bne.n	402848 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4027aa:	9b04      	ldr	r3, [sp, #16]
  4027ac:	3308      	adds	r3, #8
  4027ae:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4027b0:	f1ba 0f00 	cmp.w	sl, #0
  4027b4:	d00a      	beq.n	4027cc <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4027b6:	9804      	ldr	r0, [sp, #16]
  4027b8:	464a      	mov	r2, r9
  4027ba:	4651      	mov	r1, sl
  4027bc:	4b29      	ldr	r3, [pc, #164]	; (402864 <hif_send+0x1c0>)
  4027be:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4027c0:	4683      	mov	fp, r0
  4027c2:	2800      	cmp	r0, #0
  4027c4:	d140      	bne.n	402848 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4027c6:	9b04      	ldr	r3, [sp, #16]
  4027c8:	444b      	add	r3, r9
  4027ca:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4027cc:	b17c      	cbz	r4, 4027ee <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4027ce:	9b04      	ldr	r3, [sp, #16]
  4027d0:	eba5 0509 	sub.w	r5, r5, r9
  4027d4:	441d      	add	r5, r3
  4027d6:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4027d8:	9804      	ldr	r0, [sp, #16]
  4027da:	4632      	mov	r2, r6
  4027dc:	4621      	mov	r1, r4
  4027de:	4b21      	ldr	r3, [pc, #132]	; (402864 <hif_send+0x1c0>)
  4027e0:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4027e2:	4683      	mov	fp, r0
  4027e4:	2800      	cmp	r0, #0
  4027e6:	d12f      	bne.n	402848 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4027e8:	9b04      	ldr	r3, [sp, #16]
  4027ea:	441e      	add	r6, r3
  4027ec:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4027ee:	9b03      	ldr	r3, [sp, #12]
  4027f0:	009b      	lsls	r3, r3, #2
  4027f2:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4027f4:	9b02      	ldr	r3, [sp, #8]
  4027f6:	f043 0302 	orr.w	r3, r3, #2
  4027fa:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4027fc:	9902      	ldr	r1, [sp, #8]
  4027fe:	f241 006c 	movw	r0, #4204	; 0x106c
  402802:	4b16      	ldr	r3, [pc, #88]	; (40285c <hif_send+0x1b8>)
  402804:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  402806:	4683      	mov	fp, r0
  402808:	b9f0      	cbnz	r0, 402848 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  40280a:	4b17      	ldr	r3, [pc, #92]	; (402868 <hif_send+0x1c4>)
  40280c:	4798      	blx	r3
  40280e:	4683      	mov	fp, r0
  402810:	e01a      	b.n	402848 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  402812:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402816:	fa19 f383 	uxtah	r3, r9, r3
  40281a:	b29b      	uxth	r3, r3
  40281c:	f8ad 3016 	strh.w	r3, [sp, #22]
  402820:	e760      	b.n	4026e4 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  402822:	a903      	add	r1, sp, #12
  402824:	4811      	ldr	r0, [pc, #68]	; (40286c <hif_send+0x1c8>)
  402826:	4b0e      	ldr	r3, [pc, #56]	; (402860 <hif_send+0x1bc>)
  402828:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40282a:	2800      	cmp	r0, #0
  40282c:	d0ab      	beq.n	402786 <hif_send+0xe2>
					dma_addr = 0;
  40282e:	2300      	movs	r3, #0
  402830:	9303      	str	r3, [sp, #12]
  402832:	e7a8      	b.n	402786 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402834:	f240 129f 	movw	r2, #415	; 0x19f
  402838:	490d      	ldr	r1, [pc, #52]	; (402870 <hif_send+0x1cc>)
  40283a:	480e      	ldr	r0, [pc, #56]	; (402874 <hif_send+0x1d0>)
  40283c:	4c0e      	ldr	r4, [pc, #56]	; (402878 <hif_send+0x1d4>)
  40283e:	47a0      	blx	r4
  402840:	480e      	ldr	r0, [pc, #56]	; (40287c <hif_send+0x1d8>)
  402842:	47a0      	blx	r4
  402844:	480e      	ldr	r0, [pc, #56]	; (402880 <hif_send+0x1dc>)
  402846:	47a0      	blx	r4

ERR1:
	return ret;
}
  402848:	4658      	mov	r0, fp
  40284a:	b007      	add	sp, #28
  40284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  402850:	f06f 0b02 	mvn.w	fp, #2
  402854:	e7f8      	b.n	402848 <hif_send+0x1a4>
  402856:	bf00      	nop
  402858:	004025bd 	.word	0x004025bd
  40285c:	00403875 	.word	0x00403875
  402860:	00403869 	.word	0x00403869
  402864:	004038dd 	.word	0x004038dd
  402868:	00402619 	.word	0x00402619
  40286c:	00150400 	.word	0x00150400
  402870:	0040cb14 	.word	0x0040cb14
  402874:	0040cae4 	.word	0x0040cae4
  402878:	004060b9 	.word	0x004060b9
  40287c:	0040cd68 	.word	0x0040cd68
  402880:	0040cb10 	.word	0x0040cb10

00402884 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  402884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402888:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40288a:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 402b84 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  40288e:	4fa2      	ldr	r7, [pc, #648]	; (402b18 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402890:	4ea2      	ldr	r6, [pc, #648]	; (402b1c <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402892:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402b88 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  402896:	e0d5      	b.n	402a44 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  402898:	2204      	movs	r2, #4
  40289a:	a904      	add	r1, sp, #16
  40289c:	9805      	ldr	r0, [sp, #20]
  40289e:	4ba0      	ldr	r3, [pc, #640]	; (402b20 <hif_handle_isr+0x29c>)
  4028a0:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4028a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4028a6:	b29b      	uxth	r3, r3
  4028a8:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4028ac:	4604      	mov	r4, r0
  4028ae:	2800      	cmp	r0, #0
  4028b0:	d130      	bne.n	402914 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  4028b2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4028b6:	b29b      	uxth	r3, r3
  4028b8:	429d      	cmp	r5, r3
  4028ba:	d005      	beq.n	4028c8 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  4028bc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4028c0:	b29b      	uxth	r3, r3
  4028c2:	1aeb      	subs	r3, r5, r3
  4028c4:	2b04      	cmp	r3, #4
  4028c6:	dc33      	bgt.n	402930 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4028c8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4028cc:	b2db      	uxtb	r3, r3
  4028ce:	2b01      	cmp	r3, #1
  4028d0:	d047      	beq.n	402962 <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4028d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4028d6:	b2db      	uxtb	r3, r3
  4028d8:	2b02      	cmp	r3, #2
  4028da:	d05f      	beq.n	40299c <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4028dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4028e0:	b2db      	uxtb	r3, r3
  4028e2:	2b04      	cmp	r3, #4
  4028e4:	d068      	beq.n	4029b8 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4028e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4028ea:	b2db      	uxtb	r3, r3
  4028ec:	2b06      	cmp	r3, #6
  4028ee:	d071      	beq.n	4029d4 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4028f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4028f4:	b2db      	uxtb	r3, r3
  4028f6:	2b07      	cmp	r3, #7
  4028f8:	d07a      	beq.n	4029f0 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  4028fa:	f240 2202 	movw	r2, #514	; 0x202
  4028fe:	4641      	mov	r1, r8
  402900:	4630      	mov	r0, r6
  402902:	4c88      	ldr	r4, [pc, #544]	; (402b24 <hif_handle_isr+0x2a0>)
  402904:	47a0      	blx	r4
  402906:	4888      	ldr	r0, [pc, #544]	; (402b28 <hif_handle_isr+0x2a4>)
  402908:	47a0      	blx	r4
  40290a:	4888      	ldr	r0, [pc, #544]	; (402b2c <hif_handle_isr+0x2a8>)
  40290c:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  40290e:	f06f 0405 	mvn.w	r4, #5
  402912:	e096      	b.n	402a42 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  402914:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  402918:	4641      	mov	r1, r8
  40291a:	4630      	mov	r0, r6
  40291c:	4d81      	ldr	r5, [pc, #516]	; (402b24 <hif_handle_isr+0x2a0>)
  40291e:	47a8      	blx	r5
  402920:	4883      	ldr	r0, [pc, #524]	; (402b30 <hif_handle_isr+0x2ac>)
  402922:	47a8      	blx	r5
  402924:	4881      	ldr	r0, [pc, #516]	; (402b2c <hif_handle_isr+0x2a8>)
  402926:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402928:	2001      	movs	r0, #1
  40292a:	4b82      	ldr	r3, [pc, #520]	; (402b34 <hif_handle_isr+0x2b0>)
  40292c:	4798      	blx	r3
  40292e:	e088      	b.n	402a42 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  402930:	f240 12df 	movw	r2, #479	; 0x1df
  402934:	4641      	mov	r1, r8
  402936:	4630      	mov	r0, r6
  402938:	4c7a      	ldr	r4, [pc, #488]	; (402b24 <hif_handle_isr+0x2a0>)
  40293a:	47a0      	blx	r4
  40293c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  402940:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402944:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402948:	9100      	str	r1, [sp, #0]
  40294a:	b292      	uxth	r2, r2
  40294c:	4629      	mov	r1, r5
  40294e:	487a      	ldr	r0, [pc, #488]	; (402b38 <hif_handle_isr+0x2b4>)
  402950:	47a0      	blx	r4
  402952:	4876      	ldr	r0, [pc, #472]	; (402b2c <hif_handle_isr+0x2a8>)
  402954:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402956:	2001      	movs	r0, #1
  402958:	4b76      	ldr	r3, [pc, #472]	; (402b34 <hif_handle_isr+0x2b0>)
  40295a:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  40295c:	f06f 0405 	mvn.w	r4, #5
  402960:	e06f      	b.n	402a42 <hif_handle_isr+0x1be>
						if(pfWifiCb)
  402962:	4b76      	ldr	r3, [pc, #472]	; (402b3c <hif_handle_isr+0x2b8>)
  402964:	681b      	ldr	r3, [r3, #0]
  402966:	b143      	cbz	r3, 40297a <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402968:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40296c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402970:	3908      	subs	r1, #8
  402972:	9a05      	ldr	r2, [sp, #20]
  402974:	3208      	adds	r2, #8
  402976:	b289      	uxth	r1, r1
  402978:	4798      	blx	r3
					if(!gu8HifSizeDone)
  40297a:	4b71      	ldr	r3, [pc, #452]	; (402b40 <hif_handle_isr+0x2bc>)
  40297c:	781b      	ldrb	r3, [r3, #0]
  40297e:	2b00      	cmp	r3, #0
  402980:	d15c      	bne.n	402a3c <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  402982:	f240 2209 	movw	r2, #521	; 0x209
  402986:	4641      	mov	r1, r8
  402988:	4630      	mov	r0, r6
  40298a:	4c66      	ldr	r4, [pc, #408]	; (402b24 <hif_handle_isr+0x2a0>)
  40298c:	47a0      	blx	r4
  40298e:	486d      	ldr	r0, [pc, #436]	; (402b44 <hif_handle_isr+0x2c0>)
  402990:	47a0      	blx	r4
  402992:	4866      	ldr	r0, [pc, #408]	; (402b2c <hif_handle_isr+0x2a8>)
  402994:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402996:	4b6c      	ldr	r3, [pc, #432]	; (402b48 <hif_handle_isr+0x2c4>)
  402998:	4798      	blx	r3
  40299a:	e04f      	b.n	402a3c <hif_handle_isr+0x1b8>
						if(pfIpCb)
  40299c:	4b6b      	ldr	r3, [pc, #428]	; (402b4c <hif_handle_isr+0x2c8>)
  40299e:	681b      	ldr	r3, [r3, #0]
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d0ea      	beq.n	40297a <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029a4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029a8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4029ac:	3908      	subs	r1, #8
  4029ae:	9a05      	ldr	r2, [sp, #20]
  4029b0:	3208      	adds	r2, #8
  4029b2:	b289      	uxth	r1, r1
  4029b4:	4798      	blx	r3
  4029b6:	e7e0      	b.n	40297a <hif_handle_isr+0xf6>
						if(pfOtaCb)
  4029b8:	4b65      	ldr	r3, [pc, #404]	; (402b50 <hif_handle_isr+0x2cc>)
  4029ba:	681b      	ldr	r3, [r3, #0]
  4029bc:	2b00      	cmp	r3, #0
  4029be:	d0dc      	beq.n	40297a <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029c0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029c4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4029c8:	3908      	subs	r1, #8
  4029ca:	9a05      	ldr	r2, [sp, #20]
  4029cc:	3208      	adds	r2, #8
  4029ce:	b289      	uxth	r1, r1
  4029d0:	4798      	blx	r3
  4029d2:	e7d2      	b.n	40297a <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  4029d4:	4b5f      	ldr	r3, [pc, #380]	; (402b54 <hif_handle_isr+0x2d0>)
  4029d6:	681b      	ldr	r3, [r3, #0]
  4029d8:	2b00      	cmp	r3, #0
  4029da:	d0ce      	beq.n	40297a <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029e0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4029e4:	3908      	subs	r1, #8
  4029e6:	9a05      	ldr	r2, [sp, #20]
  4029e8:	3208      	adds	r2, #8
  4029ea:	b289      	uxth	r1, r1
  4029ec:	4798      	blx	r3
  4029ee:	e7c4      	b.n	40297a <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  4029f0:	4b59      	ldr	r3, [pc, #356]	; (402b58 <hif_handle_isr+0x2d4>)
  4029f2:	681b      	ldr	r3, [r3, #0]
  4029f4:	2b00      	cmp	r3, #0
  4029f6:	d0c0      	beq.n	40297a <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029f8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029fc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a00:	3908      	subs	r1, #8
  402a02:	9a05      	ldr	r2, [sp, #20]
  402a04:	3208      	adds	r2, #8
  402a06:	b289      	uxth	r1, r1
  402a08:	4798      	blx	r3
  402a0a:	e7b6      	b.n	40297a <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402a0c:	f240 2211 	movw	r2, #529	; 0x211
  402a10:	4641      	mov	r1, r8
  402a12:	4630      	mov	r0, r6
  402a14:	4c43      	ldr	r4, [pc, #268]	; (402b24 <hif_handle_isr+0x2a0>)
  402a16:	47a0      	blx	r4
  402a18:	4850      	ldr	r0, [pc, #320]	; (402b5c <hif_handle_isr+0x2d8>)
  402a1a:	47a0      	blx	r4
  402a1c:	4843      	ldr	r0, [pc, #268]	; (402b2c <hif_handle_isr+0x2a8>)
  402a1e:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  402a20:	f06f 0401 	mvn.w	r4, #1
  402a24:	e02f      	b.n	402a86 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402a26:	f44f 7206 	mov.w	r2, #536	; 0x218
  402a2a:	4641      	mov	r1, r8
  402a2c:	4630      	mov	r0, r6
  402a2e:	4c3d      	ldr	r4, [pc, #244]	; (402b24 <hif_handle_isr+0x2a0>)
  402a30:	47a0      	blx	r4
  402a32:	9903      	ldr	r1, [sp, #12]
  402a34:	484a      	ldr	r0, [pc, #296]	; (402b60 <hif_handle_isr+0x2dc>)
  402a36:	47a0      	blx	r4
  402a38:	483c      	ldr	r0, [pc, #240]	; (402b2c <hif_handle_isr+0x2a8>)
  402a3a:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402a3c:	4b49      	ldr	r3, [pc, #292]	; (402b64 <hif_handle_isr+0x2e0>)
  402a3e:	4798      	blx	r3
  402a40:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  402a42:	bb04      	cbnz	r4, 402a86 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402a44:	f899 3000 	ldrb.w	r3, [r9]
  402a48:	2b00      	cmp	r3, #0
  402a4a:	f000 809f 	beq.w	402b8c <hif_handle_isr+0x308>
		gu8Interrupt--;
  402a4e:	f899 3000 	ldrb.w	r3, [r9]
  402a52:	3b01      	subs	r3, #1
  402a54:	b2db      	uxtb	r3, r3
  402a56:	f889 3000 	strb.w	r3, [r9]
  402a5a:	e01f      	b.n	402a9c <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402a5c:	f240 221e 	movw	r2, #542	; 0x21e
  402a60:	4641      	mov	r1, r8
  402a62:	4630      	mov	r0, r6
  402a64:	4d2f      	ldr	r5, [pc, #188]	; (402b24 <hif_handle_isr+0x2a0>)
  402a66:	47a8      	blx	r5
  402a68:	483f      	ldr	r0, [pc, #252]	; (402b68 <hif_handle_isr+0x2e4>)
  402a6a:	47a8      	blx	r5
  402a6c:	482f      	ldr	r0, [pc, #188]	; (402b2c <hif_handle_isr+0x2a8>)
  402a6e:	47a8      	blx	r5
  402a70:	e009      	b.n	402a86 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402a72:	f44f 7209 	mov.w	r2, #548	; 0x224
  402a76:	4641      	mov	r1, r8
  402a78:	4630      	mov	r0, r6
  402a7a:	4d2a      	ldr	r5, [pc, #168]	; (402b24 <hif_handle_isr+0x2a0>)
  402a7c:	47a8      	blx	r5
  402a7e:	483b      	ldr	r0, [pc, #236]	; (402b6c <hif_handle_isr+0x2e8>)
  402a80:	47a8      	blx	r5
  402a82:	482a      	ldr	r0, [pc, #168]	; (402b2c <hif_handle_isr+0x2a8>)
  402a84:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402a86:	f240 2243 	movw	r2, #579	; 0x243
  402a8a:	4939      	ldr	r1, [pc, #228]	; (402b70 <hif_handle_isr+0x2ec>)
  402a8c:	4630      	mov	r0, r6
  402a8e:	4d25      	ldr	r5, [pc, #148]	; (402b24 <hif_handle_isr+0x2a0>)
  402a90:	47a8      	blx	r5
  402a92:	4621      	mov	r1, r4
  402a94:	4837      	ldr	r0, [pc, #220]	; (402b74 <hif_handle_isr+0x2f0>)
  402a96:	47a8      	blx	r5
  402a98:	4824      	ldr	r0, [pc, #144]	; (402b2c <hif_handle_isr+0x2a8>)
  402a9a:	47a8      	blx	r5
	ret = hif_chip_wake();
  402a9c:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  402a9e:	4604      	mov	r4, r0
  402aa0:	2800      	cmp	r0, #0
  402aa2:	d1e6      	bne.n	402a72 <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  402aa4:	a903      	add	r1, sp, #12
  402aa6:	f241 0070 	movw	r0, #4208	; 0x1070
  402aaa:	4b33      	ldr	r3, [pc, #204]	; (402b78 <hif_handle_isr+0x2f4>)
  402aac:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  402aae:	4604      	mov	r4, r0
  402ab0:	2800      	cmp	r0, #0
  402ab2:	d1d3      	bne.n	402a5c <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  402ab4:	9b03      	ldr	r3, [sp, #12]
  402ab6:	f013 0f01 	tst.w	r3, #1
  402aba:	d0b4      	beq.n	402a26 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  402abc:	4b1d      	ldr	r3, [pc, #116]	; (402b34 <hif_handle_isr+0x2b0>)
  402abe:	4798      	blx	r3
				reg &= ~(1<<0);
  402ac0:	9903      	ldr	r1, [sp, #12]
  402ac2:	f021 0101 	bic.w	r1, r1, #1
  402ac6:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402ac8:	f241 0070 	movw	r0, #4208	; 0x1070
  402acc:	4b2b      	ldr	r3, [pc, #172]	; (402b7c <hif_handle_isr+0x2f8>)
  402ace:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  402ad0:	4604      	mov	r4, r0
  402ad2:	2800      	cmp	r0, #0
  402ad4:	d1d7      	bne.n	402a86 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  402ad6:	2200      	movs	r2, #0
  402ad8:	4b19      	ldr	r3, [pc, #100]	; (402b40 <hif_handle_isr+0x2bc>)
  402ada:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402adc:	9d03      	ldr	r5, [sp, #12]
  402ade:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  402ae2:	2d00      	cmp	r5, #0
  402ae4:	d092      	beq.n	402a0c <hif_handle_isr+0x188>
					uint32 address = 0;
  402ae6:	a906      	add	r1, sp, #24
  402ae8:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402aec:	f241 0084 	movw	r0, #4228	; 0x1084
  402af0:	4b21      	ldr	r3, [pc, #132]	; (402b78 <hif_handle_isr+0x2f4>)
  402af2:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402af4:	4604      	mov	r4, r0
  402af6:	2800      	cmp	r0, #0
  402af8:	f43f aece 	beq.w	402898 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402afc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  402b00:	4641      	mov	r1, r8
  402b02:	4630      	mov	r0, r6
  402b04:	4d07      	ldr	r5, [pc, #28]	; (402b24 <hif_handle_isr+0x2a0>)
  402b06:	47a8      	blx	r5
  402b08:	481d      	ldr	r0, [pc, #116]	; (402b80 <hif_handle_isr+0x2fc>)
  402b0a:	47a8      	blx	r5
  402b0c:	4807      	ldr	r0, [pc, #28]	; (402b2c <hif_handle_isr+0x2a8>)
  402b0e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402b10:	2001      	movs	r0, #1
  402b12:	4b08      	ldr	r3, [pc, #32]	; (402b34 <hif_handle_isr+0x2b0>)
  402b14:	4798      	blx	r3
  402b16:	e794      	b.n	402a42 <hif_handle_isr+0x1be>
  402b18:	004025bd 	.word	0x004025bd
  402b1c:	0040cae4 	.word	0x0040cae4
  402b20:	00403881 	.word	0x00403881
  402b24:	004060b9 	.word	0x004060b9
  402b28:	0040cbd4 	.word	0x0040cbd4
  402b2c:	0040cb10 	.word	0x0040cb10
  402b30:	0040cb7c 	.word	0x0040cb7c
  402b34:	004022d5 	.word	0x004022d5
  402b38:	0040cb94 	.word	0x0040cb94
  402b3c:	2040c350 	.word	0x2040c350
  402b40:	2040c33a 	.word	0x2040c33a
  402b44:	0040cbec 	.word	0x0040cbec
  402b48:	0040257d 	.word	0x0040257d
  402b4c:	2040c344 	.word	0x2040c344
  402b50:	2040c348 	.word	0x2040c348
  402b54:	2040c33c 	.word	0x2040c33c
  402b58:	2040c34c 	.word	0x2040c34c
  402b5c:	0040cc10 	.word	0x0040cc10
  402b60:	0040cc24 	.word	0x0040cc24
  402b64:	00402619 	.word	0x00402619
  402b68:	0040cc40 	.word	0x0040cc40
  402b6c:	0040cc64 	.word	0x0040cc64
  402b70:	0040cb28 	.word	0x0040cb28
  402b74:	0040cc84 	.word	0x0040cc84
  402b78:	00403869 	.word	0x00403869
  402b7c:	00403875 	.word	0x00403875
  402b80:	0040cb54 	.word	0x0040cb54
  402b84:	2040c33b 	.word	0x2040c33b
  402b88:	0040cb20 	.word	0x0040cb20
			}
		}
	}

	return ret;
}
  402b8c:	2000      	movs	r0, #0
  402b8e:	b007      	add	sp, #28
  402b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00402b94 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  402b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402b98:	b083      	sub	sp, #12
  402b9a:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  402b9c:	2a00      	cmp	r2, #0
  402b9e:	bf18      	it	ne
  402ba0:	2900      	cmpne	r1, #0
  402ba2:	d003      	beq.n	402bac <hif_receive+0x18>
  402ba4:	4605      	mov	r5, r0
  402ba6:	460f      	mov	r7, r1
  402ba8:	4616      	mov	r6, r2
  402baa:	b9b8      	cbnz	r0, 402bdc <hif_receive+0x48>
	{
		if(isDone)
  402bac:	b14c      	cbz	r4, 402bc2 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  402bae:	2201      	movs	r2, #1
  402bb0:	4b32      	ldr	r3, [pc, #200]	; (402c7c <hif_receive+0xe8>)
  402bb2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402bb4:	4b32      	ldr	r3, [pc, #200]	; (402c80 <hif_receive+0xec>)
  402bb6:	4798      	blx	r3
  402bb8:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402bba:	4618      	mov	r0, r3
  402bbc:	b003      	add	sp, #12
  402bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  402bc2:	f240 2269 	movw	r2, #617	; 0x269
  402bc6:	492f      	ldr	r1, [pc, #188]	; (402c84 <hif_receive+0xf0>)
  402bc8:	482f      	ldr	r0, [pc, #188]	; (402c88 <hif_receive+0xf4>)
  402bca:	4c30      	ldr	r4, [pc, #192]	; (402c8c <hif_receive+0xf8>)
  402bcc:	47a0      	blx	r4
  402bce:	4830      	ldr	r0, [pc, #192]	; (402c90 <hif_receive+0xfc>)
  402bd0:	47a0      	blx	r4
  402bd2:	4830      	ldr	r0, [pc, #192]	; (402c94 <hif_receive+0x100>)
  402bd4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402bd6:	f06f 030b 	mvn.w	r3, #11
  402bda:	e7ee      	b.n	402bba <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402bdc:	4669      	mov	r1, sp
  402bde:	f241 0070 	movw	r0, #4208	; 0x1070
  402be2:	4b2d      	ldr	r3, [pc, #180]	; (402c98 <hif_receive+0x104>)
  402be4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402be6:	4603      	mov	r3, r0
  402be8:	2800      	cmp	r0, #0
  402bea:	d1e6      	bne.n	402bba <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402bec:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  402bf0:	a901      	add	r1, sp, #4
  402bf2:	f241 0084 	movw	r0, #4228	; 0x1084
  402bf6:	4b28      	ldr	r3, [pc, #160]	; (402c98 <hif_receive+0x104>)
  402bf8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402bfa:	4603      	mov	r3, r0
  402bfc:	2800      	cmp	r0, #0
  402bfe:	d1dc      	bne.n	402bba <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402c00:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402c04:	4546      	cmp	r6, r8
  402c06:	d81c      	bhi.n	402c42 <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402c08:	9b01      	ldr	r3, [sp, #4]
  402c0a:	429d      	cmp	r5, r3
  402c0c:	d328      	bcc.n	402c60 <hif_receive+0xcc>
  402c0e:	eb05 0906 	add.w	r9, r5, r6
  402c12:	4443      	add	r3, r8
  402c14:	4599      	cmp	r9, r3
  402c16:	d823      	bhi.n	402c60 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402c18:	4632      	mov	r2, r6
  402c1a:	4639      	mov	r1, r7
  402c1c:	4628      	mov	r0, r5
  402c1e:	4b1f      	ldr	r3, [pc, #124]	; (402c9c <hif_receive+0x108>)
  402c20:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402c22:	4603      	mov	r3, r0
  402c24:	2800      	cmp	r0, #0
  402c26:	d1c8      	bne.n	402bba <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402c28:	9a01      	ldr	r2, [sp, #4]
  402c2a:	4490      	add	r8, r2
  402c2c:	45c8      	cmp	r8, r9
  402c2e:	d001      	beq.n	402c34 <hif_receive+0xa0>
  402c30:	2c00      	cmp	r4, #0
  402c32:	d0c2      	beq.n	402bba <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402c34:	2201      	movs	r2, #1
  402c36:	4b11      	ldr	r3, [pc, #68]	; (402c7c <hif_receive+0xe8>)
  402c38:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402c3a:	4b11      	ldr	r3, [pc, #68]	; (402c80 <hif_receive+0xec>)
  402c3c:	4798      	blx	r3
  402c3e:	4603      	mov	r3, r0
  402c40:	e7bb      	b.n	402bba <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  402c42:	f240 227a 	movw	r2, #634	; 0x27a
  402c46:	490f      	ldr	r1, [pc, #60]	; (402c84 <hif_receive+0xf0>)
  402c48:	480f      	ldr	r0, [pc, #60]	; (402c88 <hif_receive+0xf4>)
  402c4a:	4c10      	ldr	r4, [pc, #64]	; (402c8c <hif_receive+0xf8>)
  402c4c:	47a0      	blx	r4
  402c4e:	4642      	mov	r2, r8
  402c50:	4631      	mov	r1, r6
  402c52:	4813      	ldr	r0, [pc, #76]	; (402ca0 <hif_receive+0x10c>)
  402c54:	47a0      	blx	r4
  402c56:	480f      	ldr	r0, [pc, #60]	; (402c94 <hif_receive+0x100>)
  402c58:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402c5a:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402c5e:	e7ac      	b.n	402bba <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  402c60:	f44f 7220 	mov.w	r2, #640	; 0x280
  402c64:	4907      	ldr	r1, [pc, #28]	; (402c84 <hif_receive+0xf0>)
  402c66:	4808      	ldr	r0, [pc, #32]	; (402c88 <hif_receive+0xf4>)
  402c68:	4c08      	ldr	r4, [pc, #32]	; (402c8c <hif_receive+0xf8>)
  402c6a:	47a0      	blx	r4
  402c6c:	480d      	ldr	r0, [pc, #52]	; (402ca4 <hif_receive+0x110>)
  402c6e:	47a0      	blx	r4
  402c70:	4808      	ldr	r0, [pc, #32]	; (402c94 <hif_receive+0x100>)
  402c72:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402c74:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402c78:	e79f      	b.n	402bba <hif_receive+0x26>
  402c7a:	bf00      	nop
  402c7c:	2040c33a 	.word	0x2040c33a
  402c80:	0040257d 	.word	0x0040257d
  402c84:	0040cb38 	.word	0x0040cb38
  402c88:	0040cae4 	.word	0x0040cae4
  402c8c:	004060b9 	.word	0x004060b9
  402c90:	0040ccb4 	.word	0x0040ccb4
  402c94:	0040cb10 	.word	0x0040cb10
  402c98:	00403869 	.word	0x00403869
  402c9c:	00403881 	.word	0x00403881
  402ca0:	0040ccd4 	.word	0x0040ccd4
  402ca4:	0040cd18 	.word	0x0040cd18

00402ca8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  402ca8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  402caa:	1e43      	subs	r3, r0, #1
  402cac:	2b06      	cmp	r3, #6
  402cae:	d81d      	bhi.n	402cec <hif_register_cb+0x44>
  402cb0:	e8df f003 	tbb	[pc, r3]
  402cb4:	0c100408 	.word	0x0c100408
  402cb8:	141c      	.short	0x141c
  402cba:	18          	.byte	0x18
  402cbb:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402cbc:	4b13      	ldr	r3, [pc, #76]	; (402d0c <hif_register_cb+0x64>)
  402cbe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402cc0:	2000      	movs	r0, #0
			break;
  402cc2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402cc4:	4b12      	ldr	r3, [pc, #72]	; (402d10 <hif_register_cb+0x68>)
  402cc6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402cc8:	2000      	movs	r0, #0
			break;
  402cca:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402ccc:	4b11      	ldr	r3, [pc, #68]	; (402d14 <hif_register_cb+0x6c>)
  402cce:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402cd0:	2000      	movs	r0, #0
			break;
  402cd2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402cd4:	4b10      	ldr	r3, [pc, #64]	; (402d18 <hif_register_cb+0x70>)
  402cd6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402cd8:	2000      	movs	r0, #0
			break;
  402cda:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402cdc:	4b0f      	ldr	r3, [pc, #60]	; (402d1c <hif_register_cb+0x74>)
  402cde:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402ce0:	2000      	movs	r0, #0
			break;
  402ce2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402ce4:	4b0e      	ldr	r3, [pc, #56]	; (402d20 <hif_register_cb+0x78>)
  402ce6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402ce8:	2000      	movs	r0, #0
			break;
  402cea:	bd38      	pop	{r3, r4, r5, pc}
  402cec:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  402cee:	f240 22b9 	movw	r2, #697	; 0x2b9
  402cf2:	490c      	ldr	r1, [pc, #48]	; (402d24 <hif_register_cb+0x7c>)
  402cf4:	480c      	ldr	r0, [pc, #48]	; (402d28 <hif_register_cb+0x80>)
  402cf6:	4d0d      	ldr	r5, [pc, #52]	; (402d2c <hif_register_cb+0x84>)
  402cf8:	47a8      	blx	r5
  402cfa:	4621      	mov	r1, r4
  402cfc:	480c      	ldr	r0, [pc, #48]	; (402d30 <hif_register_cb+0x88>)
  402cfe:	47a8      	blx	r5
  402d00:	480c      	ldr	r0, [pc, #48]	; (402d34 <hif_register_cb+0x8c>)
  402d02:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402d04:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402d08:	bd38      	pop	{r3, r4, r5, pc}
  402d0a:	bf00      	nop
  402d0c:	2040c344 	.word	0x2040c344
  402d10:	2040c350 	.word	0x2040c350
  402d14:	2040c348 	.word	0x2040c348
  402d18:	2040c340 	.word	0x2040c340
  402d1c:	2040c33c 	.word	0x2040c33c
  402d20:	2040c34c 	.word	0x2040c34c
  402d24:	0040cb44 	.word	0x0040cb44
  402d28:	0040cae4 	.word	0x0040cae4
  402d2c:	004060b9 	.word	0x004060b9
  402d30:	0040cd5c 	.word	0x0040cd5c
  402d34:	0040cb10 	.word	0x0040cb10

00402d38 <hif_init>:
{
  402d38:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402d3a:	2400      	movs	r4, #0
  402d3c:	4b09      	ldr	r3, [pc, #36]	; (402d64 <hif_init+0x2c>)
  402d3e:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402d40:	4b09      	ldr	r3, [pc, #36]	; (402d68 <hif_init+0x30>)
  402d42:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402d44:	4b09      	ldr	r3, [pc, #36]	; (402d6c <hif_init+0x34>)
  402d46:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402d48:	4b09      	ldr	r3, [pc, #36]	; (402d70 <hif_init+0x38>)
  402d4a:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402d4c:	4b09      	ldr	r3, [pc, #36]	; (402d74 <hif_init+0x3c>)
  402d4e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402d50:	4809      	ldr	r0, [pc, #36]	; (402d78 <hif_init+0x40>)
  402d52:	4b0a      	ldr	r3, [pc, #40]	; (402d7c <hif_init+0x44>)
  402d54:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402d56:	490a      	ldr	r1, [pc, #40]	; (402d80 <hif_init+0x48>)
  402d58:	2003      	movs	r0, #3
  402d5a:	4b0a      	ldr	r3, [pc, #40]	; (402d84 <hif_init+0x4c>)
  402d5c:	4798      	blx	r3
}
  402d5e:	4620      	mov	r0, r4
  402d60:	bd10      	pop	{r4, pc}
  402d62:	bf00      	nop
  402d64:	2040c350 	.word	0x2040c350
  402d68:	2040c344 	.word	0x2040c344
  402d6c:	2040c339 	.word	0x2040c339
  402d70:	2040c338 	.word	0x2040c338
  402d74:	2040c33b 	.word	0x2040c33b
  402d78:	00402569 	.word	0x00402569
  402d7c:	00402245 	.word	0x00402245
  402d80:	00402579 	.word	0x00402579
  402d84:	00402ca9 	.word	0x00402ca9

00402d88 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402d88:	b530      	push	{r4, r5, lr}
  402d8a:	b09f      	sub	sp, #124	; 0x7c
  402d8c:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402d8e:	282c      	cmp	r0, #44	; 0x2c
  402d90:	d02e      	beq.n	402df0 <m2m_wifi_cb+0x68>
  402d92:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402d94:	281b      	cmp	r0, #27
  402d96:	d03b      	beq.n	402e10 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402d98:	2806      	cmp	r0, #6
  402d9a:	d049      	beq.n	402e30 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402d9c:	280e      	cmp	r0, #14
  402d9e:	d025      	beq.n	402dec <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402da0:	2832      	cmp	r0, #50	; 0x32
  402da2:	d055      	beq.n	402e50 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402da4:	282f      	cmp	r0, #47	; 0x2f
  402da6:	d063      	beq.n	402e70 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402da8:	2834      	cmp	r0, #52	; 0x34
  402daa:	d076      	beq.n	402e9a <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402dac:	2811      	cmp	r0, #17
  402dae:	f000 8093 	beq.w	402ed8 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402db2:	2813      	cmp	r0, #19
  402db4:	f000 80a8 	beq.w	402f08 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402db8:	2804      	cmp	r0, #4
  402dba:	f000 80b7 	beq.w	402f2c <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402dbe:	2865      	cmp	r0, #101	; 0x65
  402dc0:	f000 80c6 	beq.w	402f50 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402dc4:	2809      	cmp	r0, #9
  402dc6:	f000 80d5 	beq.w	402f74 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402dca:	282a      	cmp	r0, #42	; 0x2a
  402dcc:	f000 80e4 	beq.w	402f98 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402dd0:	2820      	cmp	r0, #32
  402dd2:	f000 80f3 	beq.w	402fbc <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402dd6:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402dda:	4986      	ldr	r1, [pc, #536]	; (402ff4 <m2m_wifi_cb+0x26c>)
  402ddc:	4886      	ldr	r0, [pc, #536]	; (402ff8 <m2m_wifi_cb+0x270>)
  402dde:	4d87      	ldr	r5, [pc, #540]	; (402ffc <m2m_wifi_cb+0x274>)
  402de0:	47a8      	blx	r5
  402de2:	4621      	mov	r1, r4
  402de4:	4886      	ldr	r0, [pc, #536]	; (403000 <m2m_wifi_cb+0x278>)
  402de6:	47a8      	blx	r5
  402de8:	4886      	ldr	r0, [pc, #536]	; (403004 <m2m_wifi_cb+0x27c>)
  402dea:	47a8      	blx	r5
	}
}
  402dec:	b01f      	add	sp, #124	; 0x7c
  402dee:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402df0:	2300      	movs	r3, #0
  402df2:	2204      	movs	r2, #4
  402df4:	a903      	add	r1, sp, #12
  402df6:	4628      	mov	r0, r5
  402df8:	4c83      	ldr	r4, [pc, #524]	; (403008 <m2m_wifi_cb+0x280>)
  402dfa:	47a0      	blx	r4
  402dfc:	2800      	cmp	r0, #0
  402dfe:	d1f5      	bne.n	402dec <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402e00:	4b82      	ldr	r3, [pc, #520]	; (40300c <m2m_wifi_cb+0x284>)
  402e02:	681b      	ldr	r3, [r3, #0]
  402e04:	2b00      	cmp	r3, #0
  402e06:	d0f1      	beq.n	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402e08:	a903      	add	r1, sp, #12
  402e0a:	202c      	movs	r0, #44	; 0x2c
  402e0c:	4798      	blx	r3
  402e0e:	e7ed      	b.n	402dec <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402e10:	2300      	movs	r3, #0
  402e12:	2208      	movs	r2, #8
  402e14:	a903      	add	r1, sp, #12
  402e16:	4628      	mov	r0, r5
  402e18:	4c7b      	ldr	r4, [pc, #492]	; (403008 <m2m_wifi_cb+0x280>)
  402e1a:	47a0      	blx	r4
  402e1c:	2800      	cmp	r0, #0
  402e1e:	d1e5      	bne.n	402dec <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402e20:	4b7a      	ldr	r3, [pc, #488]	; (40300c <m2m_wifi_cb+0x284>)
  402e22:	681b      	ldr	r3, [r3, #0]
  402e24:	2b00      	cmp	r3, #0
  402e26:	d0e1      	beq.n	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402e28:	a903      	add	r1, sp, #12
  402e2a:	201b      	movs	r0, #27
  402e2c:	4798      	blx	r3
  402e2e:	e7dd      	b.n	402dec <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402e30:	2301      	movs	r3, #1
  402e32:	2230      	movs	r2, #48	; 0x30
  402e34:	a903      	add	r1, sp, #12
  402e36:	4628      	mov	r0, r5
  402e38:	4c73      	ldr	r4, [pc, #460]	; (403008 <m2m_wifi_cb+0x280>)
  402e3a:	47a0      	blx	r4
  402e3c:	2800      	cmp	r0, #0
  402e3e:	d1d5      	bne.n	402dec <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402e40:	4b72      	ldr	r3, [pc, #456]	; (40300c <m2m_wifi_cb+0x284>)
  402e42:	681b      	ldr	r3, [r3, #0]
  402e44:	2b00      	cmp	r3, #0
  402e46:	d0d1      	beq.n	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402e48:	a903      	add	r1, sp, #12
  402e4a:	2006      	movs	r0, #6
  402e4c:	4798      	blx	r3
  402e4e:	e7cd      	b.n	402dec <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402e50:	2300      	movs	r3, #0
  402e52:	2210      	movs	r2, #16
  402e54:	a903      	add	r1, sp, #12
  402e56:	4628      	mov	r0, r5
  402e58:	4c6b      	ldr	r4, [pc, #428]	; (403008 <m2m_wifi_cb+0x280>)
  402e5a:	47a0      	blx	r4
  402e5c:	2800      	cmp	r0, #0
  402e5e:	d1c5      	bne.n	402dec <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402e60:	4b6a      	ldr	r3, [pc, #424]	; (40300c <m2m_wifi_cb+0x284>)
  402e62:	681b      	ldr	r3, [r3, #0]
  402e64:	2b00      	cmp	r3, #0
  402e66:	d0c1      	beq.n	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402e68:	a903      	add	r1, sp, #12
  402e6a:	2032      	movs	r0, #50	; 0x32
  402e6c:	4798      	blx	r3
  402e6e:	e7bd      	b.n	402dec <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402e70:	2264      	movs	r2, #100	; 0x64
  402e72:	2100      	movs	r1, #0
  402e74:	a803      	add	r0, sp, #12
  402e76:	4b66      	ldr	r3, [pc, #408]	; (403010 <m2m_wifi_cb+0x288>)
  402e78:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402e7a:	2300      	movs	r3, #0
  402e7c:	2264      	movs	r2, #100	; 0x64
  402e7e:	a903      	add	r1, sp, #12
  402e80:	4628      	mov	r0, r5
  402e82:	4c61      	ldr	r4, [pc, #388]	; (403008 <m2m_wifi_cb+0x280>)
  402e84:	47a0      	blx	r4
  402e86:	2800      	cmp	r0, #0
  402e88:	d1b0      	bne.n	402dec <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402e8a:	4b60      	ldr	r3, [pc, #384]	; (40300c <m2m_wifi_cb+0x284>)
  402e8c:	681b      	ldr	r3, [r3, #0]
  402e8e:	2b00      	cmp	r3, #0
  402e90:	d0ac      	beq.n	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402e92:	a903      	add	r1, sp, #12
  402e94:	202f      	movs	r0, #47	; 0x2f
  402e96:	4798      	blx	r3
  402e98:	e7a8      	b.n	402dec <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402e9a:	2300      	movs	r3, #0
  402e9c:	2204      	movs	r2, #4
  402e9e:	a903      	add	r1, sp, #12
  402ea0:	4628      	mov	r0, r5
  402ea2:	4c59      	ldr	r4, [pc, #356]	; (403008 <m2m_wifi_cb+0x280>)
  402ea4:	47a0      	blx	r4
  402ea6:	2800      	cmp	r0, #0
  402ea8:	d1a0      	bne.n	402dec <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402eaa:	485a      	ldr	r0, [pc, #360]	; (403014 <m2m_wifi_cb+0x28c>)
  402eac:	4c53      	ldr	r4, [pc, #332]	; (402ffc <m2m_wifi_cb+0x274>)
  402eae:	47a0      	blx	r4
  402eb0:	9903      	ldr	r1, [sp, #12]
  402eb2:	b2cb      	uxtb	r3, r1
  402eb4:	9300      	str	r3, [sp, #0]
  402eb6:	f3c1 2307 	ubfx	r3, r1, #8, #8
  402eba:	f3c1 4207 	ubfx	r2, r1, #16, #8
  402ebe:	0e09      	lsrs	r1, r1, #24
  402ec0:	4855      	ldr	r0, [pc, #340]	; (403018 <m2m_wifi_cb+0x290>)
  402ec2:	47a0      	blx	r4
  402ec4:	484f      	ldr	r0, [pc, #316]	; (403004 <m2m_wifi_cb+0x27c>)
  402ec6:	47a0      	blx	r4
			if (gpfAppWifiCb)
  402ec8:	4b50      	ldr	r3, [pc, #320]	; (40300c <m2m_wifi_cb+0x284>)
  402eca:	681b      	ldr	r3, [r3, #0]
  402ecc:	2b00      	cmp	r3, #0
  402ece:	d08d      	beq.n	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402ed0:	2100      	movs	r1, #0
  402ed2:	2034      	movs	r0, #52	; 0x34
  402ed4:	4798      	blx	r3
  402ed6:	e789      	b.n	402dec <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  402ed8:	2300      	movs	r3, #0
  402eda:	4a50      	ldr	r2, [pc, #320]	; (40301c <m2m_wifi_cb+0x294>)
  402edc:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402ede:	2204      	movs	r2, #4
  402ee0:	a903      	add	r1, sp, #12
  402ee2:	4628      	mov	r0, r5
  402ee4:	4c48      	ldr	r4, [pc, #288]	; (403008 <m2m_wifi_cb+0x280>)
  402ee6:	47a0      	blx	r4
  402ee8:	2800      	cmp	r0, #0
  402eea:	f47f af7f 	bne.w	402dec <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402eee:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402ef2:	4b4b      	ldr	r3, [pc, #300]	; (403020 <m2m_wifi_cb+0x298>)
  402ef4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402ef6:	4b45      	ldr	r3, [pc, #276]	; (40300c <m2m_wifi_cb+0x284>)
  402ef8:	681b      	ldr	r3, [r3, #0]
  402efa:	2b00      	cmp	r3, #0
  402efc:	f43f af76 	beq.w	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402f00:	a903      	add	r1, sp, #12
  402f02:	2011      	movs	r0, #17
  402f04:	4798      	blx	r3
  402f06:	e771      	b.n	402dec <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402f08:	2300      	movs	r3, #0
  402f0a:	222c      	movs	r2, #44	; 0x2c
  402f0c:	a903      	add	r1, sp, #12
  402f0e:	4628      	mov	r0, r5
  402f10:	4c3d      	ldr	r4, [pc, #244]	; (403008 <m2m_wifi_cb+0x280>)
  402f12:	47a0      	blx	r4
  402f14:	2800      	cmp	r0, #0
  402f16:	f47f af69 	bne.w	402dec <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f1a:	4b3c      	ldr	r3, [pc, #240]	; (40300c <m2m_wifi_cb+0x284>)
  402f1c:	681b      	ldr	r3, [r3, #0]
  402f1e:	2b00      	cmp	r3, #0
  402f20:	f43f af64 	beq.w	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  402f24:	a903      	add	r1, sp, #12
  402f26:	2013      	movs	r0, #19
  402f28:	4798      	blx	r3
  402f2a:	e75f      	b.n	402dec <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402f2c:	2300      	movs	r3, #0
  402f2e:	2204      	movs	r2, #4
  402f30:	a91c      	add	r1, sp, #112	; 0x70
  402f32:	4628      	mov	r0, r5
  402f34:	4c34      	ldr	r4, [pc, #208]	; (403008 <m2m_wifi_cb+0x280>)
  402f36:	47a0      	blx	r4
  402f38:	2800      	cmp	r0, #0
  402f3a:	f47f af57 	bne.w	402dec <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f3e:	4b33      	ldr	r3, [pc, #204]	; (40300c <m2m_wifi_cb+0x284>)
  402f40:	681b      	ldr	r3, [r3, #0]
  402f42:	2b00      	cmp	r3, #0
  402f44:	f43f af52 	beq.w	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  402f48:	a91c      	add	r1, sp, #112	; 0x70
  402f4a:	2004      	movs	r0, #4
  402f4c:	4798      	blx	r3
  402f4e:	e74d      	b.n	402dec <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402f50:	2300      	movs	r3, #0
  402f52:	2204      	movs	r2, #4
  402f54:	a91c      	add	r1, sp, #112	; 0x70
  402f56:	4628      	mov	r0, r5
  402f58:	4c2b      	ldr	r4, [pc, #172]	; (403008 <m2m_wifi_cb+0x280>)
  402f5a:	47a0      	blx	r4
  402f5c:	2800      	cmp	r0, #0
  402f5e:	f47f af45 	bne.w	402dec <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f62:	4b2a      	ldr	r3, [pc, #168]	; (40300c <m2m_wifi_cb+0x284>)
  402f64:	681b      	ldr	r3, [r3, #0]
  402f66:	2b00      	cmp	r3, #0
  402f68:	f43f af40 	beq.w	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  402f6c:	a91c      	add	r1, sp, #112	; 0x70
  402f6e:	2065      	movs	r0, #101	; 0x65
  402f70:	4798      	blx	r3
  402f72:	e73b      	b.n	402dec <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  402f74:	2301      	movs	r3, #1
  402f76:	2264      	movs	r2, #100	; 0x64
  402f78:	a903      	add	r1, sp, #12
  402f7a:	4628      	mov	r0, r5
  402f7c:	4c22      	ldr	r4, [pc, #136]	; (403008 <m2m_wifi_cb+0x280>)
  402f7e:	47a0      	blx	r4
  402f80:	2800      	cmp	r0, #0
  402f82:	f47f af33 	bne.w	402dec <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402f86:	4b21      	ldr	r3, [pc, #132]	; (40300c <m2m_wifi_cb+0x284>)
  402f88:	681b      	ldr	r3, [r3, #0]
  402f8a:	2b00      	cmp	r3, #0
  402f8c:	f43f af2e 	beq.w	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  402f90:	a903      	add	r1, sp, #12
  402f92:	2009      	movs	r0, #9
  402f94:	4798      	blx	r3
  402f96:	e729      	b.n	402dec <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  402f98:	2301      	movs	r3, #1
  402f9a:	2204      	movs	r2, #4
  402f9c:	a903      	add	r1, sp, #12
  402f9e:	4628      	mov	r0, r5
  402fa0:	4c19      	ldr	r4, [pc, #100]	; (403008 <m2m_wifi_cb+0x280>)
  402fa2:	47a0      	blx	r4
  402fa4:	2800      	cmp	r0, #0
  402fa6:	f47f af21 	bne.w	402dec <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402faa:	4b18      	ldr	r3, [pc, #96]	; (40300c <m2m_wifi_cb+0x284>)
  402fac:	681b      	ldr	r3, [r3, #0]
  402fae:	2b00      	cmp	r3, #0
  402fb0:	f43f af1c 	beq.w	402dec <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  402fb4:	a903      	add	r1, sp, #12
  402fb6:	202a      	movs	r0, #42	; 0x2a
  402fb8:	4798      	blx	r3
  402fba:	e717      	b.n	402dec <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  402fbc:	2300      	movs	r3, #0
  402fbe:	2208      	movs	r2, #8
  402fc0:	a903      	add	r1, sp, #12
  402fc2:	4628      	mov	r0, r5
  402fc4:	4c10      	ldr	r4, [pc, #64]	; (403008 <m2m_wifi_cb+0x280>)
  402fc6:	47a0      	blx	r4
  402fc8:	2800      	cmp	r0, #0
  402fca:	f47f af0f 	bne.w	402dec <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  402fce:	2301      	movs	r3, #1
  402fd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402fd4:	9903      	ldr	r1, [sp, #12]
  402fd6:	f105 0008 	add.w	r0, r5, #8
  402fda:	47a0      	blx	r4
  402fdc:	2800      	cmp	r0, #0
  402fde:	f47f af05 	bne.w	402dec <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  402fe2:	4b0a      	ldr	r3, [pc, #40]	; (40300c <m2m_wifi_cb+0x284>)
  402fe4:	681b      	ldr	r3, [r3, #0]
  402fe6:	2b00      	cmp	r3, #0
  402fe8:	f43f af00 	beq.w	402dec <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  402fec:	a903      	add	r1, sp, #12
  402fee:	2020      	movs	r0, #32
  402ff0:	4798      	blx	r3
  402ff2:	e6fb      	b.n	402dec <m2m_wifi_cb+0x64>
  402ff4:	0040cd88 	.word	0x0040cd88
  402ff8:	0040cae4 	.word	0x0040cae4
  402ffc:	004060b9 	.word	0x004060b9
  403000:	0040cde4 	.word	0x0040cde4
  403004:	0040cb10 	.word	0x0040cb10
  403008:	00402b95 	.word	0x00402b95
  40300c:	2040c354 	.word	0x2040c354
  403010:	00402541 	.word	0x00402541
  403014:	0040cdb8 	.word	0x0040cdb8
  403018:	0040cdc4 	.word	0x0040cdc4
  40301c:	2040c359 	.word	0x2040c359
  403020:	2040c358 	.word	0x2040c358

00403024 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  403024:	b5f0      	push	{r4, r5, r6, r7, lr}
  403026:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  403028:	2301      	movs	r3, #1
  40302a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  40302e:	2800      	cmp	r0, #0
  403030:	d050      	beq.n	4030d4 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  403032:	6802      	ldr	r2, [r0, #0]
  403034:	4b29      	ldr	r3, [pc, #164]	; (4030dc <m2m_wifi_init+0xb8>)
  403036:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  403038:	2200      	movs	r2, #0
  40303a:	4b29      	ldr	r3, [pc, #164]	; (4030e0 <m2m_wifi_init+0xbc>)
  40303c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  40303e:	f10d 0007 	add.w	r0, sp, #7
  403042:	4b28      	ldr	r3, [pc, #160]	; (4030e4 <m2m_wifi_init+0xc0>)
  403044:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  403046:	4604      	mov	r4, r0
  403048:	b110      	cbz	r0, 403050 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40304a:	4620      	mov	r0, r4
  40304c:	b00b      	add	sp, #44	; 0x2c
  40304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  403050:	4b25      	ldr	r3, [pc, #148]	; (4030e8 <m2m_wifi_init+0xc4>)
  403052:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  403054:	4604      	mov	r4, r0
  403056:	2800      	cmp	r0, #0
  403058:	d138      	bne.n	4030cc <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40305a:	4924      	ldr	r1, [pc, #144]	; (4030ec <m2m_wifi_init+0xc8>)
  40305c:	2001      	movs	r0, #1
  40305e:	4b24      	ldr	r3, [pc, #144]	; (4030f0 <m2m_wifi_init+0xcc>)
  403060:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  403062:	a802      	add	r0, sp, #8
  403064:	4b23      	ldr	r3, [pc, #140]	; (4030f4 <m2m_wifi_init+0xd0>)
  403066:	4798      	blx	r3
  403068:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40306a:	4f23      	ldr	r7, [pc, #140]	; (4030f8 <m2m_wifi_init+0xd4>)
  40306c:	4638      	mov	r0, r7
  40306e:	4d23      	ldr	r5, [pc, #140]	; (4030fc <m2m_wifi_init+0xd8>)
  403070:	47a8      	blx	r5
  403072:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403076:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40307a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40307e:	4820      	ldr	r0, [pc, #128]	; (403100 <m2m_wifi_init+0xdc>)
  403080:	47a8      	blx	r5
  403082:	4e20      	ldr	r6, [pc, #128]	; (403104 <m2m_wifi_init+0xe0>)
  403084:	4630      	mov	r0, r6
  403086:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  403088:	4638      	mov	r0, r7
  40308a:	47a8      	blx	r5
  40308c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  403090:	f89d 2010 	ldrb.w	r2, [sp, #16]
  403094:	f89d 100f 	ldrb.w	r1, [sp, #15]
  403098:	481b      	ldr	r0, [pc, #108]	; (403108 <m2m_wifi_init+0xe4>)
  40309a:	47a8      	blx	r5
  40309c:	4630      	mov	r0, r6
  40309e:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4030a0:	4638      	mov	r0, r7
  4030a2:	47a8      	blx	r5
  4030a4:	2300      	movs	r3, #0
  4030a6:	2203      	movs	r2, #3
  4030a8:	2113      	movs	r1, #19
  4030aa:	4818      	ldr	r0, [pc, #96]	; (40310c <m2m_wifi_init+0xe8>)
  4030ac:	47a8      	blx	r5
  4030ae:	4630      	mov	r0, r6
  4030b0:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4030b2:	f114 0f0d 	cmn.w	r4, #13
  4030b6:	d1c8      	bne.n	40304a <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  4030b8:	f240 12d5 	movw	r2, #469	; 0x1d5
  4030bc:	4914      	ldr	r1, [pc, #80]	; (403110 <m2m_wifi_init+0xec>)
  4030be:	4815      	ldr	r0, [pc, #84]	; (403114 <m2m_wifi_init+0xf0>)
  4030c0:	47a8      	blx	r5
  4030c2:	4815      	ldr	r0, [pc, #84]	; (403118 <m2m_wifi_init+0xf4>)
  4030c4:	47a8      	blx	r5
  4030c6:	4630      	mov	r0, r6
  4030c8:	47a8      	blx	r5
  4030ca:	e7be      	b.n	40304a <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  4030cc:	2000      	movs	r0, #0
  4030ce:	4b13      	ldr	r3, [pc, #76]	; (40311c <m2m_wifi_init+0xf8>)
  4030d0:	4798      	blx	r3
  4030d2:	e7ba      	b.n	40304a <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  4030d4:	f06f 040b 	mvn.w	r4, #11
  4030d8:	e7b7      	b.n	40304a <m2m_wifi_init+0x26>
  4030da:	bf00      	nop
  4030dc:	2040c354 	.word	0x2040c354
  4030e0:	2040c359 	.word	0x2040c359
  4030e4:	004039e9 	.word	0x004039e9
  4030e8:	00402d39 	.word	0x00402d39
  4030ec:	00402d89 	.word	0x00402d89
  4030f0:	00402ca9 	.word	0x00402ca9
  4030f4:	00403939 	.word	0x00403939
  4030f8:	0040cdb8 	.word	0x0040cdb8
  4030fc:	004060b9 	.word	0x004060b9
  403100:	0040cea4 	.word	0x0040cea4
  403104:	0040cb10 	.word	0x0040cb10
  403108:	0040cec0 	.word	0x0040cec0
  40310c:	0040cedc 	.word	0x0040cedc
  403110:	0040cd94 	.word	0x0040cd94
  403114:	0040cae4 	.word	0x0040cae4
  403118:	0040cef8 	.word	0x0040cef8
  40311c:	00403ab5 	.word	0x00403ab5

00403120 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  403120:	b508      	push	{r3, lr}
	return hif_handle_isr();
  403122:	4b01      	ldr	r3, [pc, #4]	; (403128 <m2m_wifi_handle_events+0x8>)
  403124:	4798      	blx	r3
}
  403126:	bd08      	pop	{r3, pc}
  403128:	00402885 	.word	0x00402885

0040312c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  40312c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403130:	b0a0      	sub	sp, #128	; 0x80
  403132:	4680      	mov	r8, r0
  403134:	460d      	mov	r5, r1
  403136:	4614      	mov	r4, r2
  403138:	461e      	mov	r6, r3
  40313a:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  40313e:	2a01      	cmp	r2, #1
  403140:	d003      	beq.n	40314a <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  403142:	2b00      	cmp	r3, #0
  403144:	d037      	beq.n	4031b6 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  403146:	2a02      	cmp	r2, #2
  403148:	d042      	beq.n	4031d0 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40314a:	1e6b      	subs	r3, r5, #1
  40314c:	b2db      	uxtb	r3, r3
  40314e:	2b1f      	cmp	r3, #31
  403150:	d875      	bhi.n	40323e <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  403152:	2fff      	cmp	r7, #255	; 0xff
  403154:	d001      	beq.n	40315a <m2m_wifi_connect_sc+0x2e>
  403156:	2f0d      	cmp	r7, #13
  403158:	d87e      	bhi.n	403258 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  40315a:	462a      	mov	r2, r5
  40315c:	4641      	mov	r1, r8
  40315e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  403162:	4b77      	ldr	r3, [pc, #476]	; (403340 <m2m_wifi_connect_sc+0x214>)
  403164:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  403166:	ab20      	add	r3, sp, #128	; 0x80
  403168:	441d      	add	r5, r3
  40316a:	2300      	movs	r3, #0
  40316c:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  403170:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  403174:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  403178:	3300      	adds	r3, #0
  40317a:	bf18      	it	ne
  40317c:	2301      	movne	r3, #1
  40317e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  403182:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  403186:	2c03      	cmp	r4, #3
  403188:	d073      	beq.n	403272 <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  40318a:	2c02      	cmp	r4, #2
  40318c:	f000 80aa 	beq.w	4032e4 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  403190:	2c04      	cmp	r4, #4
  403192:	f000 80c1 	beq.w	403318 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  403196:	2c01      	cmp	r4, #1
  403198:	f040 80c4 	bne.w	403324 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  40319c:	2300      	movs	r3, #0
  40319e:	9302      	str	r3, [sp, #8]
  4031a0:	9301      	str	r3, [sp, #4]
  4031a2:	9300      	str	r3, [sp, #0]
  4031a4:	236c      	movs	r3, #108	; 0x6c
  4031a6:	aa05      	add	r2, sp, #20
  4031a8:	2128      	movs	r1, #40	; 0x28
  4031aa:	2001      	movs	r0, #1
  4031ac:	4c65      	ldr	r4, [pc, #404]	; (403344 <m2m_wifi_connect_sc+0x218>)
  4031ae:	47a0      	blx	r4

ERR1:
	return ret;
}
  4031b0:	b020      	add	sp, #128	; 0x80
  4031b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  4031b6:	f240 2203 	movw	r2, #515	; 0x203
  4031ba:	4963      	ldr	r1, [pc, #396]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  4031bc:	4863      	ldr	r0, [pc, #396]	; (40334c <m2m_wifi_connect_sc+0x220>)
  4031be:	4c64      	ldr	r4, [pc, #400]	; (403350 <m2m_wifi_connect_sc+0x224>)
  4031c0:	47a0      	blx	r4
  4031c2:	4864      	ldr	r0, [pc, #400]	; (403354 <m2m_wifi_connect_sc+0x228>)
  4031c4:	47a0      	blx	r4
  4031c6:	4864      	ldr	r0, [pc, #400]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  4031c8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4031ca:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4031ce:	e7ef      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4031d0:	4618      	mov	r0, r3
  4031d2:	4b62      	ldr	r3, [pc, #392]	; (40335c <m2m_wifi_connect_sc+0x230>)
  4031d4:	4798      	blx	r3
  4031d6:	2840      	cmp	r0, #64	; 0x40
  4031d8:	d1b7      	bne.n	40314a <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  4031da:	7833      	ldrb	r3, [r6, #0]
  4031dc:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4031e0:	b2d2      	uxtb	r2, r2
  4031e2:	2a06      	cmp	r2, #6
  4031e4:	d91e      	bls.n	403224 <m2m_wifi_connect_sc+0xf8>
  4031e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4031ea:	b2d2      	uxtb	r2, r2
  4031ec:	2a36      	cmp	r2, #54	; 0x36
  4031ee:	d819      	bhi.n	403224 <m2m_wifi_connect_sc+0xf8>
  4031f0:	3b47      	subs	r3, #71	; 0x47
  4031f2:	b2db      	uxtb	r3, r3
  4031f4:	2b19      	cmp	r3, #25
  4031f6:	d915      	bls.n	403224 <m2m_wifi_connect_sc+0xf8>
  4031f8:	4631      	mov	r1, r6
  4031fa:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4031fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  403202:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  403206:	b2d2      	uxtb	r2, r2
  403208:	2a06      	cmp	r2, #6
  40320a:	d90b      	bls.n	403224 <m2m_wifi_connect_sc+0xf8>
  40320c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403210:	b2d2      	uxtb	r2, r2
  403212:	2a36      	cmp	r2, #54	; 0x36
  403214:	d806      	bhi.n	403224 <m2m_wifi_connect_sc+0xf8>
  403216:	3b47      	subs	r3, #71	; 0x47
  403218:	b2db      	uxtb	r3, r3
  40321a:	2b19      	cmp	r3, #25
  40321c:	d902      	bls.n	403224 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  40321e:	4288      	cmp	r0, r1
  403220:	d1ed      	bne.n	4031fe <m2m_wifi_connect_sc+0xd2>
  403222:	e792      	b.n	40314a <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  403224:	f240 220f 	movw	r2, #527	; 0x20f
  403228:	4947      	ldr	r1, [pc, #284]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  40322a:	4848      	ldr	r0, [pc, #288]	; (40334c <m2m_wifi_connect_sc+0x220>)
  40322c:	4c48      	ldr	r4, [pc, #288]	; (403350 <m2m_wifi_connect_sc+0x224>)
  40322e:	47a0      	blx	r4
  403230:	484b      	ldr	r0, [pc, #300]	; (403360 <m2m_wifi_connect_sc+0x234>)
  403232:	47a0      	blx	r4
  403234:	4848      	ldr	r0, [pc, #288]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  403236:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  403238:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40323c:	e7b8      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  40323e:	f240 2219 	movw	r2, #537	; 0x219
  403242:	4941      	ldr	r1, [pc, #260]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  403244:	4841      	ldr	r0, [pc, #260]	; (40334c <m2m_wifi_connect_sc+0x220>)
  403246:	4c42      	ldr	r4, [pc, #264]	; (403350 <m2m_wifi_connect_sc+0x224>)
  403248:	47a0      	blx	r4
  40324a:	4846      	ldr	r0, [pc, #280]	; (403364 <m2m_wifi_connect_sc+0x238>)
  40324c:	47a0      	blx	r4
  40324e:	4842      	ldr	r0, [pc, #264]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  403250:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403252:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  403256:	e7ab      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  403258:	f240 2222 	movw	r2, #546	; 0x222
  40325c:	493a      	ldr	r1, [pc, #232]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  40325e:	483b      	ldr	r0, [pc, #236]	; (40334c <m2m_wifi_connect_sc+0x220>)
  403260:	4c3b      	ldr	r4, [pc, #236]	; (403350 <m2m_wifi_connect_sc+0x224>)
  403262:	47a0      	blx	r4
  403264:	4840      	ldr	r0, [pc, #256]	; (403368 <m2m_wifi_connect_sc+0x23c>)
  403266:	47a0      	blx	r4
  403268:	483b      	ldr	r0, [pc, #236]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  40326a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40326c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403270:	e79e      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  403272:	7833      	ldrb	r3, [r6, #0]
  403274:	3b01      	subs	r3, #1
  403276:	b2db      	uxtb	r3, r3
  403278:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  40327c:	2b03      	cmp	r3, #3
  40327e:	d813      	bhi.n	4032a8 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  403280:	7872      	ldrb	r2, [r6, #1]
  403282:	1e53      	subs	r3, r2, #1
  403284:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  403288:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40328c:	2b0b      	cmp	r3, #11
  40328e:	d11a      	bne.n	4032c6 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  403290:	1cb1      	adds	r1, r6, #2
  403292:	f10d 0016 	add.w	r0, sp, #22
  403296:	4b2a      	ldr	r3, [pc, #168]	; (403340 <m2m_wifi_connect_sc+0x214>)
  403298:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40329a:	7873      	ldrb	r3, [r6, #1]
  40329c:	aa20      	add	r2, sp, #128	; 0x80
  40329e:	4413      	add	r3, r2
  4032a0:	2200      	movs	r2, #0
  4032a2:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4032a6:	e779      	b.n	40319c <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4032a8:	f240 2239 	movw	r2, #569	; 0x239
  4032ac:	4926      	ldr	r1, [pc, #152]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  4032ae:	4827      	ldr	r0, [pc, #156]	; (40334c <m2m_wifi_connect_sc+0x220>)
  4032b0:	4c27      	ldr	r4, [pc, #156]	; (403350 <m2m_wifi_connect_sc+0x224>)
  4032b2:	47a0      	blx	r4
  4032b4:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4032b8:	482c      	ldr	r0, [pc, #176]	; (40336c <m2m_wifi_connect_sc+0x240>)
  4032ba:	47a0      	blx	r4
  4032bc:	4826      	ldr	r0, [pc, #152]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  4032be:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4032c0:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4032c4:	e774      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4032c6:	f44f 7210 	mov.w	r2, #576	; 0x240
  4032ca:	491f      	ldr	r1, [pc, #124]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  4032cc:	481f      	ldr	r0, [pc, #124]	; (40334c <m2m_wifi_connect_sc+0x220>)
  4032ce:	4c20      	ldr	r4, [pc, #128]	; (403350 <m2m_wifi_connect_sc+0x224>)
  4032d0:	47a0      	blx	r4
  4032d2:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4032d6:	4826      	ldr	r0, [pc, #152]	; (403370 <m2m_wifi_connect_sc+0x244>)
  4032d8:	47a0      	blx	r4
  4032da:	481f      	ldr	r0, [pc, #124]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  4032dc:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4032de:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4032e2:	e765      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4032e4:	4630      	mov	r0, r6
  4032e6:	4b1d      	ldr	r3, [pc, #116]	; (40335c <m2m_wifi_connect_sc+0x230>)
  4032e8:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4032ea:	1e43      	subs	r3, r0, #1
  4032ec:	b29b      	uxth	r3, r3
  4032ee:	2b3f      	cmp	r3, #63	; 0x3f
  4032f0:	d805      	bhi.n	4032fe <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4032f2:	1c42      	adds	r2, r0, #1
  4032f4:	4631      	mov	r1, r6
  4032f6:	a805      	add	r0, sp, #20
  4032f8:	4b11      	ldr	r3, [pc, #68]	; (403340 <m2m_wifi_connect_sc+0x214>)
  4032fa:	4798      	blx	r3
  4032fc:	e74e      	b.n	40319c <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  4032fe:	f240 224f 	movw	r2, #591	; 0x24f
  403302:	4911      	ldr	r1, [pc, #68]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  403304:	4811      	ldr	r0, [pc, #68]	; (40334c <m2m_wifi_connect_sc+0x220>)
  403306:	4c12      	ldr	r4, [pc, #72]	; (403350 <m2m_wifi_connect_sc+0x224>)
  403308:	47a0      	blx	r4
  40330a:	481a      	ldr	r0, [pc, #104]	; (403374 <m2m_wifi_connect_sc+0x248>)
  40330c:	47a0      	blx	r4
  40330e:	4812      	ldr	r0, [pc, #72]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  403310:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403312:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403316:	e74b      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  403318:	223e      	movs	r2, #62	; 0x3e
  40331a:	4631      	mov	r1, r6
  40331c:	a805      	add	r0, sp, #20
  40331e:	4b08      	ldr	r3, [pc, #32]	; (403340 <m2m_wifi_connect_sc+0x214>)
  403320:	4798      	blx	r3
  403322:	e73b      	b.n	40319c <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  403324:	f240 225f 	movw	r2, #607	; 0x25f
  403328:	4907      	ldr	r1, [pc, #28]	; (403348 <m2m_wifi_connect_sc+0x21c>)
  40332a:	4808      	ldr	r0, [pc, #32]	; (40334c <m2m_wifi_connect_sc+0x220>)
  40332c:	4c08      	ldr	r4, [pc, #32]	; (403350 <m2m_wifi_connect_sc+0x224>)
  40332e:	47a0      	blx	r4
  403330:	4811      	ldr	r0, [pc, #68]	; (403378 <m2m_wifi_connect_sc+0x24c>)
  403332:	47a0      	blx	r4
  403334:	4808      	ldr	r0, [pc, #32]	; (403358 <m2m_wifi_connect_sc+0x22c>)
  403336:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403338:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40333c:	e738      	b.n	4031b0 <m2m_wifi_connect_sc+0x84>
  40333e:	bf00      	nop
  403340:	0040252d 	.word	0x0040252d
  403344:	004026a5 	.word	0x004026a5
  403348:	0040cda4 	.word	0x0040cda4
  40334c:	0040cae4 	.word	0x0040cae4
  403350:	004060b9 	.word	0x004060b9
  403354:	0040cdf8 	.word	0x0040cdf8
  403358:	0040cb10 	.word	0x0040cb10
  40335c:	0040254f 	.word	0x0040254f
  403360:	0040ce0c 	.word	0x0040ce0c
  403364:	0040ce1c 	.word	0x0040ce1c
  403368:	0040ce30 	.word	0x0040ce30
  40336c:	0040ce3c 	.word	0x0040ce3c
  403370:	0040ce58 	.word	0x0040ce58
  403374:	0040ce74 	.word	0x0040ce74
  403378:	0040ce90 	.word	0x0040ce90

0040337c <m2m_wifi_connect>:
{
  40337c:	b510      	push	{r4, lr}
  40337e:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  403380:	2400      	movs	r4, #0
  403382:	9401      	str	r4, [sp, #4]
  403384:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  403388:	9400      	str	r4, [sp, #0]
  40338a:	4c02      	ldr	r4, [pc, #8]	; (403394 <m2m_wifi_connect+0x18>)
  40338c:	47a0      	blx	r4
}
  40338e:	b002      	add	sp, #8
  403390:	bd10      	pop	{r4, pc}
  403392:	bf00      	nop
  403394:	0040312d 	.word	0x0040312d

00403398 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  403398:	2000      	movs	r0, #0
  40339a:	4770      	bx	lr

0040339c <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  40339c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40339e:	b083      	sub	sp, #12
  4033a0:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4033a2:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4033a6:	4e0a      	ldr	r6, [pc, #40]	; (4033d0 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4033a8:	4f0a      	ldr	r7, [pc, #40]	; (4033d4 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4033aa:	4621      	mov	r1, r4
  4033ac:	4628      	mov	r0, r5
  4033ae:	47b0      	blx	r6
		if(val32 != 0) {		
  4033b0:	b154      	cbz	r4, 4033c8 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4033b2:	a902      	add	r1, sp, #8
  4033b4:	2300      	movs	r3, #0
  4033b6:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4033ba:	4628      	mov	r0, r5
  4033bc:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4033be:	2800      	cmp	r0, #0
  4033c0:	d1f3      	bne.n	4033aa <chip_apply_conf+0xe>
				if(reg == val32)
  4033c2:	9b01      	ldr	r3, [sp, #4]
  4033c4:	429c      	cmp	r4, r3
  4033c6:	d1f0      	bne.n	4033aa <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4033c8:	2000      	movs	r0, #0
  4033ca:	b003      	add	sp, #12
  4033cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033ce:	bf00      	nop
  4033d0:	00403875 	.word	0x00403875
  4033d4:	00403869 	.word	0x00403869

004033d8 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4033d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033dc:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4033de:	2001      	movs	r0, #1
  4033e0:	4b3c      	ldr	r3, [pc, #240]	; (4034d4 <nm_clkless_wake+0xfc>)
  4033e2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4033e4:	a901      	add	r1, sp, #4
  4033e6:	2001      	movs	r0, #1
  4033e8:	4b3b      	ldr	r3, [pc, #236]	; (4034d8 <nm_clkless_wake+0x100>)
  4033ea:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4033ec:	4682      	mov	sl, r0
  4033ee:	b938      	cbnz	r0, 403400 <nm_clkless_wake+0x28>
  4033f0:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4033f2:	f04f 0801 	mov.w	r8, #1
  4033f6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 403500 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4033fa:	4d36      	ldr	r5, [pc, #216]	; (4034d4 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4033fc:	4f37      	ldr	r7, [pc, #220]	; (4034dc <nm_clkless_wake+0x104>)
  4033fe:	e020      	b.n	403442 <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  403400:	2272      	movs	r2, #114	; 0x72
  403402:	4937      	ldr	r1, [pc, #220]	; (4034e0 <nm_clkless_wake+0x108>)
  403404:	4837      	ldr	r0, [pc, #220]	; (4034e4 <nm_clkless_wake+0x10c>)
  403406:	4c38      	ldr	r4, [pc, #224]	; (4034e8 <nm_clkless_wake+0x110>)
  403408:	47a0      	blx	r4
  40340a:	4838      	ldr	r0, [pc, #224]	; (4034ec <nm_clkless_wake+0x114>)
  40340c:	47a0      	blx	r4
  40340e:	4838      	ldr	r0, [pc, #224]	; (4034f0 <nm_clkless_wake+0x118>)
  403410:	47a0      	blx	r4
		goto _WAKE_EXIT;
  403412:	e009      	b.n	403428 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  403414:	2296      	movs	r2, #150	; 0x96
  403416:	4932      	ldr	r1, [pc, #200]	; (4034e0 <nm_clkless_wake+0x108>)
  403418:	4832      	ldr	r0, [pc, #200]	; (4034e4 <nm_clkless_wake+0x10c>)
  40341a:	4c33      	ldr	r4, [pc, #204]	; (4034e8 <nm_clkless_wake+0x110>)
  40341c:	47a0      	blx	r4
  40341e:	4835      	ldr	r0, [pc, #212]	; (4034f4 <nm_clkless_wake+0x11c>)
  403420:	47a0      	blx	r4
  403422:	4833      	ldr	r0, [pc, #204]	; (4034f0 <nm_clkless_wake+0x118>)
  403424:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403426:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  403428:	4650      	mov	r0, sl
  40342a:	b003      	add	sp, #12
  40342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  403430:	9901      	ldr	r1, [sp, #4]
  403432:	f041 0102 	orr.w	r1, r1, #2
  403436:	4640      	mov	r0, r8
  403438:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  40343a:	9b00      	ldr	r3, [sp, #0]
  40343c:	f013 0f04 	tst.w	r3, #4
  403440:	d1f2      	bne.n	403428 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  403442:	9901      	ldr	r1, [sp, #4]
  403444:	f041 0102 	orr.w	r1, r1, #2
  403448:	4640      	mov	r0, r8
  40344a:	47c8      	blx	r9
		nm_bsp_sleep(1);
  40344c:	4640      	mov	r0, r8
  40344e:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403450:	4669      	mov	r1, sp
  403452:	4b29      	ldr	r3, [pc, #164]	; (4034f8 <nm_clkless_wake+0x120>)
  403454:	6818      	ldr	r0, [r3, #0]
  403456:	4b20      	ldr	r3, [pc, #128]	; (4034d8 <nm_clkless_wake+0x100>)
  403458:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40345a:	b908      	cbnz	r0, 403460 <nm_clkless_wake+0x88>
  40345c:	9b00      	ldr	r3, [sp, #0]
  40345e:	b9bb      	cbnz	r3, 403490 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  403460:	4e25      	ldr	r6, [pc, #148]	; (4034f8 <nm_clkless_wake+0x120>)
  403462:	230e      	movs	r3, #14
  403464:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  403466:	4640      	mov	r0, r8
  403468:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40346a:	4669      	mov	r1, sp
  40346c:	6830      	ldr	r0, [r6, #0]
  40346e:	4b1a      	ldr	r3, [pc, #104]	; (4034d8 <nm_clkless_wake+0x100>)
  403470:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  403472:	b908      	cbnz	r0, 403478 <nm_clkless_wake+0xa0>
  403474:	9b00      	ldr	r3, [sp, #0]
  403476:	b95b      	cbnz	r3, 403490 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  403478:	4e1f      	ldr	r6, [pc, #124]	; (4034f8 <nm_clkless_wake+0x120>)
  40347a:	2313      	movs	r3, #19
  40347c:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  40347e:	4640      	mov	r0, r8
  403480:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403482:	4669      	mov	r1, sp
  403484:	6830      	ldr	r0, [r6, #0]
  403486:	4b14      	ldr	r3, [pc, #80]	; (4034d8 <nm_clkless_wake+0x100>)
  403488:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40348a:	4606      	mov	r6, r0
  40348c:	2800      	cmp	r0, #0
  40348e:	d1c1      	bne.n	403414 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403490:	4e19      	ldr	r6, [pc, #100]	; (4034f8 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403492:	9b00      	ldr	r3, [sp, #0]
  403494:	f013 0f04 	tst.w	r3, #4
  403498:	d1c6      	bne.n	403428 <nm_clkless_wake+0x50>
  40349a:	3401      	adds	r4, #1
  40349c:	fba7 2304 	umull	r2, r3, r7, r4
  4034a0:	085b      	lsrs	r3, r3, #1
  4034a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4034a6:	429c      	cmp	r4, r3
  4034a8:	d1c2      	bne.n	403430 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4034aa:	2002      	movs	r0, #2
  4034ac:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4034ae:	4669      	mov	r1, sp
  4034b0:	6830      	ldr	r0, [r6, #0]
  4034b2:	4b09      	ldr	r3, [pc, #36]	; (4034d8 <nm_clkless_wake+0x100>)
  4034b4:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4034b6:	9b00      	ldr	r3, [sp, #0]
  4034b8:	f013 0f04 	tst.w	r3, #4
  4034bc:	d1e9      	bne.n	403492 <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4034be:	22aa      	movs	r2, #170	; 0xaa
  4034c0:	4907      	ldr	r1, [pc, #28]	; (4034e0 <nm_clkless_wake+0x108>)
  4034c2:	4808      	ldr	r0, [pc, #32]	; (4034e4 <nm_clkless_wake+0x10c>)
  4034c4:	f8df b020 	ldr.w	fp, [pc, #32]	; 4034e8 <nm_clkless_wake+0x110>
  4034c8:	47d8      	blx	fp
  4034ca:	480c      	ldr	r0, [pc, #48]	; (4034fc <nm_clkless_wake+0x124>)
  4034cc:	47d8      	blx	fp
  4034ce:	4808      	ldr	r0, [pc, #32]	; (4034f0 <nm_clkless_wake+0x118>)
  4034d0:	47d8      	blx	fp
  4034d2:	e7de      	b.n	403492 <nm_clkless_wake+0xba>
  4034d4:	00402179 	.word	0x00402179
  4034d8:	00403869 	.word	0x00403869
  4034dc:	aaaaaaab 	.word	0xaaaaaaab
  4034e0:	0040cf14 	.word	0x0040cf14
  4034e4:	0040cae4 	.word	0x0040cae4
  4034e8:	004060b9 	.word	0x004060b9
  4034ec:	0040cf84 	.word	0x0040cf84
  4034f0:	0040cb10 	.word	0x0040cb10
  4034f4:	0040cfa4 	.word	0x0040cfa4
  4034f8:	20400014 	.word	0x20400014
  4034fc:	0040cfc4 	.word	0x0040cfc4
  403500:	00403875 	.word	0x00403875

00403504 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  403504:	b500      	push	{lr}
  403506:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403508:	a901      	add	r1, sp, #4
  40350a:	f241 4008 	movw	r0, #5128	; 0x1408
  40350e:	4b15      	ldr	r3, [pc, #84]	; (403564 <enable_interrupts+0x60>)
  403510:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403512:	b9e8      	cbnz	r0, 403550 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  403514:	9901      	ldr	r1, [sp, #4]
  403516:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  40351a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  40351c:	f241 4008 	movw	r0, #5128	; 0x1408
  403520:	4b11      	ldr	r3, [pc, #68]	; (403568 <enable_interrupts+0x64>)
  403522:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403524:	b9b8      	cbnz	r0, 403556 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403526:	a901      	add	r1, sp, #4
  403528:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40352c:	4b0d      	ldr	r3, [pc, #52]	; (403564 <enable_interrupts+0x60>)
  40352e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403530:	b9a0      	cbnz	r0, 40355c <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  403532:	9901      	ldr	r1, [sp, #4]
  403534:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403538:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  40353a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40353e:	4b0a      	ldr	r3, [pc, #40]	; (403568 <enable_interrupts+0x64>)
  403540:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403542:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403544:	bf18      	it	ne
  403546:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  40354a:	b003      	add	sp, #12
  40354c:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  403550:	f06f 0005 	mvn.w	r0, #5
  403554:	e7f9      	b.n	40354a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403556:	f06f 0005 	mvn.w	r0, #5
  40355a:	e7f6      	b.n	40354a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40355c:	f06f 0005 	mvn.w	r0, #5
  403560:	e7f3      	b.n	40354a <enable_interrupts+0x46>
  403562:	bf00      	nop
  403564:	00403869 	.word	0x00403869
  403568:	00403875 	.word	0x00403875

0040356c <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  40356c:	b510      	push	{r4, lr}
  40356e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  403570:	4b25      	ldr	r3, [pc, #148]	; (403608 <nmi_get_chipid+0x9c>)
  403572:	681c      	ldr	r4, [r3, #0]
  403574:	b124      	cbz	r4, 403580 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  403576:	4b24      	ldr	r3, [pc, #144]	; (403608 <nmi_get_chipid+0x9c>)
  403578:	681c      	ldr	r4, [r3, #0]
}
  40357a:	4620      	mov	r0, r4
  40357c:	b002      	add	sp, #8
  40357e:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  403580:	4619      	mov	r1, r3
  403582:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403586:	4b21      	ldr	r3, [pc, #132]	; (40360c <nmi_get_chipid+0xa0>)
  403588:	4798      	blx	r3
  40358a:	b118      	cbz	r0, 403594 <nmi_get_chipid+0x28>
			chipid = 0;
  40358c:	2200      	movs	r2, #0
  40358e:	4b1e      	ldr	r3, [pc, #120]	; (403608 <nmi_get_chipid+0x9c>)
  403590:	601a      	str	r2, [r3, #0]
			return 0;
  403592:	e7f2      	b.n	40357a <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  403594:	a901      	add	r1, sp, #4
  403596:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40359a:	4b1c      	ldr	r3, [pc, #112]	; (40360c <nmi_get_chipid+0xa0>)
  40359c:	4798      	blx	r3
  40359e:	b118      	cbz	r0, 4035a8 <nmi_get_chipid+0x3c>
			chipid = 0;
  4035a0:	2200      	movs	r2, #0
  4035a2:	4b19      	ldr	r3, [pc, #100]	; (403608 <nmi_get_chipid+0x9c>)
  4035a4:	601a      	str	r2, [r3, #0]
			return 0;
  4035a6:	e7e8      	b.n	40357a <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4035a8:	4b17      	ldr	r3, [pc, #92]	; (403608 <nmi_get_chipid+0x9c>)
  4035aa:	681b      	ldr	r3, [r3, #0]
  4035ac:	4a18      	ldr	r2, [pc, #96]	; (403610 <nmi_get_chipid+0xa4>)
  4035ae:	4293      	cmp	r3, r2
  4035b0:	d00d      	beq.n	4035ce <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4035b2:	4a18      	ldr	r2, [pc, #96]	; (403614 <nmi_get_chipid+0xa8>)
  4035b4:	4293      	cmp	r3, r2
  4035b6:	d011      	beq.n	4035dc <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4035b8:	4a17      	ldr	r2, [pc, #92]	; (403618 <nmi_get_chipid+0xac>)
  4035ba:	4293      	cmp	r3, r2
  4035bc:	d018      	beq.n	4035f0 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4035be:	4a12      	ldr	r2, [pc, #72]	; (403608 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4035c0:	6813      	ldr	r3, [r2, #0]
  4035c2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4035c6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4035ca:	6013      	str	r3, [r2, #0]
  4035cc:	e7d3      	b.n	403576 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4035ce:	9b01      	ldr	r3, [sp, #4]
  4035d0:	2b01      	cmp	r3, #1
  4035d2:	d0f4      	beq.n	4035be <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4035d4:	3201      	adds	r2, #1
  4035d6:	4b0c      	ldr	r3, [pc, #48]	; (403608 <nmi_get_chipid+0x9c>)
  4035d8:	601a      	str	r2, [r3, #0]
  4035da:	e7f0      	b.n	4035be <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4035dc:	9b01      	ldr	r3, [sp, #4]
  4035de:	2b03      	cmp	r3, #3
  4035e0:	d0ed      	beq.n	4035be <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4035e2:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4035e4:	bf0c      	ite	eq
  4035e6:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  4035e8:	4a0c      	ldrne	r2, [pc, #48]	; (40361c <nmi_get_chipid+0xb0>)
  4035ea:	4b07      	ldr	r3, [pc, #28]	; (403608 <nmi_get_chipid+0x9c>)
  4035ec:	601a      	str	r2, [r3, #0]
  4035ee:	e7e6      	b.n	4035be <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4035f0:	4905      	ldr	r1, [pc, #20]	; (403608 <nmi_get_chipid+0x9c>)
  4035f2:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4035f6:	4b05      	ldr	r3, [pc, #20]	; (40360c <nmi_get_chipid+0xa0>)
  4035f8:	4798      	blx	r3
  4035fa:	2800      	cmp	r0, #0
  4035fc:	d0df      	beq.n	4035be <nmi_get_chipid+0x52>
			chipid = 0;
  4035fe:	2200      	movs	r2, #0
  403600:	4b01      	ldr	r3, [pc, #4]	; (403608 <nmi_get_chipid+0x9c>)
  403602:	601a      	str	r2, [r3, #0]
			return 0;
  403604:	e7b9      	b.n	40357a <nmi_get_chipid+0xe>
  403606:	bf00      	nop
  403608:	2040c35c 	.word	0x2040c35c
  40360c:	00403869 	.word	0x00403869
  403610:	001002a0 	.word	0x001002a0
  403614:	001002b0 	.word	0x001002b0
  403618:	001000f0 	.word	0x001000f0
  40361c:	001002b2 	.word	0x001002b2

00403620 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  403620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403624:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403626:	f241 0514 	movw	r5, #4116	; 0x1014
  40362a:	4c28      	ldr	r4, [pc, #160]	; (4036cc <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40362c:	4e28      	ldr	r6, [pc, #160]	; (4036d0 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40362e:	4628      	mov	r0, r5
  403630:	47a0      	blx	r4
		if (reg & 0x80000000) {
  403632:	2800      	cmp	r0, #0
  403634:	db02      	blt.n	40363c <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403636:	2001      	movs	r0, #1
  403638:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40363a:	e7f8      	b.n	40362e <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  40363c:	4825      	ldr	r0, [pc, #148]	; (4036d4 <wait_for_bootrom+0xb4>)
  40363e:	4b23      	ldr	r3, [pc, #140]	; (4036cc <wait_for_bootrom+0xac>)
  403640:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  403642:	f010 0f01 	tst.w	r0, #1
  403646:	d110      	bne.n	40366a <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403648:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4036d0 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  40364c:	4e1f      	ldr	r6, [pc, #124]	; (4036cc <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40364e:	4d22      	ldr	r5, [pc, #136]	; (4036d8 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  403650:	2001      	movs	r0, #1
  403652:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  403654:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403658:	47b0      	blx	r6
  40365a:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40365c:	462a      	mov	r2, r5
  40365e:	4601      	mov	r1, r0
  403660:	481e      	ldr	r0, [pc, #120]	; (4036dc <wait_for_bootrom+0xbc>)
  403662:	4b1f      	ldr	r3, [pc, #124]	; (4036e0 <wait_for_bootrom+0xc0>)
  403664:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  403666:	42ac      	cmp	r4, r5
  403668:	d1f2      	bne.n	403650 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  40366a:	2f02      	cmp	r7, #2
  40366c:	d019      	beq.n	4036a2 <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40366e:	2f03      	cmp	r7, #3
  403670:	d022      	beq.n	4036b8 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  403672:	2f04      	cmp	r7, #4
  403674:	bf14      	ite	ne
  403676:	2400      	movne	r4, #0
  403678:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  40367a:	4b1a      	ldr	r3, [pc, #104]	; (4036e4 <wait_for_bootrom+0xc4>)
  40367c:	4798      	blx	r3
  40367e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403682:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  403686:	bf0c      	ite	eq
  403688:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  40368c:	4620      	movne	r0, r4
  40368e:	4b16      	ldr	r3, [pc, #88]	; (4036e8 <wait_for_bootrom+0xc8>)
  403690:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  403692:	4916      	ldr	r1, [pc, #88]	; (4036ec <wait_for_bootrom+0xcc>)
  403694:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403698:	4b15      	ldr	r3, [pc, #84]	; (4036f0 <wait_for_bootrom+0xd0>)
  40369a:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  40369c:	2000      	movs	r0, #0
  40369e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4036a2:	4914      	ldr	r1, [pc, #80]	; (4036f4 <wait_for_bootrom+0xd4>)
  4036a4:	4814      	ldr	r0, [pc, #80]	; (4036f8 <wait_for_bootrom+0xd8>)
  4036a6:	4c12      	ldr	r4, [pc, #72]	; (4036f0 <wait_for_bootrom+0xd0>)
  4036a8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4036aa:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4036ae:	f241 008c 	movw	r0, #4236	; 0x108c
  4036b2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4036b4:	2400      	movs	r4, #0
  4036b6:	e7e0      	b.n	40367a <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4036b8:	490e      	ldr	r1, [pc, #56]	; (4036f4 <wait_for_bootrom+0xd4>)
  4036ba:	480f      	ldr	r0, [pc, #60]	; (4036f8 <wait_for_bootrom+0xd8>)
  4036bc:	4c0c      	ldr	r4, [pc, #48]	; (4036f0 <wait_for_bootrom+0xd0>)
  4036be:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4036c0:	2100      	movs	r1, #0
  4036c2:	f241 008c 	movw	r0, #4236	; 0x108c
  4036c6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4036c8:	2400      	movs	r4, #0
  4036ca:	e7d6      	b.n	40367a <wait_for_bootrom+0x5a>
  4036cc:	0040385d 	.word	0x0040385d
  4036d0:	00402179 	.word	0x00402179
  4036d4:	000207bc 	.word	0x000207bc
  4036d8:	10add09e 	.word	0x10add09e
  4036dc:	0040cfe8 	.word	0x0040cfe8
  4036e0:	004060b9 	.word	0x004060b9
  4036e4:	0040356d 	.word	0x0040356d
  4036e8:	0040339d 	.word	0x0040339d
  4036ec:	ef522f61 	.word	0xef522f61
  4036f0:	00403875 	.word	0x00403875
  4036f4:	3c1cd57d 	.word	0x3c1cd57d
  4036f8:	000207ac 	.word	0x000207ac

004036fc <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4036fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036fe:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  403700:	f241 038c 	movw	r3, #4236	; 0x108c
  403704:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  403706:	4b18      	ldr	r3, [pc, #96]	; (403768 <wait_for_firmware_start+0x6c>)
  403708:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  40370a:	3802      	subs	r0, #2
  40370c:	b2c0      	uxtb	r0, r0
  40370e:	2801      	cmp	r0, #1
  403710:	d911      	bls.n	403736 <wait_for_firmware_start+0x3a>
{
  403712:	f04f 34ff 	mov.w	r4, #4294967295
  403716:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403718:	2702      	movs	r7, #2
  40371a:	4e14      	ldr	r6, [pc, #80]	; (40376c <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  40371c:	4d14      	ldr	r5, [pc, #80]	; (403770 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  40371e:	9b00      	ldr	r3, [sp, #0]
  403720:	4298      	cmp	r0, r3
  403722:	d012      	beq.n	40374a <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403724:	4638      	mov	r0, r7
  403726:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403728:	9801      	ldr	r0, [sp, #4]
  40372a:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  40372c:	3c01      	subs	r4, #1
  40372e:	d1f6      	bne.n	40371e <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  403730:	f06f 0004 	mvn.w	r0, #4
  403734:	e00e      	b.n	403754 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403736:	4b0f      	ldr	r3, [pc, #60]	; (403774 <wait_for_firmware_start+0x78>)
  403738:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40373a:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40373e:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  403742:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403746:	9300      	str	r3, [sp, #0]
  403748:	e7e3      	b.n	403712 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40374a:	9a00      	ldr	r2, [sp, #0]
  40374c:	4b06      	ldr	r3, [pc, #24]	; (403768 <wait_for_firmware_start+0x6c>)
  40374e:	429a      	cmp	r2, r3
  403750:	d002      	beq.n	403758 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  403752:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403754:	b003      	add	sp, #12
  403756:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403758:	2100      	movs	r1, #0
  40375a:	f241 008c 	movw	r0, #4236	; 0x108c
  40375e:	4b06      	ldr	r3, [pc, #24]	; (403778 <wait_for_firmware_start+0x7c>)
  403760:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  403762:	2000      	movs	r0, #0
  403764:	e7f6      	b.n	403754 <wait_for_firmware_start+0x58>
  403766:	bf00      	nop
  403768:	02532636 	.word	0x02532636
  40376c:	00402179 	.word	0x00402179
  403770:	0040385d 	.word	0x0040385d
  403774:	000207ac 	.word	0x000207ac
  403778:	00403875 	.word	0x00403875

0040377c <chip_deinit>:

sint8 chip_deinit(void)
{
  40377c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40377e:	b083      	sub	sp, #12
	uint32 reg = 0;
  403780:	a902      	add	r1, sp, #8
  403782:	2300      	movs	r3, #0
  403784:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403788:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40378c:	4b24      	ldr	r3, [pc, #144]	; (403820 <chip_deinit+0xa4>)
  40378e:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  403790:	bb20      	cbnz	r0, 4037dc <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  403792:	9901      	ldr	r1, [sp, #4]
  403794:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403798:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40379a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40379e:	4b21      	ldr	r3, [pc, #132]	; (403824 <chip_deinit+0xa8>)
  4037a0:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4037a2:	4605      	mov	r5, r0
  4037a4:	bb28      	cbnz	r0, 4037f2 <chip_deinit+0x76>
  4037a6:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4037a8:	4e1d      	ldr	r6, [pc, #116]	; (403820 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4037aa:	4f1e      	ldr	r7, [pc, #120]	; (403824 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4037ac:	a901      	add	r1, sp, #4
  4037ae:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4037b2:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4037b4:	4605      	mov	r5, r0
  4037b6:	bb38      	cbnz	r0, 403808 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4037b8:	9901      	ldr	r1, [sp, #4]
  4037ba:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4037be:	d00a      	beq.n	4037d6 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4037c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4037c4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4037c6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4037ca:	47b8      	blx	r7
  4037cc:	4605      	mov	r5, r0
  4037ce:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4037d0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4037d4:	d1ea      	bne.n	4037ac <chip_deinit+0x30>

	return ret;
}
  4037d6:	4628      	mov	r0, r5
  4037d8:	b003      	add	sp, #12
  4037da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4037dc:	f240 2231 	movw	r2, #561	; 0x231
  4037e0:	4911      	ldr	r1, [pc, #68]	; (403828 <chip_deinit+0xac>)
  4037e2:	4812      	ldr	r0, [pc, #72]	; (40382c <chip_deinit+0xb0>)
  4037e4:	4c12      	ldr	r4, [pc, #72]	; (403830 <chip_deinit+0xb4>)
  4037e6:	47a0      	blx	r4
  4037e8:	4812      	ldr	r0, [pc, #72]	; (403834 <chip_deinit+0xb8>)
  4037ea:	47a0      	blx	r4
  4037ec:	4812      	ldr	r0, [pc, #72]	; (403838 <chip_deinit+0xbc>)
  4037ee:	47a0      	blx	r4
  4037f0:	e7cf      	b.n	403792 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  4037f2:	f240 2237 	movw	r2, #567	; 0x237
  4037f6:	490c      	ldr	r1, [pc, #48]	; (403828 <chip_deinit+0xac>)
  4037f8:	480c      	ldr	r0, [pc, #48]	; (40382c <chip_deinit+0xb0>)
  4037fa:	4c0d      	ldr	r4, [pc, #52]	; (403830 <chip_deinit+0xb4>)
  4037fc:	47a0      	blx	r4
  4037fe:	480f      	ldr	r0, [pc, #60]	; (40383c <chip_deinit+0xc0>)
  403800:	47a0      	blx	r4
  403802:	480d      	ldr	r0, [pc, #52]	; (403838 <chip_deinit+0xbc>)
  403804:	47a0      	blx	r4
		return ret;
  403806:	e7e6      	b.n	4037d6 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403808:	f240 223e 	movw	r2, #574	; 0x23e
  40380c:	4906      	ldr	r1, [pc, #24]	; (403828 <chip_deinit+0xac>)
  40380e:	4807      	ldr	r0, [pc, #28]	; (40382c <chip_deinit+0xb0>)
  403810:	4c07      	ldr	r4, [pc, #28]	; (403830 <chip_deinit+0xb4>)
  403812:	47a0      	blx	r4
  403814:	480a      	ldr	r0, [pc, #40]	; (403840 <chip_deinit+0xc4>)
  403816:	47a0      	blx	r4
  403818:	4807      	ldr	r0, [pc, #28]	; (403838 <chip_deinit+0xbc>)
  40381a:	47a0      	blx	r4
			return ret;
  40381c:	e7db      	b.n	4037d6 <chip_deinit+0x5a>
  40381e:	bf00      	nop
  403820:	00403869 	.word	0x00403869
  403824:	00403875 	.word	0x00403875
  403828:	0040cf24 	.word	0x0040cf24
  40382c:	0040cae4 	.word	0x0040cae4
  403830:	004060b9 	.word	0x004060b9
  403834:	0040cf30 	.word	0x0040cf30
  403838:	0040cb10 	.word	0x0040cb10
  40383c:	0040cf4c 	.word	0x0040cf4c
  403840:	0040cf68 	.word	0x0040cf68

00403844 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403844:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403846:	4b01      	ldr	r3, [pc, #4]	; (40384c <nm_bus_iface_init+0x8>)
  403848:	4798      	blx	r3

	return ret;
}
  40384a:	bd08      	pop	{r3, pc}
  40384c:	004022fd 	.word	0x004022fd

00403850 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  403850:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  403852:	4b01      	ldr	r3, [pc, #4]	; (403858 <nm_bus_iface_deinit+0x8>)
  403854:	4798      	blx	r3

	return ret;
}
  403856:	bd08      	pop	{r3, pc}
  403858:	004024ed 	.word	0x004024ed

0040385c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  40385c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40385e:	4b01      	ldr	r3, [pc, #4]	; (403864 <nm_read_reg+0x8>)
  403860:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  403862:	bd08      	pop	{r3, pc}
  403864:	004040b1 	.word	0x004040b1

00403868 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403868:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  40386a:	4b01      	ldr	r3, [pc, #4]	; (403870 <nm_read_reg_with_ret+0x8>)
  40386c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40386e:	bd08      	pop	{r3, pc}
  403870:	004040c9 	.word	0x004040c9

00403874 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403874:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  403876:	4b01      	ldr	r3, [pc, #4]	; (40387c <nm_write_reg+0x8>)
  403878:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  40387a:	bd08      	pop	{r3, pc}
  40387c:	004040e1 	.word	0x004040e1

00403880 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403884:	4607      	mov	r7, r0
  403886:	4689      	mov	r9, r1
  403888:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40388a:	4b12      	ldr	r3, [pc, #72]	; (4038d4 <nm_read_block+0x54>)
  40388c:	f8b3 8000 	ldrh.w	r8, [r3]
  403890:	f1a8 0808 	sub.w	r8, r8, #8
  403894:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403898:	4542      	cmp	r2, r8
  40389a:	d919      	bls.n	4038d0 <nm_read_block+0x50>
  40389c:	4644      	mov	r4, r8
  40389e:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4038a0:	f8df a034 	ldr.w	sl, [pc, #52]	; 4038d8 <nm_read_block+0x58>
  4038a4:	4642      	mov	r2, r8
  4038a6:	eb09 0106 	add.w	r1, r9, r6
  4038aa:	4638      	mov	r0, r7
  4038ac:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4038ae:	4603      	mov	r3, r0
  4038b0:	b958      	cbnz	r0, 4038ca <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4038b2:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4038b4:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4038b6:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4038b8:	42a5      	cmp	r5, r4
  4038ba:	d8f3      	bhi.n	4038a4 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4038bc:	b2aa      	uxth	r2, r5
  4038be:	eb09 0106 	add.w	r1, r9, r6
  4038c2:	4638      	mov	r0, r7
  4038c4:	4b04      	ldr	r3, [pc, #16]	; (4038d8 <nm_read_block+0x58>)
  4038c6:	4798      	blx	r3
  4038c8:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4038ca:	4618      	mov	r0, r3
  4038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4038d0:	2600      	movs	r6, #0
  4038d2:	e7f3      	b.n	4038bc <nm_read_block+0x3c>
  4038d4:	20400010 	.word	0x20400010
  4038d8:	0040420d 	.word	0x0040420d

004038dc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038e0:	4607      	mov	r7, r0
  4038e2:	4689      	mov	r9, r1
  4038e4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4038e6:	4b12      	ldr	r3, [pc, #72]	; (403930 <nm_write_block+0x54>)
  4038e8:	f8b3 8000 	ldrh.w	r8, [r3]
  4038ec:	f1a8 0808 	sub.w	r8, r8, #8
  4038f0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4038f4:	4542      	cmp	r2, r8
  4038f6:	d919      	bls.n	40392c <nm_write_block+0x50>
  4038f8:	4644      	mov	r4, r8
  4038fa:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4038fc:	f8df a034 	ldr.w	sl, [pc, #52]	; 403934 <nm_write_block+0x58>
  403900:	4642      	mov	r2, r8
  403902:	eb09 0106 	add.w	r1, r9, r6
  403906:	4638      	mov	r0, r7
  403908:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40390a:	4603      	mov	r3, r0
  40390c:	b958      	cbnz	r0, 403926 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40390e:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403910:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403912:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403914:	42a5      	cmp	r5, r4
  403916:	d8f3      	bhi.n	403900 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403918:	b2aa      	uxth	r2, r5
  40391a:	eb09 0106 	add.w	r1, r9, r6
  40391e:	4638      	mov	r0, r7
  403920:	4b04      	ldr	r3, [pc, #16]	; (403934 <nm_write_block+0x58>)
  403922:	4798      	blx	r3
  403924:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403926:	4618      	mov	r0, r3
  403928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  40392c:	2600      	movs	r6, #0
  40392e:	e7f3      	b.n	403918 <nm_write_block+0x3c>
  403930:	20400010 	.word	0x20400010
  403934:	004042d5 	.word	0x004042d5

00403938 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403938:	b530      	push	{r4, r5, lr}
  40393a:	b083      	sub	sp, #12
  40393c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40393e:	a902      	add	r1, sp, #8
  403940:	2300      	movs	r3, #0
  403942:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403946:	4824      	ldr	r0, [pc, #144]	; (4039d8 <nm_get_firmware_info+0xa0>)
  403948:	4b24      	ldr	r3, [pc, #144]	; (4039dc <nm_get_firmware_info+0xa4>)
  40394a:	4798      	blx	r3
  40394c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40394e:	9a01      	ldr	r2, [sp, #4]
  403950:	4b23      	ldr	r3, [pc, #140]	; (4039e0 <nm_get_firmware_info+0xa8>)
  403952:	429a      	cmp	r2, r3
  403954:	d039      	beq.n	4039ca <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403956:	9b01      	ldr	r3, [sp, #4]
  403958:	0c1a      	lsrs	r2, r3, #16
  40395a:	b291      	uxth	r1, r2
  40395c:	0a08      	lsrs	r0, r1, #8
  40395e:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  403960:	f3c1 1103 	ubfx	r1, r1, #4, #4
  403964:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  403966:	f002 020f 	and.w	r2, r2, #15
  40396a:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  40396c:	b29a      	uxth	r2, r3
  40396e:	0a11      	lsrs	r1, r2, #8
  403970:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  403972:	f3c2 1203 	ubfx	r2, r2, #4, #4
  403976:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  403978:	f003 030f 	and.w	r3, r3, #15
  40397c:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  40397e:	4b19      	ldr	r3, [pc, #100]	; (4039e4 <nm_get_firmware_info+0xac>)
  403980:	4798      	blx	r3
  403982:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  403984:	7922      	ldrb	r2, [r4, #4]
  403986:	79a3      	ldrb	r3, [r4, #6]
  403988:	f003 030f 	and.w	r3, r3, #15
  40398c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403990:	7962      	ldrb	r2, [r4, #5]
  403992:	0112      	lsls	r2, r2, #4
  403994:	b2d2      	uxtb	r2, r2
  403996:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  403998:	79e1      	ldrb	r1, [r4, #7]
  40399a:	7a62      	ldrb	r2, [r4, #9]
  40399c:	f002 020f 	and.w	r2, r2, #15
  4039a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4039a4:	7a21      	ldrb	r1, [r4, #8]
  4039a6:	0109      	lsls	r1, r1, #4
  4039a8:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4039aa:	430a      	orrs	r2, r1
  4039ac:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4039b0:	428a      	cmp	r2, r1
  4039b2:	bf88      	it	hi
  4039b4:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4039b8:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4039bc:	4293      	cmp	r3, r2
	}
	return ret;
}
  4039be:	bf8c      	ite	hi
  4039c0:	4628      	movhi	r0, r5
  4039c2:	f06f 000c 	mvnls.w	r0, #12
  4039c6:	b003      	add	sp, #12
  4039c8:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4039ca:	a901      	add	r1, sp, #4
  4039cc:	f241 0048 	movw	r0, #4168	; 0x1048
  4039d0:	4b02      	ldr	r3, [pc, #8]	; (4039dc <nm_get_firmware_info+0xa4>)
  4039d2:	4798      	blx	r3
  4039d4:	4605      	mov	r5, r0
  4039d6:	e7be      	b.n	403956 <nm_get_firmware_info+0x1e>
  4039d8:	000207ac 	.word	0x000207ac
  4039dc:	00403869 	.word	0x00403869
  4039e0:	d75dc1c3 	.word	0xd75dc1c3
  4039e4:	0040356d 	.word	0x0040356d

004039e8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  4039e8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  4039ea:	2800      	cmp	r0, #0
  4039ec:	d037      	beq.n	403a5e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  4039ee:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4039f0:	1e63      	subs	r3, r4, #1
  4039f2:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4039f4:	2b04      	cmp	r3, #4
  4039f6:	bf28      	it	cs
  4039f8:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  4039fa:	2000      	movs	r0, #0
  4039fc:	4b1e      	ldr	r3, [pc, #120]	; (403a78 <nm_drv_init+0x90>)
  4039fe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a00:	4605      	mov	r5, r0
  403a02:	2800      	cmp	r0, #0
  403a04:	d12d      	bne.n	403a62 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403a06:	481d      	ldr	r0, [pc, #116]	; (403a7c <nm_drv_init+0x94>)
  403a08:	4d1d      	ldr	r5, [pc, #116]	; (403a80 <nm_drv_init+0x98>)
  403a0a:	47a8      	blx	r5
  403a0c:	4b1d      	ldr	r3, [pc, #116]	; (403a84 <nm_drv_init+0x9c>)
  403a0e:	4798      	blx	r3
  403a10:	4601      	mov	r1, r0
  403a12:	481d      	ldr	r0, [pc, #116]	; (403a88 <nm_drv_init+0xa0>)
  403a14:	47a8      	blx	r5
  403a16:	481d      	ldr	r0, [pc, #116]	; (403a8c <nm_drv_init+0xa4>)
  403a18:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403a1a:	4b1d      	ldr	r3, [pc, #116]	; (403a90 <nm_drv_init+0xa8>)
  403a1c:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  403a1e:	4620      	mov	r0, r4
  403a20:	4b1c      	ldr	r3, [pc, #112]	; (403a94 <nm_drv_init+0xac>)
  403a22:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a24:	4605      	mov	r5, r0
  403a26:	b9b0      	cbnz	r0, 403a56 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403a28:	4620      	mov	r0, r4
  403a2a:	4b1b      	ldr	r3, [pc, #108]	; (403a98 <nm_drv_init+0xb0>)
  403a2c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a2e:	4605      	mov	r5, r0
  403a30:	b988      	cbnz	r0, 403a56 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  403a32:	3c02      	subs	r4, #2
  403a34:	b2e4      	uxtb	r4, r4
  403a36:	2c01      	cmp	r4, #1
  403a38:	d90f      	bls.n	403a5a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403a3a:	4b18      	ldr	r3, [pc, #96]	; (403a9c <nm_drv_init+0xb4>)
  403a3c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a3e:	4605      	mov	r5, r0
  403a40:	b158      	cbz	r0, 403a5a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  403a42:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403a46:	4916      	ldr	r1, [pc, #88]	; (403aa0 <nm_drv_init+0xb8>)
  403a48:	4816      	ldr	r0, [pc, #88]	; (403aa4 <nm_drv_init+0xbc>)
  403a4a:	4c0d      	ldr	r4, [pc, #52]	; (403a80 <nm_drv_init+0x98>)
  403a4c:	47a0      	blx	r4
  403a4e:	4816      	ldr	r0, [pc, #88]	; (403aa8 <nm_drv_init+0xc0>)
  403a50:	47a0      	blx	r4
  403a52:	480e      	ldr	r0, [pc, #56]	; (403a8c <nm_drv_init+0xa4>)
  403a54:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403a56:	4b15      	ldr	r3, [pc, #84]	; (403aac <nm_drv_init+0xc4>)
  403a58:	4798      	blx	r3
ERR1:
	return ret;
}
  403a5a:	4628      	mov	r0, r5
  403a5c:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  403a5e:	2401      	movs	r4, #1
  403a60:	e7cb      	b.n	4039fa <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  403a62:	f44f 7292 	mov.w	r2, #292	; 0x124
  403a66:	490e      	ldr	r1, [pc, #56]	; (403aa0 <nm_drv_init+0xb8>)
  403a68:	480e      	ldr	r0, [pc, #56]	; (403aa4 <nm_drv_init+0xbc>)
  403a6a:	4c05      	ldr	r4, [pc, #20]	; (403a80 <nm_drv_init+0x98>)
  403a6c:	47a0      	blx	r4
  403a6e:	4810      	ldr	r0, [pc, #64]	; (403ab0 <nm_drv_init+0xc8>)
  403a70:	47a0      	blx	r4
  403a72:	4806      	ldr	r0, [pc, #24]	; (403a8c <nm_drv_init+0xa4>)
  403a74:	47a0      	blx	r4
		goto ERR1;
  403a76:	e7f0      	b.n	403a5a <nm_drv_init+0x72>
  403a78:	00403845 	.word	0x00403845
  403a7c:	0040cdb8 	.word	0x0040cdb8
  403a80:	004060b9 	.word	0x004060b9
  403a84:	0040356d 	.word	0x0040356d
  403a88:	0040d0b0 	.word	0x0040d0b0
  403a8c:	0040cb10 	.word	0x0040cb10
  403a90:	004040f9 	.word	0x004040f9
  403a94:	00403621 	.word	0x00403621
  403a98:	004036fd 	.word	0x004036fd
  403a9c:	00403505 	.word	0x00403505
  403aa0:	0040cff8 	.word	0x0040cff8
  403aa4:	0040cae4 	.word	0x0040cae4
  403aa8:	0040d074 	.word	0x0040d074
  403aac:	00403851 	.word	0x00403851
  403ab0:	0040d094 	.word	0x0040d094

00403ab4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  403ab4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  403ab6:	4b19      	ldr	r3, [pc, #100]	; (403b1c <nm_drv_deinit+0x68>)
  403ab8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403aba:	b958      	cbnz	r0, 403ad4 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  403abc:	2000      	movs	r0, #0
  403abe:	4b18      	ldr	r3, [pc, #96]	; (403b20 <nm_drv_deinit+0x6c>)
  403ac0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ac2:	4604      	mov	r4, r0
  403ac4:	b998      	cbnz	r0, 403aee <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  403ac6:	4b17      	ldr	r3, [pc, #92]	; (403b24 <nm_drv_deinit+0x70>)
  403ac8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403aca:	4604      	mov	r4, r0
  403acc:	b9d0      	cbnz	r0, 403b04 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  403ace:	4b16      	ldr	r3, [pc, #88]	; (403b28 <nm_drv_deinit+0x74>)
  403ad0:	4798      	blx	r3
  403ad2:	e00a      	b.n	403aea <nm_drv_deinit+0x36>
  403ad4:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403ad6:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403ada:	4914      	ldr	r1, [pc, #80]	; (403b2c <nm_drv_deinit+0x78>)
  403adc:	4814      	ldr	r0, [pc, #80]	; (403b30 <nm_drv_deinit+0x7c>)
  403ade:	4d15      	ldr	r5, [pc, #84]	; (403b34 <nm_drv_deinit+0x80>)
  403ae0:	47a8      	blx	r5
  403ae2:	4815      	ldr	r0, [pc, #84]	; (403b38 <nm_drv_deinit+0x84>)
  403ae4:	47a8      	blx	r5
  403ae6:	4815      	ldr	r0, [pc, #84]	; (403b3c <nm_drv_deinit+0x88>)
  403ae8:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403aea:	4620      	mov	r0, r4
  403aec:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  403aee:	f240 127b 	movw	r2, #379	; 0x17b
  403af2:	490e      	ldr	r1, [pc, #56]	; (403b2c <nm_drv_deinit+0x78>)
  403af4:	480e      	ldr	r0, [pc, #56]	; (403b30 <nm_drv_deinit+0x7c>)
  403af6:	4d0f      	ldr	r5, [pc, #60]	; (403b34 <nm_drv_deinit+0x80>)
  403af8:	47a8      	blx	r5
  403afa:	4811      	ldr	r0, [pc, #68]	; (403b40 <nm_drv_deinit+0x8c>)
  403afc:	47a8      	blx	r5
  403afe:	480f      	ldr	r0, [pc, #60]	; (403b3c <nm_drv_deinit+0x88>)
  403b00:	47a8      	blx	r5
		goto ERR1;
  403b02:	e7f2      	b.n	403aea <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403b04:	f240 1281 	movw	r2, #385	; 0x181
  403b08:	4908      	ldr	r1, [pc, #32]	; (403b2c <nm_drv_deinit+0x78>)
  403b0a:	4809      	ldr	r0, [pc, #36]	; (403b30 <nm_drv_deinit+0x7c>)
  403b0c:	4d09      	ldr	r5, [pc, #36]	; (403b34 <nm_drv_deinit+0x80>)
  403b0e:	47a8      	blx	r5
  403b10:	480c      	ldr	r0, [pc, #48]	; (403b44 <nm_drv_deinit+0x90>)
  403b12:	47a8      	blx	r5
  403b14:	4809      	ldr	r0, [pc, #36]	; (403b3c <nm_drv_deinit+0x88>)
  403b16:	47a8      	blx	r5
		goto ERR1;
  403b18:	e7e7      	b.n	403aea <nm_drv_deinit+0x36>
  403b1a:	bf00      	nop
  403b1c:	0040377d 	.word	0x0040377d
  403b20:	00404b59 	.word	0x00404b59
  403b24:	00403851 	.word	0x00403851
  403b28:	004040a5 	.word	0x004040a5
  403b2c:	0040d004 	.word	0x0040d004
  403b30:	0040cae4 	.word	0x0040cae4
  403b34:	004060b9 	.word	0x004060b9
  403b38:	0040d014 	.word	0x0040d014
  403b3c:	0040cb10 	.word	0x0040cb10
  403b40:	0040d034 	.word	0x0040d034
  403b44:	0040d058 	.word	0x0040d058

00403b48 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403b48:	b500      	push	{lr}
  403b4a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403b4c:	2300      	movs	r3, #0
  403b4e:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  403b50:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  403b52:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403b56:	a901      	add	r1, sp, #4
  403b58:	2003      	movs	r0, #3
  403b5a:	4b02      	ldr	r3, [pc, #8]	; (403b64 <nmi_spi_read+0x1c>)
  403b5c:	4798      	blx	r3
}
  403b5e:	b005      	add	sp, #20
  403b60:	f85d fb04 	ldr.w	pc, [sp], #4
  403b64:	00402419 	.word	0x00402419

00403b68 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b6c:	b082      	sub	sp, #8
  403b6e:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  403b70:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403b74:	b2db      	uxtb	r3, r3
  403b76:	2b01      	cmp	r3, #1
  403b78:	d927      	bls.n	403bca <spi_cmd_rsp+0x62>
  403b7a:	28cf      	cmp	r0, #207	; 0xcf
  403b7c:	d025      	beq.n	403bca <spi_cmd_rsp+0x62>
{
  403b7e:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403b80:	f04f 0801 	mov.w	r8, #1
  403b84:	4f23      	ldr	r7, [pc, #140]	; (403c14 <spi_cmd_rsp+0xac>)
  403b86:	4641      	mov	r1, r8
  403b88:	f10d 0007 	add.w	r0, sp, #7
  403b8c:	47b8      	blx	r7
  403b8e:	4606      	mov	r6, r0
  403b90:	bb20      	cbnz	r0, 403bdc <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  403b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403b96:	42ab      	cmp	r3, r5
  403b98:	d02c      	beq.n	403bf4 <spi_cmd_rsp+0x8c>
  403b9a:	1e63      	subs	r3, r4, #1
  403b9c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403ba0:	d1f1      	bne.n	403b86 <spi_cmd_rsp+0x1e>
  403ba2:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403ba4:	2701      	movs	r7, #1
  403ba6:	4d1b      	ldr	r5, [pc, #108]	; (403c14 <spi_cmd_rsp+0xac>)
  403ba8:	4639      	mov	r1, r7
  403baa:	f10d 0007 	add.w	r0, sp, #7
  403bae:	47a8      	blx	r5
  403bb0:	bb10      	cbnz	r0, 403bf8 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  403bb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403bb6:	b353      	cbz	r3, 403c0e <spi_cmd_rsp+0xa6>
  403bb8:	1e63      	subs	r3, r4, #1
  403bba:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403bbe:	d1f3      	bne.n	403ba8 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  403bc0:	2601      	movs	r6, #1

_fail_:

	return result;
}
  403bc2:	4630      	mov	r0, r6
  403bc4:	b002      	add	sp, #8
  403bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403bca:	2101      	movs	r1, #1
  403bcc:	f10d 0007 	add.w	r0, sp, #7
  403bd0:	4b10      	ldr	r3, [pc, #64]	; (403c14 <spi_cmd_rsp+0xac>)
  403bd2:	4798      	blx	r3
  403bd4:	2800      	cmp	r0, #0
  403bd6:	d0d2      	beq.n	403b7e <spi_cmd_rsp+0x16>
			result = N_FAIL;
  403bd8:	2600      	movs	r6, #0
  403bda:	e7f2      	b.n	403bc2 <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403bdc:	f240 1227 	movw	r2, #295	; 0x127
  403be0:	490d      	ldr	r1, [pc, #52]	; (403c18 <spi_cmd_rsp+0xb0>)
  403be2:	480e      	ldr	r0, [pc, #56]	; (403c1c <spi_cmd_rsp+0xb4>)
  403be4:	4c0e      	ldr	r4, [pc, #56]	; (403c20 <spi_cmd_rsp+0xb8>)
  403be6:	47a0      	blx	r4
  403be8:	480e      	ldr	r0, [pc, #56]	; (403c24 <spi_cmd_rsp+0xbc>)
  403bea:	47a0      	blx	r4
  403bec:	480e      	ldr	r0, [pc, #56]	; (403c28 <spi_cmd_rsp+0xc0>)
  403bee:	47a0      	blx	r4
			result = N_FAIL;
  403bf0:	2600      	movs	r6, #0
			goto _fail_;
  403bf2:	e7e6      	b.n	403bc2 <spi_cmd_rsp+0x5a>
  403bf4:	240b      	movs	r4, #11
  403bf6:	e7d5      	b.n	403ba4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403bf8:	f240 1235 	movw	r2, #309	; 0x135
  403bfc:	4906      	ldr	r1, [pc, #24]	; (403c18 <spi_cmd_rsp+0xb0>)
  403bfe:	4807      	ldr	r0, [pc, #28]	; (403c1c <spi_cmd_rsp+0xb4>)
  403c00:	4c07      	ldr	r4, [pc, #28]	; (403c20 <spi_cmd_rsp+0xb8>)
  403c02:	47a0      	blx	r4
  403c04:	4807      	ldr	r0, [pc, #28]	; (403c24 <spi_cmd_rsp+0xbc>)
  403c06:	47a0      	blx	r4
  403c08:	4807      	ldr	r0, [pc, #28]	; (403c28 <spi_cmd_rsp+0xc0>)
  403c0a:	47a0      	blx	r4
			goto _fail_;
  403c0c:	e7d9      	b.n	403bc2 <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  403c0e:	2601      	movs	r6, #1
  403c10:	e7d7      	b.n	403bc2 <spi_cmd_rsp+0x5a>
  403c12:	bf00      	nop
  403c14:	00403b49 	.word	0x00403b49
  403c18:	0040d0c8 	.word	0x0040d0c8
  403c1c:	0040cae4 	.word	0x0040cae4
  403c20:	004060b9 	.word	0x004060b9
  403c24:	0040d508 	.word	0x0040d508
  403c28:	0040cb10 	.word	0x0040cb10

00403c2c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c30:	b085      	sub	sp, #20
  403c32:	4683      	mov	fp, r0
  403c34:	468a      	mov	sl, r1
  403c36:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403c38:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c3c:	4d37      	ldr	r5, [pc, #220]	; (403d1c <spi_data_read+0xf0>)
  403c3e:	e027      	b.n	403c90 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  403c40:	f240 1257 	movw	r2, #343	; 0x157
  403c44:	4936      	ldr	r1, [pc, #216]	; (403d20 <spi_data_read+0xf4>)
  403c46:	4837      	ldr	r0, [pc, #220]	; (403d24 <spi_data_read+0xf8>)
  403c48:	4c37      	ldr	r4, [pc, #220]	; (403d28 <spi_data_read+0xfc>)
  403c4a:	47a0      	blx	r4
  403c4c:	4837      	ldr	r0, [pc, #220]	; (403d2c <spi_data_read+0x100>)
  403c4e:	47a0      	blx	r4
  403c50:	4837      	ldr	r0, [pc, #220]	; (403d30 <spi_data_read+0x104>)
  403c52:	47a0      	blx	r4
  403c54:	2300      	movs	r3, #0
  403c56:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403c58:	9801      	ldr	r0, [sp, #4]
  403c5a:	b005      	add	sp, #20
  403c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  403c60:	2c00      	cmp	r4, #0
  403c62:	dd2e      	ble.n	403cc2 <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403c64:	4641      	mov	r1, r8
  403c66:	eb0b 0009 	add.w	r0, fp, r9
  403c6a:	47a8      	blx	r5
  403c6c:	4604      	mov	r4, r0
  403c6e:	2800      	cmp	r0, #0
  403c70:	d134      	bne.n	403cdc <spi_data_read+0xb0>
		if(!clockless)
  403c72:	b91f      	cbnz	r7, 403c7c <spi_data_read+0x50>
			if (!gu8Crc_off) {
  403c74:	4b2f      	ldr	r3, [pc, #188]	; (403d34 <spi_data_read+0x108>)
  403c76:	781b      	ldrb	r3, [r3, #0]
  403c78:	2b00      	cmp	r3, #0
  403c7a:	d03a      	beq.n	403cf2 <spi_data_read+0xc6>
		ix += nbytes;
  403c7c:	44c1      	add	r9, r8
  403c7e:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  403c82:	ebaa 0a08 	sub.w	sl, sl, r8
  403c86:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  403c8a:	f1ba 0f00 	cmp.w	sl, #0
  403c8e:	d041      	beq.n	403d14 <spi_data_read+0xe8>
  403c90:	46d0      	mov	r8, sl
  403c92:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  403c96:	bf28      	it	cs
  403c98:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  403c9c:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c9e:	2601      	movs	r6, #1
  403ca0:	4631      	mov	r1, r6
  403ca2:	f10d 000b 	add.w	r0, sp, #11
  403ca6:	47a8      	blx	r5
  403ca8:	9001      	str	r0, [sp, #4]
  403caa:	2800      	cmp	r0, #0
  403cac:	d1c8      	bne.n	403c40 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  403cae:	f89d 300b 	ldrb.w	r3, [sp, #11]
  403cb2:	091b      	lsrs	r3, r3, #4
  403cb4:	2b0f      	cmp	r3, #15
  403cb6:	d0d3      	beq.n	403c60 <spi_data_read+0x34>
  403cb8:	3c01      	subs	r4, #1
  403cba:	b224      	sxth	r4, r4
		} while (retry--);
  403cbc:	f1b4 3fff 	cmp.w	r4, #4294967295
  403cc0:	d1ee      	bne.n	403ca0 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403cc2:	f240 1263 	movw	r2, #355	; 0x163
  403cc6:	4916      	ldr	r1, [pc, #88]	; (403d20 <spi_data_read+0xf4>)
  403cc8:	4816      	ldr	r0, [pc, #88]	; (403d24 <spi_data_read+0xf8>)
  403cca:	4c17      	ldr	r4, [pc, #92]	; (403d28 <spi_data_read+0xfc>)
  403ccc:	47a0      	blx	r4
  403cce:	f89d 100b 	ldrb.w	r1, [sp, #11]
  403cd2:	4819      	ldr	r0, [pc, #100]	; (403d38 <spi_data_read+0x10c>)
  403cd4:	47a0      	blx	r4
  403cd6:	4816      	ldr	r0, [pc, #88]	; (403d30 <spi_data_read+0x104>)
  403cd8:	47a0      	blx	r4
			break;
  403cda:	e7bd      	b.n	403c58 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403cdc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403ce0:	490f      	ldr	r1, [pc, #60]	; (403d20 <spi_data_read+0xf4>)
  403ce2:	4810      	ldr	r0, [pc, #64]	; (403d24 <spi_data_read+0xf8>)
  403ce4:	4c10      	ldr	r4, [pc, #64]	; (403d28 <spi_data_read+0xfc>)
  403ce6:	47a0      	blx	r4
  403ce8:	4814      	ldr	r0, [pc, #80]	; (403d3c <spi_data_read+0x110>)
  403cea:	47a0      	blx	r4
  403cec:	4810      	ldr	r0, [pc, #64]	; (403d30 <spi_data_read+0x104>)
  403cee:	47a0      	blx	r4
			break;
  403cf0:	e7b2      	b.n	403c58 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403cf2:	2102      	movs	r1, #2
  403cf4:	a803      	add	r0, sp, #12
  403cf6:	47a8      	blx	r5
  403cf8:	2800      	cmp	r0, #0
  403cfa:	d0bf      	beq.n	403c7c <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403cfc:	f240 1277 	movw	r2, #375	; 0x177
  403d00:	4907      	ldr	r1, [pc, #28]	; (403d20 <spi_data_read+0xf4>)
  403d02:	4808      	ldr	r0, [pc, #32]	; (403d24 <spi_data_read+0xf8>)
  403d04:	4d08      	ldr	r5, [pc, #32]	; (403d28 <spi_data_read+0xfc>)
  403d06:	47a8      	blx	r5
  403d08:	480d      	ldr	r0, [pc, #52]	; (403d40 <spi_data_read+0x114>)
  403d0a:	47a8      	blx	r5
  403d0c:	4808      	ldr	r0, [pc, #32]	; (403d30 <spi_data_read+0x104>)
  403d0e:	47a8      	blx	r5
					result = N_FAIL;
  403d10:	9401      	str	r4, [sp, #4]
					break;
  403d12:	e7a1      	b.n	403c58 <spi_data_read+0x2c>
  403d14:	2301      	movs	r3, #1
  403d16:	9301      	str	r3, [sp, #4]
  403d18:	e79e      	b.n	403c58 <spi_data_read+0x2c>
  403d1a:	bf00      	nop
  403d1c:	00403b49 	.word	0x00403b49
  403d20:	0040d0d4 	.word	0x0040d0d4
  403d24:	0040cae4 	.word	0x0040cae4
  403d28:	004060b9 	.word	0x004060b9
  403d2c:	0040d53c 	.word	0x0040d53c
  403d30:	0040cb10 	.word	0x0040cb10
  403d34:	2040c360 	.word	0x2040c360
  403d38:	0040d570 	.word	0x0040d570
  403d3c:	0040d5a0 	.word	0x0040d5a0
  403d40:	0040d5d4 	.word	0x0040d5d4

00403d44 <nmi_spi_write>:
{
  403d44:	b500      	push	{lr}
  403d46:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403d48:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403d4a:	2300      	movs	r3, #0
  403d4c:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403d4e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403d52:	a901      	add	r1, sp, #4
  403d54:	2003      	movs	r0, #3
  403d56:	4b02      	ldr	r3, [pc, #8]	; (403d60 <nmi_spi_write+0x1c>)
  403d58:	4798      	blx	r3
}
  403d5a:	b005      	add	sp, #20
  403d5c:	f85d fb04 	ldr.w	pc, [sp], #4
  403d60:	00402419 	.word	0x00402419

00403d64 <spi_cmd>:
{
  403d64:	b570      	push	{r4, r5, r6, lr}
  403d66:	b084      	sub	sp, #16
  403d68:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403d6c:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403d70:	38c1      	subs	r0, #193	; 0xc1
  403d72:	280e      	cmp	r0, #14
  403d74:	f200 80a2 	bhi.w	403ebc <spi_cmd+0x158>
  403d78:	e8df f000 	tbb	[pc, r0]
  403d7c:	19664545 	.word	0x19664545
  403d80:	5454332a 	.word	0x5454332a
  403d84:	a0a0087f 	.word	0xa0a0087f
  403d88:	a0a0      	.short	0xa0a0
  403d8a:	3c          	.byte	0x3c
  403d8b:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  403d8c:	0c0b      	lsrs	r3, r1, #16
  403d8e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403d92:	0a0b      	lsrs	r3, r1, #8
  403d94:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403d98:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403d9c:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  403d9e:	4b55      	ldr	r3, [pc, #340]	; (403ef4 <spi_cmd+0x190>)
  403da0:	781b      	ldrb	r3, [r3, #0]
  403da2:	2b00      	cmp	r3, #0
  403da4:	f000 808c 	beq.w	403ec0 <spi_cmd+0x15c>
			len-=1;
  403da8:	3901      	subs	r1, #1
  403daa:	b2c9      	uxtb	r1, r1
  403dac:	e09a      	b.n	403ee4 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  403dae:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403db2:	b944      	cbnz	r4, 403dc6 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  403db4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403db8:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403dbc:	2300      	movs	r3, #0
  403dbe:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403dc2:	2105      	movs	r1, #5
		break;
  403dc4:	e7eb      	b.n	403d9e <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403dc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dca:	f88d 3005 	strb.w	r3, [sp, #5]
  403dce:	e7f3      	b.n	403db8 <spi_cmd+0x54>
		bc[1] = 0x00;
  403dd0:	2300      	movs	r3, #0
  403dd2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403dd6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403dda:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403dde:	2105      	movs	r1, #5
		break;
  403de0:	e7dd      	b.n	403d9e <spi_cmd+0x3a>
		bc[1] = 0x00;
  403de2:	2300      	movs	r3, #0
  403de4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403de8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403dec:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403df0:	2105      	movs	r1, #5
		break;
  403df2:	e7d4      	b.n	403d9e <spi_cmd+0x3a>
		bc[1] = 0xff;
  403df4:	23ff      	movs	r3, #255	; 0xff
  403df6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403dfa:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403dfe:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403e02:	2105      	movs	r1, #5
		break;
  403e04:	e7cb      	b.n	403d9e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403e06:	0c0a      	lsrs	r2, r1, #16
  403e08:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e0c:	0a0a      	lsrs	r2, r1, #8
  403e0e:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403e12:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403e16:	0a1a      	lsrs	r2, r3, #8
  403e18:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403e1c:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403e20:	2107      	movs	r1, #7
		break;
  403e22:	e7bc      	b.n	403d9e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403e24:	0c0a      	lsrs	r2, r1, #16
  403e26:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e2a:	0a0a      	lsrs	r2, r1, #8
  403e2c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403e30:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403e34:	0c1a      	lsrs	r2, r3, #16
  403e36:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403e3a:	0a1a      	lsrs	r2, r3, #8
  403e3c:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403e40:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403e44:	2108      	movs	r1, #8
		break;
  403e46:	e7aa      	b.n	403d9e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403e48:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403e4c:	b984      	cbnz	r4, 403e70 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  403e4e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403e52:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403e56:	0e13      	lsrs	r3, r2, #24
  403e58:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403e5c:	0c13      	lsrs	r3, r2, #16
  403e5e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403e62:	0a13      	lsrs	r3, r2, #8
  403e64:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403e68:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403e6c:	2108      	movs	r1, #8
		break;
  403e6e:	e796      	b.n	403d9e <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403e74:	f88d 3005 	strb.w	r3, [sp, #5]
  403e78:	e7eb      	b.n	403e52 <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403e7a:	0c0b      	lsrs	r3, r1, #16
  403e7c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e80:	0a0b      	lsrs	r3, r1, #8
  403e82:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403e86:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403e8a:	0e13      	lsrs	r3, r2, #24
  403e8c:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403e90:	0c13      	lsrs	r3, r2, #16
  403e92:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403e96:	0a13      	lsrs	r3, r2, #8
  403e98:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403e9c:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403ea0:	2109      	movs	r1, #9
		break;
  403ea2:	e77c      	b.n	403d9e <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403ea4:	f44f 7284 	mov.w	r2, #264	; 0x108
  403ea8:	4913      	ldr	r1, [pc, #76]	; (403ef8 <spi_cmd+0x194>)
  403eaa:	4814      	ldr	r0, [pc, #80]	; (403efc <spi_cmd+0x198>)
  403eac:	4c14      	ldr	r4, [pc, #80]	; (403f00 <spi_cmd+0x19c>)
  403eae:	47a0      	blx	r4
  403eb0:	4814      	ldr	r0, [pc, #80]	; (403f04 <spi_cmd+0x1a0>)
  403eb2:	47a0      	blx	r4
  403eb4:	4814      	ldr	r0, [pc, #80]	; (403f08 <spi_cmd+0x1a4>)
  403eb6:	47a0      	blx	r4
			result = N_FAIL;
  403eb8:	2000      	movs	r0, #0
  403eba:	e019      	b.n	403ef0 <spi_cmd+0x18c>
	switch (cmd) {
  403ebc:	2000      	movs	r0, #0
  403ebe:	e017      	b.n	403ef0 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403ec0:	1e4e      	subs	r6, r1, #1
  403ec2:	ab01      	add	r3, sp, #4
  403ec4:	199d      	adds	r5, r3, r6
  403ec6:	207f      	movs	r0, #127	; 0x7f
  403ec8:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  403eca:	4c10      	ldr	r4, [pc, #64]	; (403f0c <spi_cmd+0x1a8>)
  403ecc:	f812 3b01 	ldrb.w	r3, [r2], #1
  403ed0:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403ed4:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  403ed6:	4295      	cmp	r5, r2
  403ed8:	d1f8      	bne.n	403ecc <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403eda:	ab04      	add	r3, sp, #16
  403edc:	441e      	add	r6, r3
  403ede:	0043      	lsls	r3, r0, #1
  403ee0:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403ee4:	a801      	add	r0, sp, #4
  403ee6:	4b0a      	ldr	r3, [pc, #40]	; (403f10 <spi_cmd+0x1ac>)
  403ee8:	4798      	blx	r3
  403eea:	2800      	cmp	r0, #0
  403eec:	d1da      	bne.n	403ea4 <spi_cmd+0x140>
  403eee:	2001      	movs	r0, #1
}
  403ef0:	b004      	add	sp, #16
  403ef2:	bd70      	pop	{r4, r5, r6, pc}
  403ef4:	2040c360 	.word	0x2040c360
  403ef8:	0040d0c0 	.word	0x0040d0c0
  403efc:	0040cae4 	.word	0x0040cae4
  403f00:	004060b9 	.word	0x004060b9
  403f04:	0040d4dc 	.word	0x0040d4dc
  403f08:	0040cb10 	.word	0x0040cb10
  403f0c:	0040d13c 	.word	0x0040d13c
  403f10:	00403d45 	.word	0x00403d45

00403f14 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403f14:	b570      	push	{r4, r5, r6, lr}
  403f16:	b082      	sub	sp, #8
  403f18:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403f1a:	2831      	cmp	r0, #49	; 0x31
  403f1c:	bf35      	itete	cc
  403f1e:	2301      	movcc	r3, #1
  403f20:	2300      	movcs	r3, #0
  403f22:	25c3      	movcc	r5, #195	; 0xc3
  403f24:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403f26:	9300      	str	r3, [sp, #0]
  403f28:	2304      	movs	r3, #4
  403f2a:	460a      	mov	r2, r1
  403f2c:	4601      	mov	r1, r0
  403f2e:	4628      	mov	r0, r5
  403f30:	4e15      	ldr	r6, [pc, #84]	; (403f88 <spi_write_reg+0x74>)
  403f32:	47b0      	blx	r6
	if (result != N_OK) {
  403f34:	2801      	cmp	r0, #1
  403f36:	d00d      	beq.n	403f54 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  403f38:	f240 12eb 	movw	r2, #491	; 0x1eb
  403f3c:	4913      	ldr	r1, [pc, #76]	; (403f8c <spi_write_reg+0x78>)
  403f3e:	4814      	ldr	r0, [pc, #80]	; (403f90 <spi_write_reg+0x7c>)
  403f40:	4d14      	ldr	r5, [pc, #80]	; (403f94 <spi_write_reg+0x80>)
  403f42:	47a8      	blx	r5
  403f44:	4621      	mov	r1, r4
  403f46:	4814      	ldr	r0, [pc, #80]	; (403f98 <spi_write_reg+0x84>)
  403f48:	47a8      	blx	r5
  403f4a:	4814      	ldr	r0, [pc, #80]	; (403f9c <spi_write_reg+0x88>)
  403f4c:	47a8      	blx	r5
		return N_FAIL;
  403f4e:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  403f50:	b002      	add	sp, #8
  403f52:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  403f54:	4628      	mov	r0, r5
  403f56:	4b12      	ldr	r3, [pc, #72]	; (403fa0 <spi_write_reg+0x8c>)
  403f58:	4798      	blx	r3
	if (result != N_OK) {
  403f5a:	2801      	cmp	r0, #1
  403f5c:	d0f8      	beq.n	403f50 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403f5e:	f240 12f1 	movw	r2, #497	; 0x1f1
  403f62:	490a      	ldr	r1, [pc, #40]	; (403f8c <spi_write_reg+0x78>)
  403f64:	480a      	ldr	r0, [pc, #40]	; (403f90 <spi_write_reg+0x7c>)
  403f66:	4d0b      	ldr	r5, [pc, #44]	; (403f94 <spi_write_reg+0x80>)
  403f68:	47a8      	blx	r5
  403f6a:	4621      	mov	r1, r4
  403f6c:	480d      	ldr	r0, [pc, #52]	; (403fa4 <spi_write_reg+0x90>)
  403f6e:	47a8      	blx	r5
  403f70:	480a      	ldr	r0, [pc, #40]	; (403f9c <spi_write_reg+0x88>)
  403f72:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403f74:	2400      	movs	r4, #0
  403f76:	9400      	str	r4, [sp, #0]
  403f78:	4623      	mov	r3, r4
  403f7a:	4622      	mov	r2, r4
  403f7c:	4621      	mov	r1, r4
  403f7e:	20cf      	movs	r0, #207	; 0xcf
  403f80:	4d01      	ldr	r5, [pc, #4]	; (403f88 <spi_write_reg+0x74>)
  403f82:	47a8      	blx	r5
		return N_FAIL;
  403f84:	4620      	mov	r0, r4
  403f86:	e7e3      	b.n	403f50 <spi_write_reg+0x3c>
  403f88:	00403d65 	.word	0x00403d65
  403f8c:	0040d0f4 	.word	0x0040d0f4
  403f90:	0040cae4 	.word	0x0040cae4
  403f94:	004060b9 	.word	0x004060b9
  403f98:	0040d68c 	.word	0x0040d68c
  403f9c:	0040cb10 	.word	0x0040cb10
  403fa0:	00403b69 	.word	0x00403b69
  403fa4:	0040d6b8 	.word	0x0040d6b8

00403fa8 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  403fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403fac:	b084      	sub	sp, #16
  403fae:	4604      	mov	r4, r0
  403fb0:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  403fb2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  403fb6:	bf35      	itete	cc
  403fb8:	2601      	movcc	r6, #1
  403fba:	2600      	movcs	r6, #0
  403fbc:	25c4      	movcc	r5, #196	; 0xc4
  403fbe:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  403fc0:	9600      	str	r6, [sp, #0]
  403fc2:	2304      	movs	r3, #4
  403fc4:	2200      	movs	r2, #0
  403fc6:	4601      	mov	r1, r0
  403fc8:	4628      	mov	r0, r5
  403fca:	4f2c      	ldr	r7, [pc, #176]	; (40407c <spi_read_reg+0xd4>)
  403fcc:	47b8      	blx	r7
	if (result != N_OK) {
  403fce:	2801      	cmp	r0, #1
  403fd0:	d00e      	beq.n	403ff0 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403fd2:	f240 2245 	movw	r2, #581	; 0x245
  403fd6:	492a      	ldr	r1, [pc, #168]	; (404080 <spi_read_reg+0xd8>)
  403fd8:	482a      	ldr	r0, [pc, #168]	; (404084 <spi_read_reg+0xdc>)
  403fda:	4d2b      	ldr	r5, [pc, #172]	; (404088 <spi_read_reg+0xe0>)
  403fdc:	47a8      	blx	r5
  403fde:	4621      	mov	r1, r4
  403fe0:	482a      	ldr	r0, [pc, #168]	; (40408c <spi_read_reg+0xe4>)
  403fe2:	47a8      	blx	r5
  403fe4:	482a      	ldr	r0, [pc, #168]	; (404090 <spi_read_reg+0xe8>)
  403fe6:	47a8      	blx	r5
		return N_FAIL;
  403fe8:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  403fea:	b004      	add	sp, #16
  403fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  403ff0:	4628      	mov	r0, r5
  403ff2:	4b28      	ldr	r3, [pc, #160]	; (404094 <spi_read_reg+0xec>)
  403ff4:	4798      	blx	r3
	if (result != N_OK) {
  403ff6:	2801      	cmp	r0, #1
  403ff8:	d014      	beq.n	404024 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  403ffa:	f240 224b 	movw	r2, #587	; 0x24b
  403ffe:	4920      	ldr	r1, [pc, #128]	; (404080 <spi_read_reg+0xd8>)
  404000:	4820      	ldr	r0, [pc, #128]	; (404084 <spi_read_reg+0xdc>)
  404002:	4d21      	ldr	r5, [pc, #132]	; (404088 <spi_read_reg+0xe0>)
  404004:	47a8      	blx	r5
  404006:	4621      	mov	r1, r4
  404008:	4823      	ldr	r0, [pc, #140]	; (404098 <spi_read_reg+0xf0>)
  40400a:	47a8      	blx	r5
  40400c:	4820      	ldr	r0, [pc, #128]	; (404090 <spi_read_reg+0xe8>)
  40400e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404010:	2400      	movs	r4, #0
  404012:	9400      	str	r4, [sp, #0]
  404014:	4623      	mov	r3, r4
  404016:	4622      	mov	r2, r4
  404018:	4621      	mov	r1, r4
  40401a:	20cf      	movs	r0, #207	; 0xcf
  40401c:	4d17      	ldr	r5, [pc, #92]	; (40407c <spi_read_reg+0xd4>)
  40401e:	47a8      	blx	r5
		return N_FAIL;
  404020:	4620      	mov	r0, r4
  404022:	e7e2      	b.n	403fea <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  404024:	4632      	mov	r2, r6
  404026:	2104      	movs	r1, #4
  404028:	a803      	add	r0, sp, #12
  40402a:	4b1c      	ldr	r3, [pc, #112]	; (40409c <spi_read_reg+0xf4>)
  40402c:	4798      	blx	r3
	if (result != N_OK) {
  40402e:	2801      	cmp	r0, #1
  404030:	d110      	bne.n	404054 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  404032:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  404036:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40403a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  40403c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  404040:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  404044:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  404046:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  40404a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  40404e:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  404052:	e7ca      	b.n	403fea <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  404054:	f240 2253 	movw	r2, #595	; 0x253
  404058:	4909      	ldr	r1, [pc, #36]	; (404080 <spi_read_reg+0xd8>)
  40405a:	480a      	ldr	r0, [pc, #40]	; (404084 <spi_read_reg+0xdc>)
  40405c:	4c0a      	ldr	r4, [pc, #40]	; (404088 <spi_read_reg+0xe0>)
  40405e:	47a0      	blx	r4
  404060:	480f      	ldr	r0, [pc, #60]	; (4040a0 <spi_read_reg+0xf8>)
  404062:	47a0      	blx	r4
  404064:	480a      	ldr	r0, [pc, #40]	; (404090 <spi_read_reg+0xe8>)
  404066:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404068:	2400      	movs	r4, #0
  40406a:	9400      	str	r4, [sp, #0]
  40406c:	4623      	mov	r3, r4
  40406e:	4622      	mov	r2, r4
  404070:	4621      	mov	r1, r4
  404072:	20cf      	movs	r0, #207	; 0xcf
  404074:	4d01      	ldr	r5, [pc, #4]	; (40407c <spi_read_reg+0xd4>)
  404076:	47a8      	blx	r5
		return N_FAIL;
  404078:	4620      	mov	r0, r4
  40407a:	e7b6      	b.n	403fea <spi_read_reg+0x42>
  40407c:	00403d65 	.word	0x00403d65
  404080:	0040d114 	.word	0x0040d114
  404084:	0040cae4 	.word	0x0040cae4
  404088:	004060b9 	.word	0x004060b9
  40408c:	0040d60c 	.word	0x0040d60c
  404090:	0040cb10 	.word	0x0040cb10
  404094:	00403b69 	.word	0x00403b69
  404098:	0040d638 	.word	0x0040d638
  40409c:	00403c2d 	.word	0x00403c2d
  4040a0:	0040d66c 	.word	0x0040d66c

004040a4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4040a4:	2000      	movs	r0, #0
  4040a6:	4b01      	ldr	r3, [pc, #4]	; (4040ac <nm_spi_deinit+0x8>)
  4040a8:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4040aa:	4770      	bx	lr
  4040ac:	2040c360 	.word	0x2040c360

004040b0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4040b0:	b500      	push	{lr}
  4040b2:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4040b4:	a901      	add	r1, sp, #4
  4040b6:	4b03      	ldr	r3, [pc, #12]	; (4040c4 <nm_spi_read_reg+0x14>)
  4040b8:	4798      	blx	r3

	return u32Val;
}
  4040ba:	9801      	ldr	r0, [sp, #4]
  4040bc:	b003      	add	sp, #12
  4040be:	f85d fb04 	ldr.w	pc, [sp], #4
  4040c2:	bf00      	nop
  4040c4:	00403fa9 	.word	0x00403fa9

004040c8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4040c8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4040ca:	4b04      	ldr	r3, [pc, #16]	; (4040dc <nm_spi_read_reg_with_ret+0x14>)
  4040cc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4040ce:	2801      	cmp	r0, #1

	return s8Ret;
}
  4040d0:	bf0c      	ite	eq
  4040d2:	2000      	moveq	r0, #0
  4040d4:	f06f 0005 	mvnne.w	r0, #5
  4040d8:	bd08      	pop	{r3, pc}
  4040da:	bf00      	nop
  4040dc:	00403fa9 	.word	0x00403fa9

004040e0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4040e0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4040e2:	4b04      	ldr	r3, [pc, #16]	; (4040f4 <nm_spi_write_reg+0x14>)
  4040e4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4040e6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4040e8:	bf0c      	ite	eq
  4040ea:	2000      	moveq	r0, #0
  4040ec:	f06f 0005 	mvnne.w	r0, #5
  4040f0:	bd08      	pop	{r3, pc}
  4040f2:	bf00      	nop
  4040f4:	00403f15 	.word	0x00403f15

004040f8 <nm_spi_init>:
{
  4040f8:	b530      	push	{r4, r5, lr}
  4040fa:	b083      	sub	sp, #12
	uint32 reg =0;
  4040fc:	2300      	movs	r3, #0
  4040fe:	a902      	add	r1, sp, #8
  404100:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  404104:	4a34      	ldr	r2, [pc, #208]	; (4041d8 <nm_spi_init+0xe0>)
  404106:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  404108:	f64e 0024 	movw	r0, #59428	; 0xe824
  40410c:	4b33      	ldr	r3, [pc, #204]	; (4041dc <nm_spi_init+0xe4>)
  40410e:	4798      	blx	r3
  404110:	b348      	cbz	r0, 404166 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  404112:	4b31      	ldr	r3, [pc, #196]	; (4041d8 <nm_spi_init+0xe0>)
  404114:	781b      	ldrb	r3, [r3, #0]
  404116:	b97b      	cbnz	r3, 404138 <nm_spi_init+0x40>
		reg &= ~0x70;
  404118:	9900      	ldr	r1, [sp, #0]
  40411a:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  40411e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  404122:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  404124:	f64e 0024 	movw	r0, #59428	; 0xe824
  404128:	4b2d      	ldr	r3, [pc, #180]	; (4041e0 <nm_spi_init+0xe8>)
  40412a:	4798      	blx	r3
  40412c:	4604      	mov	r4, r0
  40412e:	2800      	cmp	r0, #0
  404130:	d039      	beq.n	4041a6 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  404132:	2201      	movs	r2, #1
  404134:	4b28      	ldr	r3, [pc, #160]	; (4041d8 <nm_spi_init+0xe0>)
  404136:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  404138:	a901      	add	r1, sp, #4
  40413a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40413e:	4b27      	ldr	r3, [pc, #156]	; (4041dc <nm_spi_init+0xe4>)
  404140:	4798      	blx	r3
  404142:	2800      	cmp	r0, #0
  404144:	d03a      	beq.n	4041bc <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  404146:	f64e 0024 	movw	r0, #59428	; 0xe824
  40414a:	4b26      	ldr	r3, [pc, #152]	; (4041e4 <nm_spi_init+0xec>)
  40414c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40414e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  404152:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  404156:	f64e 0024 	movw	r0, #59428	; 0xe824
  40415a:	4b23      	ldr	r3, [pc, #140]	; (4041e8 <nm_spi_init+0xf0>)
  40415c:	4798      	blx	r3
	return M2M_SUCCESS;
  40415e:	2400      	movs	r4, #0
}
  404160:	4620      	mov	r0, r4
  404162:	b003      	add	sp, #12
  404164:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  404166:	2201      	movs	r2, #1
  404168:	4b1b      	ldr	r3, [pc, #108]	; (4041d8 <nm_spi_init+0xe0>)
  40416a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  40416c:	f240 22c5 	movw	r2, #709	; 0x2c5
  404170:	491e      	ldr	r1, [pc, #120]	; (4041ec <nm_spi_init+0xf4>)
  404172:	481f      	ldr	r0, [pc, #124]	; (4041f0 <nm_spi_init+0xf8>)
  404174:	4c1f      	ldr	r4, [pc, #124]	; (4041f4 <nm_spi_init+0xfc>)
  404176:	47a0      	blx	r4
  404178:	481f      	ldr	r0, [pc, #124]	; (4041f8 <nm_spi_init+0x100>)
  40417a:	47a0      	blx	r4
  40417c:	481f      	ldr	r0, [pc, #124]	; (4041fc <nm_spi_init+0x104>)
  40417e:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  404180:	4669      	mov	r1, sp
  404182:	f64e 0024 	movw	r0, #59428	; 0xe824
  404186:	4b15      	ldr	r3, [pc, #84]	; (4041dc <nm_spi_init+0xe4>)
  404188:	4798      	blx	r3
  40418a:	4604      	mov	r4, r0
  40418c:	2800      	cmp	r0, #0
  40418e:	d1c0      	bne.n	404112 <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  404190:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  404194:	4915      	ldr	r1, [pc, #84]	; (4041ec <nm_spi_init+0xf4>)
  404196:	4816      	ldr	r0, [pc, #88]	; (4041f0 <nm_spi_init+0xf8>)
  404198:	4d16      	ldr	r5, [pc, #88]	; (4041f4 <nm_spi_init+0xfc>)
  40419a:	47a8      	blx	r5
  40419c:	4818      	ldr	r0, [pc, #96]	; (404200 <nm_spi_init+0x108>)
  40419e:	47a8      	blx	r5
  4041a0:	4816      	ldr	r0, [pc, #88]	; (4041fc <nm_spi_init+0x104>)
  4041a2:	47a8      	blx	r5
			return 0;
  4041a4:	e7dc      	b.n	404160 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4041a6:	f240 22d2 	movw	r2, #722	; 0x2d2
  4041aa:	4910      	ldr	r1, [pc, #64]	; (4041ec <nm_spi_init+0xf4>)
  4041ac:	4810      	ldr	r0, [pc, #64]	; (4041f0 <nm_spi_init+0xf8>)
  4041ae:	4d11      	ldr	r5, [pc, #68]	; (4041f4 <nm_spi_init+0xfc>)
  4041b0:	47a8      	blx	r5
  4041b2:	4814      	ldr	r0, [pc, #80]	; (404204 <nm_spi_init+0x10c>)
  4041b4:	47a8      	blx	r5
  4041b6:	4811      	ldr	r0, [pc, #68]	; (4041fc <nm_spi_init+0x104>)
  4041b8:	47a8      	blx	r5
			return 0;
  4041ba:	e7d1      	b.n	404160 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4041bc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4041c0:	490a      	ldr	r1, [pc, #40]	; (4041ec <nm_spi_init+0xf4>)
  4041c2:	480b      	ldr	r0, [pc, #44]	; (4041f0 <nm_spi_init+0xf8>)
  4041c4:	4c0b      	ldr	r4, [pc, #44]	; (4041f4 <nm_spi_init+0xfc>)
  4041c6:	47a0      	blx	r4
  4041c8:	480f      	ldr	r0, [pc, #60]	; (404208 <nm_spi_init+0x110>)
  4041ca:	47a0      	blx	r4
  4041cc:	480b      	ldr	r0, [pc, #44]	; (4041fc <nm_spi_init+0x104>)
  4041ce:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4041d0:	f06f 0405 	mvn.w	r4, #5
  4041d4:	e7c4      	b.n	404160 <nm_spi_init+0x68>
  4041d6:	bf00      	nop
  4041d8:	2040c360 	.word	0x2040c360
  4041dc:	00403fa9 	.word	0x00403fa9
  4041e0:	00403f15 	.word	0x00403f15
  4041e4:	004040b1 	.word	0x004040b1
  4041e8:	004040e1 	.word	0x004040e1
  4041ec:	0040d130 	.word	0x0040d130
  4041f0:	0040cae4 	.word	0x0040cae4
  4041f4:	004060b9 	.word	0x004060b9
  4041f8:	0040d23c 	.word	0x0040d23c
  4041fc:	0040cb10 	.word	0x0040cb10
  404200:	0040d28c 	.word	0x0040d28c
  404204:	0040d2bc 	.word	0x0040d2bc
  404208:	0040d2f0 	.word	0x0040d2f0

0040420c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40420c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40420e:	b083      	sub	sp, #12
  404210:	4604      	mov	r4, r0
  404212:	460f      	mov	r7, r1
  404214:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  404216:	2200      	movs	r2, #0
  404218:	9200      	str	r2, [sp, #0]
  40421a:	462b      	mov	r3, r5
  40421c:	4601      	mov	r1, r0
  40421e:	20c8      	movs	r0, #200	; 0xc8
  404220:	4e22      	ldr	r6, [pc, #136]	; (4042ac <nm_spi_read_block+0xa0>)
  404222:	47b0      	blx	r6
	if (result != N_OK) {
  404224:	2801      	cmp	r0, #1
  404226:	d00e      	beq.n	404246 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  404228:	f44f 721d 	mov.w	r2, #628	; 0x274
  40422c:	4920      	ldr	r1, [pc, #128]	; (4042b0 <nm_spi_read_block+0xa4>)
  40422e:	4821      	ldr	r0, [pc, #132]	; (4042b4 <nm_spi_read_block+0xa8>)
  404230:	4d21      	ldr	r5, [pc, #132]	; (4042b8 <nm_spi_read_block+0xac>)
  404232:	47a8      	blx	r5
  404234:	4621      	mov	r1, r4
  404236:	4821      	ldr	r0, [pc, #132]	; (4042bc <nm_spi_read_block+0xb0>)
  404238:	47a8      	blx	r5
  40423a:	4821      	ldr	r0, [pc, #132]	; (4042c0 <nm_spi_read_block+0xb4>)
  40423c:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40423e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404242:	b003      	add	sp, #12
  404244:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  404246:	20c8      	movs	r0, #200	; 0xc8
  404248:	4b1e      	ldr	r3, [pc, #120]	; (4042c4 <nm_spi_read_block+0xb8>)
  40424a:	4798      	blx	r3
	if (result != N_OK) {
  40424c:	2801      	cmp	r0, #1
  40424e:	d012      	beq.n	404276 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  404250:	f240 227a 	movw	r2, #634	; 0x27a
  404254:	4916      	ldr	r1, [pc, #88]	; (4042b0 <nm_spi_read_block+0xa4>)
  404256:	4817      	ldr	r0, [pc, #92]	; (4042b4 <nm_spi_read_block+0xa8>)
  404258:	4d17      	ldr	r5, [pc, #92]	; (4042b8 <nm_spi_read_block+0xac>)
  40425a:	47a8      	blx	r5
  40425c:	4621      	mov	r1, r4
  40425e:	481a      	ldr	r0, [pc, #104]	; (4042c8 <nm_spi_read_block+0xbc>)
  404260:	47a8      	blx	r5
  404262:	4817      	ldr	r0, [pc, #92]	; (4042c0 <nm_spi_read_block+0xb4>)
  404264:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404266:	2100      	movs	r1, #0
  404268:	9100      	str	r1, [sp, #0]
  40426a:	460b      	mov	r3, r1
  40426c:	460a      	mov	r2, r1
  40426e:	20cf      	movs	r0, #207	; 0xcf
  404270:	4c0e      	ldr	r4, [pc, #56]	; (4042ac <nm_spi_read_block+0xa0>)
  404272:	47a0      	blx	r4
  404274:	e7e3      	b.n	40423e <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  404276:	2200      	movs	r2, #0
  404278:	4629      	mov	r1, r5
  40427a:	4638      	mov	r0, r7
  40427c:	4b13      	ldr	r3, [pc, #76]	; (4042cc <nm_spi_read_block+0xc0>)
  40427e:	4798      	blx	r3
	if (result != N_OK) {
  404280:	2801      	cmp	r0, #1
  404282:	d011      	beq.n	4042a8 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  404284:	f44f 7221 	mov.w	r2, #644	; 0x284
  404288:	4909      	ldr	r1, [pc, #36]	; (4042b0 <nm_spi_read_block+0xa4>)
  40428a:	480a      	ldr	r0, [pc, #40]	; (4042b4 <nm_spi_read_block+0xa8>)
  40428c:	4c0a      	ldr	r4, [pc, #40]	; (4042b8 <nm_spi_read_block+0xac>)
  40428e:	47a0      	blx	r4
  404290:	480f      	ldr	r0, [pc, #60]	; (4042d0 <nm_spi_read_block+0xc4>)
  404292:	47a0      	blx	r4
  404294:	480a      	ldr	r0, [pc, #40]	; (4042c0 <nm_spi_read_block+0xb4>)
  404296:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404298:	2100      	movs	r1, #0
  40429a:	9100      	str	r1, [sp, #0]
  40429c:	460b      	mov	r3, r1
  40429e:	460a      	mov	r2, r1
  4042a0:	20cf      	movs	r0, #207	; 0xcf
  4042a2:	4c02      	ldr	r4, [pc, #8]	; (4042ac <nm_spi_read_block+0xa0>)
  4042a4:	47a0      	blx	r4
  4042a6:	e7ca      	b.n	40423e <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4042a8:	2000      	movs	r0, #0
  4042aa:	e7ca      	b.n	404242 <nm_spi_read_block+0x36>
  4042ac:	00403d65 	.word	0x00403d65
  4042b0:	0040d124 	.word	0x0040d124
  4042b4:	0040cae4 	.word	0x0040cae4
  4042b8:	004060b9 	.word	0x004060b9
  4042bc:	0040d318 	.word	0x0040d318
  4042c0:	0040cb10 	.word	0x0040cb10
  4042c4:	00403b69 	.word	0x00403b69
  4042c8:	0040d348 	.word	0x0040d348
  4042cc:	00403c2d 	.word	0x00403c2d
  4042d0:	0040d380 	.word	0x0040d380

004042d4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4042d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4042d8:	b085      	sub	sp, #20
  4042da:	4604      	mov	r4, r0
  4042dc:	4688      	mov	r8, r1
  4042de:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4042e0:	2200      	movs	r2, #0
  4042e2:	9200      	str	r2, [sp, #0]
  4042e4:	462b      	mov	r3, r5
  4042e6:	4601      	mov	r1, r0
  4042e8:	20c7      	movs	r0, #199	; 0xc7
  4042ea:	4e4d      	ldr	r6, [pc, #308]	; (404420 <nm_spi_write_block+0x14c>)
  4042ec:	47b0      	blx	r6
	if (result != N_OK) {
  4042ee:	2801      	cmp	r0, #1
  4042f0:	d00f      	beq.n	404312 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4042f2:	f240 220f 	movw	r2, #527	; 0x20f
  4042f6:	494b      	ldr	r1, [pc, #300]	; (404424 <nm_spi_write_block+0x150>)
  4042f8:	484b      	ldr	r0, [pc, #300]	; (404428 <nm_spi_write_block+0x154>)
  4042fa:	4d4c      	ldr	r5, [pc, #304]	; (40442c <nm_spi_write_block+0x158>)
  4042fc:	47a8      	blx	r5
  4042fe:	4621      	mov	r1, r4
  404300:	484b      	ldr	r0, [pc, #300]	; (404430 <nm_spi_write_block+0x15c>)
  404302:	47a8      	blx	r5
  404304:	484b      	ldr	r0, [pc, #300]	; (404434 <nm_spi_write_block+0x160>)
  404306:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404308:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40430c:	b005      	add	sp, #20
  40430e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  404312:	20c7      	movs	r0, #199	; 0xc7
  404314:	4b48      	ldr	r3, [pc, #288]	; (404438 <nm_spi_write_block+0x164>)
  404316:	4798      	blx	r3
	if (result != N_OK) {
  404318:	2801      	cmp	r0, #1
  40431a:	d012      	beq.n	404342 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  40431c:	f240 2215 	movw	r2, #533	; 0x215
  404320:	4940      	ldr	r1, [pc, #256]	; (404424 <nm_spi_write_block+0x150>)
  404322:	4841      	ldr	r0, [pc, #260]	; (404428 <nm_spi_write_block+0x154>)
  404324:	4d41      	ldr	r5, [pc, #260]	; (40442c <nm_spi_write_block+0x158>)
  404326:	47a8      	blx	r5
  404328:	4621      	mov	r1, r4
  40432a:	4844      	ldr	r0, [pc, #272]	; (40443c <nm_spi_write_block+0x168>)
  40432c:	47a8      	blx	r5
  40432e:	4841      	ldr	r0, [pc, #260]	; (404434 <nm_spi_write_block+0x160>)
  404330:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404332:	2100      	movs	r1, #0
  404334:	9100      	str	r1, [sp, #0]
  404336:	460b      	mov	r3, r1
  404338:	460a      	mov	r2, r1
  40433a:	20cf      	movs	r0, #207	; 0xcf
  40433c:	4c38      	ldr	r4, [pc, #224]	; (404420 <nm_spi_write_block+0x14c>)
  40433e:	47a0      	blx	r4
  404340:	e7e2      	b.n	404308 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  404342:	2400      	movs	r4, #0
  404344:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404348:	4f3d      	ldr	r7, [pc, #244]	; (404440 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  40434a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 404458 <nm_spi_write_block+0x184>
  40434e:	e01d      	b.n	40438c <nm_spi_write_block+0xb8>
				order = 0x2;
  404350:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404354:	bf94      	ite	ls
  404356:	2303      	movls	r3, #3
  404358:	2302      	movhi	r3, #2
		cmd |= order;
  40435a:	f063 030f 	orn	r3, r3, #15
  40435e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404362:	2101      	movs	r1, #1
  404364:	f10d 000b 	add.w	r0, sp, #11
  404368:	47b8      	blx	r7
  40436a:	b9e8      	cbnz	r0, 4043a8 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40436c:	4631      	mov	r1, r6
  40436e:	eb08 0004 	add.w	r0, r8, r4
  404372:	47b8      	blx	r7
  404374:	2800      	cmp	r0, #0
  404376:	d135      	bne.n	4043e4 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  404378:	f899 3000 	ldrb.w	r3, [r9]
  40437c:	2b00      	cmp	r3, #0
  40437e:	d03c      	beq.n	4043fa <nm_spi_write_block+0x126>
		ix += nbytes;
  404380:	4434      	add	r4, r6
  404382:	b224      	sxth	r4, r4
		sz -= nbytes;
  404384:	1bad      	subs	r5, r5, r6
  404386:	b2ad      	uxth	r5, r5
	} while (sz);
  404388:	2d00      	cmp	r5, #0
  40438a:	d046      	beq.n	40441a <nm_spi_write_block+0x146>
  40438c:	462e      	mov	r6, r5
  40438e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404392:	bf28      	it	cs
  404394:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  404398:	2c00      	cmp	r4, #0
  40439a:	d1d9      	bne.n	404350 <nm_spi_write_block+0x7c>
				order = 0x1;
  40439c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4043a0:	bf94      	ite	ls
  4043a2:	2303      	movls	r3, #3
  4043a4:	2301      	movhi	r3, #1
  4043a6:	e7d8      	b.n	40435a <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4043a8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4043ac:	4925      	ldr	r1, [pc, #148]	; (404444 <nm_spi_write_block+0x170>)
  4043ae:	481e      	ldr	r0, [pc, #120]	; (404428 <nm_spi_write_block+0x154>)
  4043b0:	4c1e      	ldr	r4, [pc, #120]	; (40442c <nm_spi_write_block+0x158>)
  4043b2:	47a0      	blx	r4
  4043b4:	4824      	ldr	r0, [pc, #144]	; (404448 <nm_spi_write_block+0x174>)
  4043b6:	47a0      	blx	r4
  4043b8:	481e      	ldr	r0, [pc, #120]	; (404434 <nm_spi_write_block+0x160>)
  4043ba:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4043bc:	f240 2226 	movw	r2, #550	; 0x226
  4043c0:	4918      	ldr	r1, [pc, #96]	; (404424 <nm_spi_write_block+0x150>)
  4043c2:	4819      	ldr	r0, [pc, #100]	; (404428 <nm_spi_write_block+0x154>)
  4043c4:	4c19      	ldr	r4, [pc, #100]	; (40442c <nm_spi_write_block+0x158>)
  4043c6:	47a0      	blx	r4
  4043c8:	4820      	ldr	r0, [pc, #128]	; (40444c <nm_spi_write_block+0x178>)
  4043ca:	47a0      	blx	r4
  4043cc:	4819      	ldr	r0, [pc, #100]	; (404434 <nm_spi_write_block+0x160>)
  4043ce:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4043d0:	2400      	movs	r4, #0
  4043d2:	9400      	str	r4, [sp, #0]
  4043d4:	4623      	mov	r3, r4
  4043d6:	4622      	mov	r2, r4
  4043d8:	4621      	mov	r1, r4
  4043da:	20cf      	movs	r0, #207	; 0xcf
  4043dc:	4d10      	ldr	r5, [pc, #64]	; (404420 <nm_spi_write_block+0x14c>)
  4043de:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4043e0:	4620      	mov	r0, r4
  4043e2:	e793      	b.n	40430c <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4043e4:	f240 12b1 	movw	r2, #433	; 0x1b1
  4043e8:	4916      	ldr	r1, [pc, #88]	; (404444 <nm_spi_write_block+0x170>)
  4043ea:	480f      	ldr	r0, [pc, #60]	; (404428 <nm_spi_write_block+0x154>)
  4043ec:	4c0f      	ldr	r4, [pc, #60]	; (40442c <nm_spi_write_block+0x158>)
  4043ee:	47a0      	blx	r4
  4043f0:	4817      	ldr	r0, [pc, #92]	; (404450 <nm_spi_write_block+0x17c>)
  4043f2:	47a0      	blx	r4
  4043f4:	480f      	ldr	r0, [pc, #60]	; (404434 <nm_spi_write_block+0x160>)
  4043f6:	47a0      	blx	r4
  4043f8:	e7e0      	b.n	4043bc <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4043fa:	2102      	movs	r1, #2
  4043fc:	a803      	add	r0, sp, #12
  4043fe:	47b8      	blx	r7
  404400:	2800      	cmp	r0, #0
  404402:	d0bd      	beq.n	404380 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  404404:	f240 12bb 	movw	r2, #443	; 0x1bb
  404408:	490e      	ldr	r1, [pc, #56]	; (404444 <nm_spi_write_block+0x170>)
  40440a:	4807      	ldr	r0, [pc, #28]	; (404428 <nm_spi_write_block+0x154>)
  40440c:	4c07      	ldr	r4, [pc, #28]	; (40442c <nm_spi_write_block+0x158>)
  40440e:	47a0      	blx	r4
  404410:	4810      	ldr	r0, [pc, #64]	; (404454 <nm_spi_write_block+0x180>)
  404412:	47a0      	blx	r4
  404414:	4807      	ldr	r0, [pc, #28]	; (404434 <nm_spi_write_block+0x160>)
  404416:	47a0      	blx	r4
  404418:	e7d0      	b.n	4043bc <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40441a:	2000      	movs	r0, #0
  40441c:	e776      	b.n	40430c <nm_spi_write_block+0x38>
  40441e:	bf00      	nop
  404420:	00403d65 	.word	0x00403d65
  404424:	0040d104 	.word	0x0040d104
  404428:	0040cae4 	.word	0x0040cae4
  40442c:	004060b9 	.word	0x004060b9
  404430:	0040d3a8 	.word	0x0040d3a8
  404434:	0040cb10 	.word	0x0040cb10
  404438:	00403b69 	.word	0x00403b69
  40443c:	0040d3d8 	.word	0x0040d3d8
  404440:	00403d45 	.word	0x00403d45
  404444:	0040d0e4 	.word	0x0040d0e4
  404448:	0040d410 	.word	0x0040d410
  40444c:	0040d4b4 	.word	0x0040d4b4
  404450:	0040d448 	.word	0x0040d448
  404454:	0040d47c 	.word	0x0040d47c
  404458:	2040c360 	.word	0x2040c360

0040445c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40445c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404460:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  404464:	b194      	cbz	r4, 40448c <Socket_ReadSocketData+0x30>
  404466:	4681      	mov	r9, r0
  404468:	460e      	mov	r6, r1
  40446a:	4692      	mov	sl, r2
  40446c:	4698      	mov	r8, r3
  40446e:	0103      	lsls	r3, r0, #4
  404470:	4922      	ldr	r1, [pc, #136]	; (4044fc <Socket_ReadSocketData+0xa0>)
  404472:	58cb      	ldr	r3, [r1, r3]
  404474:	b153      	cbz	r3, 40448c <Socket_ReadSocketData+0x30>
  404476:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40447a:	889b      	ldrh	r3, [r3, #4]
  40447c:	b29b      	uxth	r3, r3
  40447e:	b12b      	cbz	r3, 40448c <Socket_ReadSocketData+0x30>
  404480:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404484:	7a9b      	ldrb	r3, [r3, #10]
  404486:	b2db      	uxtb	r3, r3
  404488:	2b01      	cmp	r3, #1
  40448a:	d001      	beq.n	404490 <Socket_ReadSocketData+0x34>
  40448c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  404490:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  404492:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404496:	f8df b07c 	ldr.w	fp, [pc, #124]	; 404514 <Socket_ReadSocketData+0xb8>
  40449a:	e006      	b.n	4044aa <Socket_ReadSocketData+0x4e>
  40449c:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  40449e:	2301      	movs	r3, #1
  4044a0:	e00b      	b.n	4044ba <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4044a2:	1b64      	subs	r4, r4, r5
  4044a4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4044a6:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4044a8:	b1ec      	cbz	r4, 4044e6 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4044aa:	88bb      	ldrh	r3, [r7, #4]
  4044ac:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4044ae:	b21b      	sxth	r3, r3
  4044b0:	2b00      	cmp	r3, #0
  4044b2:	ddf3      	ble.n	40449c <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4044b4:	88bd      	ldrh	r5, [r7, #4]
  4044b6:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4044b8:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4044ba:	6839      	ldr	r1, [r7, #0]
  4044bc:	462a      	mov	r2, r5
  4044be:	4640      	mov	r0, r8
  4044c0:	47d8      	blx	fp
  4044c2:	b990      	cbnz	r0, 4044ea <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4044c4:	683b      	ldr	r3, [r7, #0]
  4044c6:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4044c8:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4044ca:	88f3      	ldrh	r3, [r6, #6]
  4044cc:	1b5b      	subs	r3, r3, r5
  4044ce:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  4044d0:	4b0b      	ldr	r3, [pc, #44]	; (404500 <Socket_ReadSocketData+0xa4>)
  4044d2:	681b      	ldr	r3, [r3, #0]
  4044d4:	2b00      	cmp	r3, #0
  4044d6:	d0e4      	beq.n	4044a2 <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4044d8:	4b09      	ldr	r3, [pc, #36]	; (404500 <Socket_ReadSocketData+0xa4>)
  4044da:	681b      	ldr	r3, [r3, #0]
  4044dc:	4632      	mov	r2, r6
  4044de:	4651      	mov	r1, sl
  4044e0:	4648      	mov	r0, r9
  4044e2:	4798      	blx	r3
  4044e4:	e7dd      	b.n	4044a2 <Socket_ReadSocketData+0x46>
  4044e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4044ea:	4806      	ldr	r0, [pc, #24]	; (404504 <Socket_ReadSocketData+0xa8>)
  4044ec:	4d06      	ldr	r5, [pc, #24]	; (404508 <Socket_ReadSocketData+0xac>)
  4044ee:	47a8      	blx	r5
  4044f0:	4621      	mov	r1, r4
  4044f2:	4806      	ldr	r0, [pc, #24]	; (40450c <Socket_ReadSocketData+0xb0>)
  4044f4:	47a8      	blx	r5
  4044f6:	4806      	ldr	r0, [pc, #24]	; (404510 <Socket_ReadSocketData+0xb4>)
  4044f8:	47a8      	blx	r5
	}
}
  4044fa:	e7c7      	b.n	40448c <Socket_ReadSocketData+0x30>
  4044fc:	2040cf58 	.word	0x2040cf58
  404500:	2040d008 	.word	0x2040d008
  404504:	0040cdb8 	.word	0x0040cdb8
  404508:	004060b9 	.word	0x004060b9
  40450c:	0040d6f0 	.word	0x0040d6f0
  404510:	0040cb10 	.word	0x0040cb10
  404514:	00402b95 	.word	0x00402b95

00404518 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404518:	b5f0      	push	{r4, r5, r6, r7, lr}
  40451a:	b099      	sub	sp, #100	; 0x64
  40451c:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40451e:	2841      	cmp	r0, #65	; 0x41
  404520:	d049      	beq.n	4045b6 <m2m_ip_cb+0x9e>
  404522:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404524:	2842      	cmp	r0, #66	; 0x42
  404526:	d05f      	beq.n	4045e8 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404528:	2843      	cmp	r0, #67	; 0x43
  40452a:	d075      	beq.n	404618 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40452c:	2844      	cmp	r0, #68	; 0x44
  40452e:	f000 80b0 	beq.w	404692 <m2m_ip_cb+0x17a>
  404532:	284b      	cmp	r0, #75	; 0x4b
  404534:	f000 80ad 	beq.w	404692 <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404538:	284a      	cmp	r0, #74	; 0x4a
  40453a:	f000 80cc 	beq.w	4046d6 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40453e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  404542:	b2db      	uxtb	r3, r3
  404544:	2b07      	cmp	r3, #7
  404546:	f200 80f4 	bhi.w	404732 <m2m_ip_cb+0x21a>
  40454a:	2285      	movs	r2, #133	; 0x85
  40454c:	fa22 f303 	lsr.w	r3, r2, r3
  404550:	f013 0f01 	tst.w	r3, #1
  404554:	f000 80ed 	beq.w	404732 <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404558:	2848      	cmp	r0, #72	; 0x48
  40455a:	bf14      	ite	ne
  40455c:	2706      	movne	r7, #6
  40455e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  404560:	2300      	movs	r3, #0
  404562:	2210      	movs	r2, #16
  404564:	a903      	add	r1, sp, #12
  404566:	4620      	mov	r0, r4
  404568:	4e93      	ldr	r6, [pc, #588]	; (4047b8 <m2m_ip_cb+0x2a0>)
  40456a:	47b0      	blx	r6
  40456c:	2800      	cmp	r0, #0
  40456e:	f040 80b0 	bne.w	4046d2 <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  404572:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  404576:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  40457a:	4a90      	ldr	r2, [pc, #576]	; (4047bc <m2m_ip_cb+0x2a4>)
  40457c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404580:	2300      	movs	r3, #0
  404582:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  404584:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  404588:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  40458c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  404590:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  404594:	9e04      	ldr	r6, [sp, #16]
  404596:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404598:	88d2      	ldrh	r2, [r2, #6]
  40459a:	b292      	uxth	r2, r2
  40459c:	4291      	cmp	r1, r2
  40459e:	f000 80ac 	beq.w	4046fa <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4045a2:	2d10      	cmp	r5, #16
  4045a4:	f240 8095 	bls.w	4046d2 <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4045a8:	2301      	movs	r3, #1
  4045aa:	2200      	movs	r2, #0
  4045ac:	4611      	mov	r1, r2
  4045ae:	4610      	mov	r0, r2
  4045b0:	4c81      	ldr	r4, [pc, #516]	; (4047b8 <m2m_ip_cb+0x2a0>)
  4045b2:	47a0      	blx	r4
	{
  4045b4:	e08d      	b.n	4046d2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4045b6:	2300      	movs	r3, #0
  4045b8:	2204      	movs	r2, #4
  4045ba:	a907      	add	r1, sp, #28
  4045bc:	4620      	mov	r0, r4
  4045be:	4c7e      	ldr	r4, [pc, #504]	; (4047b8 <m2m_ip_cb+0x2a0>)
  4045c0:	47a0      	blx	r4
  4045c2:	2800      	cmp	r0, #0
  4045c4:	f040 8085 	bne.w	4046d2 <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4045c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4045cc:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4045d0:	4b7b      	ldr	r3, [pc, #492]	; (4047c0 <m2m_ip_cb+0x2a8>)
  4045d2:	681b      	ldr	r3, [r3, #0]
  4045d4:	2b00      	cmp	r3, #0
  4045d6:	d07c      	beq.n	4046d2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4045d8:	4b79      	ldr	r3, [pc, #484]	; (4047c0 <m2m_ip_cb+0x2a8>)
  4045da:	681b      	ldr	r3, [r3, #0]
  4045dc:	aa03      	add	r2, sp, #12
  4045de:	2101      	movs	r1, #1
  4045e0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4045e4:	4798      	blx	r3
  4045e6:	e074      	b.n	4046d2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4045e8:	2300      	movs	r3, #0
  4045ea:	2204      	movs	r2, #4
  4045ec:	a907      	add	r1, sp, #28
  4045ee:	4620      	mov	r0, r4
  4045f0:	4c71      	ldr	r4, [pc, #452]	; (4047b8 <m2m_ip_cb+0x2a0>)
  4045f2:	47a0      	blx	r4
  4045f4:	2800      	cmp	r0, #0
  4045f6:	d16c      	bne.n	4046d2 <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  4045f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4045fc:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  404600:	4b6f      	ldr	r3, [pc, #444]	; (4047c0 <m2m_ip_cb+0x2a8>)
  404602:	681b      	ldr	r3, [r3, #0]
  404604:	2b00      	cmp	r3, #0
  404606:	d064      	beq.n	4046d2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404608:	4b6d      	ldr	r3, [pc, #436]	; (4047c0 <m2m_ip_cb+0x2a8>)
  40460a:	681b      	ldr	r3, [r3, #0]
  40460c:	aa03      	add	r2, sp, #12
  40460e:	2102      	movs	r1, #2
  404610:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404614:	4798      	blx	r3
  404616:	e05c      	b.n	4046d2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404618:	2300      	movs	r3, #0
  40461a:	220c      	movs	r2, #12
  40461c:	eb0d 0102 	add.w	r1, sp, r2
  404620:	4620      	mov	r0, r4
  404622:	4c65      	ldr	r4, [pc, #404]	; (4047b8 <m2m_ip_cb+0x2a0>)
  404624:	47a0      	blx	r4
  404626:	2800      	cmp	r0, #0
  404628:	d153      	bne.n	4046d2 <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  40462a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40462e:	2b00      	cmp	r3, #0
  404630:	db19      	blt.n	404666 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  404632:	4a62      	ldr	r2, [pc, #392]	; (4047bc <m2m_ip_cb+0x2a4>)
  404634:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404638:	2100      	movs	r1, #0
  40463a:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40463c:	2101      	movs	r1, #1
  40463e:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  404640:	4960      	ldr	r1, [pc, #384]	; (4047c4 <m2m_ip_cb+0x2ac>)
  404642:	880a      	ldrh	r2, [r1, #0]
  404644:	3201      	adds	r2, #1
  404646:	b292      	uxth	r2, r2
  404648:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  40464a:	880a      	ldrh	r2, [r1, #0]
  40464c:	b292      	uxth	r2, r2
  40464e:	b91a      	cbnz	r2, 404658 <m2m_ip_cb+0x140>
					++gu16SessionID;
  404650:	880a      	ldrh	r2, [r1, #0]
  404652:	3201      	adds	r2, #1
  404654:	b292      	uxth	r2, r2
  404656:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404658:	4a5a      	ldr	r2, [pc, #360]	; (4047c4 <m2m_ip_cb+0x2ac>)
  40465a:	8811      	ldrh	r1, [r2, #0]
  40465c:	b289      	uxth	r1, r1
  40465e:	4a57      	ldr	r2, [pc, #348]	; (4047bc <m2m_ip_cb+0x2a4>)
  404660:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404664:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  404666:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  40466a:	2302      	movs	r3, #2
  40466c:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  404670:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  404674:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404678:	9b04      	ldr	r3, [sp, #16]
  40467a:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  40467c:	4b50      	ldr	r3, [pc, #320]	; (4047c0 <m2m_ip_cb+0x2a8>)
  40467e:	681b      	ldr	r3, [r3, #0]
  404680:	b33b      	cbz	r3, 4046d2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  404682:	4b4f      	ldr	r3, [pc, #316]	; (4047c0 <m2m_ip_cb+0x2a8>)
  404684:	681b      	ldr	r3, [r3, #0]
  404686:	aa07      	add	r2, sp, #28
  404688:	2104      	movs	r1, #4
  40468a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  40468e:	4798      	blx	r3
  404690:	e01f      	b.n	4046d2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  404692:	2300      	movs	r3, #0
  404694:	2204      	movs	r2, #4
  404696:	a907      	add	r1, sp, #28
  404698:	4620      	mov	r0, r4
  40469a:	4c47      	ldr	r4, [pc, #284]	; (4047b8 <m2m_ip_cb+0x2a0>)
  40469c:	47a0      	blx	r4
  40469e:	b9c0      	cbnz	r0, 4046d2 <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4046a0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4046a4:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4046a8:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4046ac:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4046b0:	b93b      	cbnz	r3, 4046c2 <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4046b2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4046b6:	3b08      	subs	r3, #8
  4046b8:	b29b      	uxth	r3, r3
  4046ba:	4a40      	ldr	r2, [pc, #256]	; (4047bc <m2m_ip_cb+0x2a4>)
  4046bc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4046c0:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4046c2:	4b3f      	ldr	r3, [pc, #252]	; (4047c0 <m2m_ip_cb+0x2a8>)
  4046c4:	681b      	ldr	r3, [r3, #0]
  4046c6:	b123      	cbz	r3, 4046d2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4046c8:	4b3d      	ldr	r3, [pc, #244]	; (4047c0 <m2m_ip_cb+0x2a8>)
  4046ca:	681b      	ldr	r3, [r3, #0]
  4046cc:	aa03      	add	r2, sp, #12
  4046ce:	2105      	movs	r1, #5
  4046d0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4046d2:	b019      	add	sp, #100	; 0x64
  4046d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4046d6:	2300      	movs	r3, #0
  4046d8:	2244      	movs	r2, #68	; 0x44
  4046da:	a907      	add	r1, sp, #28
  4046dc:	4620      	mov	r0, r4
  4046de:	4c36      	ldr	r4, [pc, #216]	; (4047b8 <m2m_ip_cb+0x2a0>)
  4046e0:	47a0      	blx	r4
  4046e2:	2800      	cmp	r0, #0
  4046e4:	d1f5      	bne.n	4046d2 <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  4046e6:	4b38      	ldr	r3, [pc, #224]	; (4047c8 <m2m_ip_cb+0x2b0>)
  4046e8:	681b      	ldr	r3, [r3, #0]
  4046ea:	2b00      	cmp	r3, #0
  4046ec:	d0f1      	beq.n	4046d2 <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  4046ee:	4b36      	ldr	r3, [pc, #216]	; (4047c8 <m2m_ip_cb+0x2b0>)
  4046f0:	681b      	ldr	r3, [r3, #0]
  4046f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4046f4:	a807      	add	r0, sp, #28
  4046f6:	4798      	blx	r3
  4046f8:	e7eb      	b.n	4046d2 <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4046fa:	f1be 0f00 	cmp.w	lr, #0
  4046fe:	dd01      	ble.n	404704 <m2m_ip_cb+0x1ec>
  404700:	45ae      	cmp	lr, r5
  404702:	db0d      	blt.n	404720 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  404704:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404708:	2300      	movs	r3, #0
  40470a:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  40470c:	4b2c      	ldr	r3, [pc, #176]	; (4047c0 <m2m_ip_cb+0x2a8>)
  40470e:	681b      	ldr	r3, [r3, #0]
  404710:	2b00      	cmp	r3, #0
  404712:	d0de      	beq.n	4046d2 <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  404714:	4b2a      	ldr	r3, [pc, #168]	; (4047c0 <m2m_ip_cb+0x2a8>)
  404716:	681b      	ldr	r3, [r3, #0]
  404718:	aa07      	add	r2, sp, #28
  40471a:	4639      	mov	r1, r7
  40471c:	4798      	blx	r3
  40471e:	e7d8      	b.n	4046d2 <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  404720:	fa1f f28e 	uxth.w	r2, lr
  404724:	9200      	str	r2, [sp, #0]
  404726:	4423      	add	r3, r4
  404728:	463a      	mov	r2, r7
  40472a:	a907      	add	r1, sp, #28
  40472c:	4c27      	ldr	r4, [pc, #156]	; (4047cc <m2m_ip_cb+0x2b4>)
  40472e:	47a0      	blx	r4
  404730:	e7cf      	b.n	4046d2 <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  404732:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404736:	2b45      	cmp	r3, #69	; 0x45
  404738:	d019      	beq.n	40476e <m2m_ip_cb+0x256>
  40473a:	284c      	cmp	r0, #76	; 0x4c
  40473c:	d017      	beq.n	40476e <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40473e:	2852      	cmp	r0, #82	; 0x52
  404740:	d1c7      	bne.n	4046d2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  404742:	2301      	movs	r3, #1
  404744:	2214      	movs	r2, #20
  404746:	a907      	add	r1, sp, #28
  404748:	4620      	mov	r0, r4
  40474a:	4c1b      	ldr	r4, [pc, #108]	; (4047b8 <m2m_ip_cb+0x2a0>)
  40474c:	47a0      	blx	r4
  40474e:	2800      	cmp	r0, #0
  404750:	d1bf      	bne.n	4046d2 <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  404752:	4b1f      	ldr	r3, [pc, #124]	; (4047d0 <m2m_ip_cb+0x2b8>)
  404754:	9a08      	ldr	r2, [sp, #32]
  404756:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404758:	681b      	ldr	r3, [r3, #0]
  40475a:	2b00      	cmp	r3, #0
  40475c:	d0b9      	beq.n	4046d2 <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40475e:	4b1c      	ldr	r3, [pc, #112]	; (4047d0 <m2m_ip_cb+0x2b8>)
  404760:	681b      	ldr	r3, [r3, #0]
  404762:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  404766:	9909      	ldr	r1, [sp, #36]	; 0x24
  404768:	9807      	ldr	r0, [sp, #28]
  40476a:	4798      	blx	r3
}
  40476c:	e7b1      	b.n	4046d2 <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40476e:	2847      	cmp	r0, #71	; 0x47
  404770:	bf14      	ite	ne
  404772:	2507      	movne	r5, #7
  404774:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404776:	2300      	movs	r3, #0
  404778:	2208      	movs	r2, #8
  40477a:	a907      	add	r1, sp, #28
  40477c:	4620      	mov	r0, r4
  40477e:	4c0e      	ldr	r4, [pc, #56]	; (4047b8 <m2m_ip_cb+0x2a0>)
  404780:	47a0      	blx	r4
  404782:	2800      	cmp	r0, #0
  404784:	d1a5      	bne.n	4046d2 <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  404786:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40478a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40478e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404792:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404796:	4b09      	ldr	r3, [pc, #36]	; (4047bc <m2m_ip_cb+0x2a4>)
  404798:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40479c:	88db      	ldrh	r3, [r3, #6]
  40479e:	b29b      	uxth	r3, r3
  4047a0:	429a      	cmp	r2, r3
  4047a2:	d196      	bne.n	4046d2 <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4047a4:	4b06      	ldr	r3, [pc, #24]	; (4047c0 <m2m_ip_cb+0x2a8>)
  4047a6:	681b      	ldr	r3, [r3, #0]
  4047a8:	2b00      	cmp	r3, #0
  4047aa:	d092      	beq.n	4046d2 <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4047ac:	4b04      	ldr	r3, [pc, #16]	; (4047c0 <m2m_ip_cb+0x2a8>)
  4047ae:	681b      	ldr	r3, [r3, #0]
  4047b0:	aa03      	add	r2, sp, #12
  4047b2:	4629      	mov	r1, r5
  4047b4:	4798      	blx	r3
	{
  4047b6:	e78c      	b.n	4046d2 <m2m_ip_cb+0x1ba>
  4047b8:	00402b95 	.word	0x00402b95
  4047bc:	2040cf58 	.word	0x2040cf58
  4047c0:	2040d008 	.word	0x2040d008
  4047c4:	2040c362 	.word	0x2040c362
  4047c8:	2040d010 	.word	0x2040d010
  4047cc:	0040445d 	.word	0x0040445d
  4047d0:	2040d00c 	.word	0x2040d00c

004047d4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4047d4:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4047d6:	4b0a      	ldr	r3, [pc, #40]	; (404800 <socketInit+0x2c>)
  4047d8:	781b      	ldrb	r3, [r3, #0]
  4047da:	b103      	cbz	r3, 4047de <socketInit+0xa>
  4047dc:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4047de:	22b0      	movs	r2, #176	; 0xb0
  4047e0:	2100      	movs	r1, #0
  4047e2:	4808      	ldr	r0, [pc, #32]	; (404804 <socketInit+0x30>)
  4047e4:	4b08      	ldr	r3, [pc, #32]	; (404808 <socketInit+0x34>)
  4047e6:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4047e8:	4908      	ldr	r1, [pc, #32]	; (40480c <socketInit+0x38>)
  4047ea:	2002      	movs	r0, #2
  4047ec:	4b08      	ldr	r3, [pc, #32]	; (404810 <socketInit+0x3c>)
  4047ee:	4798      	blx	r3
		gbSocketInit=1;
  4047f0:	2201      	movs	r2, #1
  4047f2:	4b03      	ldr	r3, [pc, #12]	; (404800 <socketInit+0x2c>)
  4047f4:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4047f6:	2200      	movs	r2, #0
  4047f8:	4b06      	ldr	r3, [pc, #24]	; (404814 <socketInit+0x40>)
  4047fa:	801a      	strh	r2, [r3, #0]
	}
}
  4047fc:	e7ee      	b.n	4047dc <socketInit+0x8>
  4047fe:	bf00      	nop
  404800:	2040c361 	.word	0x2040c361
  404804:	2040cf58 	.word	0x2040cf58
  404808:	00402541 	.word	0x00402541
  40480c:	00404519 	.word	0x00404519
  404810:	00402ca9 	.word	0x00402ca9
  404814:	2040c362 	.word	0x2040c362

00404818 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404818:	4b02      	ldr	r3, [pc, #8]	; (404824 <registerSocketCallback+0xc>)
  40481a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  40481c:	4b02      	ldr	r3, [pc, #8]	; (404828 <registerSocketCallback+0x10>)
  40481e:	6019      	str	r1, [r3, #0]
  404820:	4770      	bx	lr
  404822:	bf00      	nop
  404824:	2040d008 	.word	0x2040d008
  404828:	2040d010 	.word	0x2040d010

0040482c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40482c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40482e:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  404830:	2802      	cmp	r0, #2
  404832:	d158      	bne.n	4048e6 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404834:	2901      	cmp	r1, #1
  404836:	d059      	beq.n	4048ec <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404838:	2902      	cmp	r1, #2
  40483a:	d116      	bne.n	40486a <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  40483c:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40483e:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  404840:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  404842:	4b2e      	ldr	r3, [pc, #184]	; (4048fc <socket+0xd0>)
  404844:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404848:	7a9b      	ldrb	r3, [r3, #10]
  40484a:	2b00      	cmp	r3, #0
  40484c:	d051      	beq.n	4048f2 <socket+0xc6>
  40484e:	1c63      	adds	r3, r4, #1
  404850:	b2db      	uxtb	r3, r3
  404852:	4f2a      	ldr	r7, [pc, #168]	; (4048fc <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404854:	b2dc      	uxtb	r4, r3
  404856:	42b4      	cmp	r4, r6
  404858:	d240      	bcs.n	4048dc <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  40485a:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  40485c:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  404860:	7a89      	ldrb	r1, [r1, #10]
  404862:	1c58      	adds	r0, r3, #1
  404864:	b121      	cbz	r1, 404870 <socket+0x44>
  404866:	4603      	mov	r3, r0
  404868:	e7f4      	b.n	404854 <socket+0x28>
			return sock;
  40486a:	f04f 34ff 	mov.w	r4, #4294967295
  40486e:	e037      	b.n	4048e0 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  404870:	4822      	ldr	r0, [pc, #136]	; (4048fc <socket+0xd0>)
  404872:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  404876:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404878:	2210      	movs	r2, #16
  40487a:	2100      	movs	r1, #0
  40487c:	4b20      	ldr	r3, [pc, #128]	; (404900 <socket+0xd4>)
  40487e:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  404880:	4b1e      	ldr	r3, [pc, #120]	; (4048fc <socket+0xd0>)
  404882:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404886:	2201      	movs	r2, #1
  404888:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40488a:	4a1e      	ldr	r2, [pc, #120]	; (404904 <socket+0xd8>)
  40488c:	8813      	ldrh	r3, [r2, #0]
  40488e:	3301      	adds	r3, #1
  404890:	b29b      	uxth	r3, r3
  404892:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  404894:	8813      	ldrh	r3, [r2, #0]
  404896:	b29b      	uxth	r3, r3
  404898:	b91b      	cbnz	r3, 4048a2 <socket+0x76>
					++gu16SessionID;
  40489a:	8813      	ldrh	r3, [r2, #0]
  40489c:	3301      	adds	r3, #1
  40489e:	b29b      	uxth	r3, r3
  4048a0:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4048a2:	4b18      	ldr	r3, [pc, #96]	; (404904 <socket+0xd8>)
  4048a4:	881a      	ldrh	r2, [r3, #0]
  4048a6:	b292      	uxth	r2, r2
  4048a8:	4b14      	ldr	r3, [pc, #80]	; (4048fc <socket+0xd0>)
  4048aa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4048ae:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4048b0:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4048b2:	f016 0f01 	tst.w	r6, #1
  4048b6:	d013      	beq.n	4048e0 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4048b8:	aa06      	add	r2, sp, #24
  4048ba:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4048be:	4b0f      	ldr	r3, [pc, #60]	; (4048fc <socket+0xd0>)
  4048c0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4048c4:	2321      	movs	r3, #33	; 0x21
  4048c6:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4048c8:	2300      	movs	r3, #0
  4048ca:	9302      	str	r3, [sp, #8]
  4048cc:	9301      	str	r3, [sp, #4]
  4048ce:	9300      	str	r3, [sp, #0]
  4048d0:	2304      	movs	r3, #4
  4048d2:	2150      	movs	r1, #80	; 0x50
  4048d4:	2002      	movs	r0, #2
  4048d6:	4d0c      	ldr	r5, [pc, #48]	; (404908 <socket+0xdc>)
  4048d8:	47a8      	blx	r5
  4048da:	e001      	b.n	4048e0 <socket+0xb4>
	SOCKET		sock = -1;
  4048dc:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  4048e0:	4620      	mov	r0, r4
  4048e2:	b007      	add	sp, #28
  4048e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  4048e6:	f04f 34ff 	mov.w	r4, #4294967295
  4048ea:	e7f9      	b.n	4048e0 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  4048ec:	2607      	movs	r6, #7
			u8Count = 0;
  4048ee:	2400      	movs	r4, #0
  4048f0:	e7a6      	b.n	404840 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  4048f2:	4802      	ldr	r0, [pc, #8]	; (4048fc <socket+0xd0>)
  4048f4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4048f8:	e7bd      	b.n	404876 <socket+0x4a>
  4048fa:	bf00      	nop
  4048fc:	2040cf58 	.word	0x2040cf58
  404900:	00402541 	.word	0x00402541
  404904:	2040c362 	.word	0x2040c362
  404908:	004026a5 	.word	0x004026a5

0040490c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  40490c:	b530      	push	{r4, r5, lr}
  40490e:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  404910:	1e04      	subs	r4, r0, #0
  404912:	db36      	blt.n	404982 <connect+0x76>
  404914:	2900      	cmp	r1, #0
  404916:	d034      	beq.n	404982 <connect+0x76>
  404918:	4b1d      	ldr	r3, [pc, #116]	; (404990 <connect+0x84>)
  40491a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40491e:	7a9b      	ldrb	r3, [r3, #10]
  404920:	b2db      	uxtb	r3, r3
  404922:	2a00      	cmp	r2, #0
  404924:	d030      	beq.n	404988 <connect+0x7c>
  404926:	2b01      	cmp	r3, #1
  404928:	d12e      	bne.n	404988 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  40492a:	4b19      	ldr	r3, [pc, #100]	; (404990 <connect+0x84>)
  40492c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404930:	7adb      	ldrb	r3, [r3, #11]
  404932:	f013 0f01 	tst.w	r3, #1
  404936:	d022      	beq.n	40497e <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404938:	4b15      	ldr	r3, [pc, #84]	; (404990 <connect+0x84>)
  40493a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40493e:	7adb      	ldrb	r3, [r3, #11]
  404940:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404944:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404946:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  40494a:	2208      	movs	r2, #8
  40494c:	a805      	add	r0, sp, #20
  40494e:	4b11      	ldr	r3, [pc, #68]	; (404994 <connect+0x88>)
  404950:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  404952:	480f      	ldr	r0, [pc, #60]	; (404990 <connect+0x84>)
  404954:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404958:	88c3      	ldrh	r3, [r0, #6]
  40495a:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40495e:	2300      	movs	r3, #0
  404960:	9302      	str	r3, [sp, #8]
  404962:	9301      	str	r3, [sp, #4]
  404964:	9300      	str	r3, [sp, #0]
  404966:	230c      	movs	r3, #12
  404968:	aa05      	add	r2, sp, #20
  40496a:	4629      	mov	r1, r5
  40496c:	2002      	movs	r0, #2
  40496e:	4c0a      	ldr	r4, [pc, #40]	; (404998 <connect+0x8c>)
  404970:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404972:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404974:	bf18      	it	ne
  404976:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  40497a:	b009      	add	sp, #36	; 0x24
  40497c:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  40497e:	2544      	movs	r5, #68	; 0x44
  404980:	e7e1      	b.n	404946 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404982:	f06f 0005 	mvn.w	r0, #5
  404986:	e7f8      	b.n	40497a <connect+0x6e>
  404988:	f06f 0005 	mvn.w	r0, #5
  40498c:	e7f5      	b.n	40497a <connect+0x6e>
  40498e:	bf00      	nop
  404990:	2040cf58 	.word	0x2040cf58
  404994:	0040252d 	.word	0x0040252d
  404998:	004026a5 	.word	0x004026a5

0040499c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  40499c:	b530      	push	{r4, r5, lr}
  40499e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4049a0:	460c      	mov	r4, r1
  4049a2:	3100      	adds	r1, #0
  4049a4:	bf18      	it	ne
  4049a6:	2101      	movne	r1, #1
  4049a8:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4049ac:	bf88      	it	hi
  4049ae:	2100      	movhi	r1, #0
  4049b0:	2900      	cmp	r1, #0
  4049b2:	d037      	beq.n	404a24 <send+0x88>
  4049b4:	2800      	cmp	r0, #0
  4049b6:	db35      	blt.n	404a24 <send+0x88>
  4049b8:	4b1d      	ldr	r3, [pc, #116]	; (404a30 <send+0x94>)
  4049ba:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4049be:	7a9b      	ldrb	r3, [r3, #10]
  4049c0:	b2db      	uxtb	r3, r3
  4049c2:	2b01      	cmp	r3, #1
  4049c4:	d131      	bne.n	404a2a <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4049c6:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4049ca:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4049ce:	4b18      	ldr	r3, [pc, #96]	; (404a30 <send+0x94>)
  4049d0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4049d4:	88db      	ldrh	r3, [r3, #6]
  4049d6:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4049da:	2807      	cmp	r0, #7
  4049dc:	bfb4      	ite	lt
  4049de:	2550      	movlt	r5, #80	; 0x50
  4049e0:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4049e2:	4b13      	ldr	r3, [pc, #76]	; (404a30 <send+0x94>)
  4049e4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4049e8:	7adb      	ldrb	r3, [r3, #11]
  4049ea:	f013 0f01 	tst.w	r3, #1
  4049ee:	d017      	beq.n	404a20 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4049f0:	4b0f      	ldr	r3, [pc, #60]	; (404a30 <send+0x94>)
  4049f2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4049f6:	8905      	ldrh	r5, [r0, #8]
  4049f8:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4049fa:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  4049fc:	9502      	str	r5, [sp, #8]
  4049fe:	9201      	str	r2, [sp, #4]
  404a00:	9400      	str	r4, [sp, #0]
  404a02:	2310      	movs	r3, #16
  404a04:	eb0d 0203 	add.w	r2, sp, r3
  404a08:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404a0c:	2002      	movs	r0, #2
  404a0e:	4c09      	ldr	r4, [pc, #36]	; (404a34 <send+0x98>)
  404a10:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404a12:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404a14:	bf0c      	ite	eq
  404a16:	2000      	moveq	r0, #0
  404a18:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404a1c:	b009      	add	sp, #36	; 0x24
  404a1e:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  404a20:	2145      	movs	r1, #69	; 0x45
  404a22:	e7eb      	b.n	4049fc <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404a24:	f06f 0005 	mvn.w	r0, #5
  404a28:	e7f8      	b.n	404a1c <send+0x80>
  404a2a:	f06f 0005 	mvn.w	r0, #5
  404a2e:	e7f5      	b.n	404a1c <send+0x80>
  404a30:	2040cf58 	.word	0x2040cf58
  404a34:	004026a5 	.word	0x004026a5

00404a38 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404a38:	2900      	cmp	r1, #0
  404a3a:	bf18      	it	ne
  404a3c:	2a00      	cmpne	r2, #0
  404a3e:	d044      	beq.n	404aca <recv+0x92>
{
  404a40:	b570      	push	{r4, r5, r6, lr}
  404a42:	b086      	sub	sp, #24
  404a44:	460e      	mov	r6, r1
  404a46:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404a48:	2800      	cmp	r0, #0
  404a4a:	db36      	blt.n	404aba <recv+0x82>
  404a4c:	4a20      	ldr	r2, [pc, #128]	; (404ad0 <recv+0x98>)
  404a4e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404a52:	7a92      	ldrb	r2, [r2, #10]
  404a54:	b2d2      	uxtb	r2, r2
  404a56:	2a01      	cmp	r2, #1
  404a58:	d132      	bne.n	404ac0 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404a5a:	4c1d      	ldr	r4, [pc, #116]	; (404ad0 <recv+0x98>)
  404a5c:	0101      	lsls	r1, r0, #4
  404a5e:	1862      	adds	r2, r4, r1
  404a60:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  404a62:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404a64:	7b12      	ldrb	r2, [r2, #12]
  404a66:	2a00      	cmp	r2, #0
  404a68:	d12d      	bne.n	404ac6 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404a6a:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  404a6e:	2101      	movs	r1, #1
  404a70:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404a72:	7ad2      	ldrb	r2, [r2, #11]
  404a74:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404a76:	2a00      	cmp	r2, #0
  404a78:	bf0c      	ite	eq
  404a7a:	2146      	moveq	r1, #70	; 0x46
  404a7c:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  404a7e:	b9d3      	cbnz	r3, 404ab6 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404a80:	f04f 33ff 	mov.w	r3, #4294967295
  404a84:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  404a86:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404a8a:	4b11      	ldr	r3, [pc, #68]	; (404ad0 <recv+0x98>)
  404a8c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404a90:	88c3      	ldrh	r3, [r0, #6]
  404a92:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404a96:	2300      	movs	r3, #0
  404a98:	9302      	str	r3, [sp, #8]
  404a9a:	9301      	str	r3, [sp, #4]
  404a9c:	9300      	str	r3, [sp, #0]
  404a9e:	2308      	movs	r3, #8
  404aa0:	aa04      	add	r2, sp, #16
  404aa2:	2002      	movs	r0, #2
  404aa4:	4c0b      	ldr	r4, [pc, #44]	; (404ad4 <recv+0x9c>)
  404aa6:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  404aa8:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404aaa:	bf0c      	ite	eq
  404aac:	2000      	moveq	r0, #0
  404aae:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  404ab2:	b006      	add	sp, #24
  404ab4:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404ab6:	9304      	str	r3, [sp, #16]
  404ab8:	e7e5      	b.n	404a86 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404aba:	f06f 0005 	mvn.w	r0, #5
  404abe:	e7f8      	b.n	404ab2 <recv+0x7a>
  404ac0:	f06f 0005 	mvn.w	r0, #5
  404ac4:	e7f5      	b.n	404ab2 <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  404ac6:	2000      	movs	r0, #0
  404ac8:	e7f3      	b.n	404ab2 <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404aca:	f06f 0005 	mvn.w	r0, #5
}
  404ace:	4770      	bx	lr
  404ad0:	2040cf58 	.word	0x2040cf58
  404ad4:	004026a5 	.word	0x004026a5

00404ad8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404ad8:	b530      	push	{r4, r5, lr}
  404ada:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404adc:	1e04      	subs	r4, r0, #0
  404ade:	db2f      	blt.n	404b40 <close+0x68>
  404ae0:	4b1a      	ldr	r3, [pc, #104]	; (404b4c <close+0x74>)
  404ae2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404ae6:	7a9b      	ldrb	r3, [r3, #10]
  404ae8:	b2db      	uxtb	r3, r3
  404aea:	2b01      	cmp	r3, #1
  404aec:	d12b      	bne.n	404b46 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  404aee:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  404af2:	4b16      	ldr	r3, [pc, #88]	; (404b4c <close+0x74>)
  404af4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404af8:	88da      	ldrh	r2, [r3, #6]
  404afa:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  404afe:	2200      	movs	r2, #0
  404b00:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  404b02:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404b04:	7adb      	ldrb	r3, [r3, #11]
  404b06:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404b0a:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404b0c:	9202      	str	r2, [sp, #8]
  404b0e:	9201      	str	r2, [sp, #4]
  404b10:	9200      	str	r2, [sp, #0]
  404b12:	f04f 0304 	mov.w	r3, #4
  404b16:	aa05      	add	r2, sp, #20
  404b18:	bf0c      	ite	eq
  404b1a:	2149      	moveq	r1, #73	; 0x49
  404b1c:	214e      	movne	r1, #78	; 0x4e
  404b1e:	2002      	movs	r0, #2
  404b20:	4d0b      	ldr	r5, [pc, #44]	; (404b50 <close+0x78>)
  404b22:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404b24:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404b26:	bf18      	it	ne
  404b28:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404b2c:	2210      	movs	r2, #16
  404b2e:	2100      	movs	r1, #0
  404b30:	4806      	ldr	r0, [pc, #24]	; (404b4c <close+0x74>)
  404b32:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404b36:	4b07      	ldr	r3, [pc, #28]	; (404b54 <close+0x7c>)
  404b38:	4798      	blx	r3
	}
	return s8Ret;
}
  404b3a:	4628      	mov	r0, r5
  404b3c:	b007      	add	sp, #28
  404b3e:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404b40:	f06f 0505 	mvn.w	r5, #5
  404b44:	e7f9      	b.n	404b3a <close+0x62>
  404b46:	f06f 0505 	mvn.w	r5, #5
  404b4a:	e7f6      	b.n	404b3a <close+0x62>
  404b4c:	2040cf58 	.word	0x2040cf58
  404b50:	004026a5 	.word	0x004026a5
  404b54:	00402541 	.word	0x00402541

00404b58 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404b58:	b570      	push	{r4, r5, r6, lr}
  404b5a:	b082      	sub	sp, #8
  404b5c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  404b5e:	4b2b      	ldr	r3, [pc, #172]	; (404c0c <spi_flash_enable+0xb4>)
  404b60:	4798      	blx	r3
  404b62:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404b66:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404b6a:	d203      	bcs.n	404b74 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  404b6c:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  404b6e:	4620      	mov	r0, r4
  404b70:	b002      	add	sp, #8
  404b72:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404b74:	a901      	add	r1, sp, #4
  404b76:	f241 4010 	movw	r0, #5136	; 0x1410
  404b7a:	4b25      	ldr	r3, [pc, #148]	; (404c10 <spi_flash_enable+0xb8>)
  404b7c:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  404b7e:	4604      	mov	r4, r0
  404b80:	2800      	cmp	r0, #0
  404b82:	d1f4      	bne.n	404b6e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  404b84:	4b23      	ldr	r3, [pc, #140]	; (404c14 <spi_flash_enable+0xbc>)
  404b86:	9a01      	ldr	r2, [sp, #4]
  404b88:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  404b8a:	4923      	ldr	r1, [pc, #140]	; (404c18 <spi_flash_enable+0xc0>)
  404b8c:	4319      	orrs	r1, r3
  404b8e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404b90:	f241 4010 	movw	r0, #5136	; 0x1410
  404b94:	4b21      	ldr	r3, [pc, #132]	; (404c1c <spi_flash_enable+0xc4>)
  404b96:	4798      	blx	r3
		if(enable) {
  404b98:	b305      	cbz	r5, 404bdc <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404b9a:	2100      	movs	r1, #0
  404b9c:	4820      	ldr	r0, [pc, #128]	; (404c20 <spi_flash_enable+0xc8>)
  404b9e:	4d1f      	ldr	r5, [pc, #124]	; (404c1c <spi_flash_enable+0xc4>)
  404ba0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404ba2:	21ab      	movs	r1, #171	; 0xab
  404ba4:	481f      	ldr	r0, [pc, #124]	; (404c24 <spi_flash_enable+0xcc>)
  404ba6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404ba8:	2101      	movs	r1, #1
  404baa:	481f      	ldr	r0, [pc, #124]	; (404c28 <spi_flash_enable+0xd0>)
  404bac:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404bae:	2100      	movs	r1, #0
  404bb0:	481e      	ldr	r0, [pc, #120]	; (404c2c <spi_flash_enable+0xd4>)
  404bb2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404bb4:	2181      	movs	r1, #129	; 0x81
  404bb6:	481e      	ldr	r0, [pc, #120]	; (404c30 <spi_flash_enable+0xd8>)
  404bb8:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404bba:	4e1e      	ldr	r6, [pc, #120]	; (404c34 <spi_flash_enable+0xdc>)
  404bbc:	4d1e      	ldr	r5, [pc, #120]	; (404c38 <spi_flash_enable+0xe0>)
  404bbe:	4630      	mov	r0, r6
  404bc0:	47a8      	blx	r5
  404bc2:	2801      	cmp	r0, #1
  404bc4:	d1fb      	bne.n	404bbe <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  404bc6:	4913      	ldr	r1, [pc, #76]	; (404c14 <spi_flash_enable+0xbc>)
  404bc8:	9b01      	ldr	r3, [sp, #4]
  404bca:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  404bcc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  404bd0:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404bd2:	f241 4010 	movw	r0, #5136	; 0x1410
  404bd6:	4b11      	ldr	r3, [pc, #68]	; (404c1c <spi_flash_enable+0xc4>)
  404bd8:	4798      	blx	r3
  404bda:	e7c8      	b.n	404b6e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404bdc:	2100      	movs	r1, #0
  404bde:	4810      	ldr	r0, [pc, #64]	; (404c20 <spi_flash_enable+0xc8>)
  404be0:	4d0e      	ldr	r5, [pc, #56]	; (404c1c <spi_flash_enable+0xc4>)
  404be2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404be4:	21b9      	movs	r1, #185	; 0xb9
  404be6:	480f      	ldr	r0, [pc, #60]	; (404c24 <spi_flash_enable+0xcc>)
  404be8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404bea:	2101      	movs	r1, #1
  404bec:	480e      	ldr	r0, [pc, #56]	; (404c28 <spi_flash_enable+0xd0>)
  404bee:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404bf0:	2100      	movs	r1, #0
  404bf2:	480e      	ldr	r0, [pc, #56]	; (404c2c <spi_flash_enable+0xd4>)
  404bf4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404bf6:	2181      	movs	r1, #129	; 0x81
  404bf8:	480d      	ldr	r0, [pc, #52]	; (404c30 <spi_flash_enable+0xd8>)
  404bfa:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404bfc:	4e0d      	ldr	r6, [pc, #52]	; (404c34 <spi_flash_enable+0xdc>)
  404bfe:	4d0e      	ldr	r5, [pc, #56]	; (404c38 <spi_flash_enable+0xe0>)
  404c00:	4630      	mov	r0, r6
  404c02:	47a8      	blx	r5
  404c04:	2801      	cmp	r0, #1
  404c06:	d1fb      	bne.n	404c00 <spi_flash_enable+0xa8>
  404c08:	e7dd      	b.n	404bc6 <spi_flash_enable+0x6e>
  404c0a:	bf00      	nop
  404c0c:	0040356d 	.word	0x0040356d
  404c10:	00403869 	.word	0x00403869
  404c14:	f8888fff 	.word	0xf8888fff
  404c18:	01111000 	.word	0x01111000
  404c1c:	00403875 	.word	0x00403875
  404c20:	00010208 	.word	0x00010208
  404c24:	0001020c 	.word	0x0001020c
  404c28:	00010214 	.word	0x00010214
  404c2c:	0001021c 	.word	0x0001021c
  404c30:	00010204 	.word	0x00010204
  404c34:	00010218 	.word	0x00010218
  404c38:	0040385d 	.word	0x0040385d

00404c3c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404c3c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404c3e:	4810      	ldr	r0, [pc, #64]	; (404c80 <sysclk_init+0x44>)
  404c40:	4b10      	ldr	r3, [pc, #64]	; (404c84 <sysclk_init+0x48>)
  404c42:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404c44:	213e      	movs	r1, #62	; 0x3e
  404c46:	2000      	movs	r0, #0
  404c48:	4b0f      	ldr	r3, [pc, #60]	; (404c88 <sysclk_init+0x4c>)
  404c4a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404c4c:	4c0f      	ldr	r4, [pc, #60]	; (404c8c <sysclk_init+0x50>)
  404c4e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404c50:	2800      	cmp	r0, #0
  404c52:	d0fc      	beq.n	404c4e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404c54:	4b0e      	ldr	r3, [pc, #56]	; (404c90 <sysclk_init+0x54>)
  404c56:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404c58:	4a0e      	ldr	r2, [pc, #56]	; (404c94 <sysclk_init+0x58>)
  404c5a:	4b0f      	ldr	r3, [pc, #60]	; (404c98 <sysclk_init+0x5c>)
  404c5c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  404c5e:	4c0f      	ldr	r4, [pc, #60]	; (404c9c <sysclk_init+0x60>)
  404c60:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404c62:	2800      	cmp	r0, #0
  404c64:	d0fc      	beq.n	404c60 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404c66:	2002      	movs	r0, #2
  404c68:	4b0d      	ldr	r3, [pc, #52]	; (404ca0 <sysclk_init+0x64>)
  404c6a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404c6c:	2000      	movs	r0, #0
  404c6e:	4b0d      	ldr	r3, [pc, #52]	; (404ca4 <sysclk_init+0x68>)
  404c70:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404c72:	4b0d      	ldr	r3, [pc, #52]	; (404ca8 <sysclk_init+0x6c>)
  404c74:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404c76:	4802      	ldr	r0, [pc, #8]	; (404c80 <sysclk_init+0x44>)
  404c78:	4b02      	ldr	r3, [pc, #8]	; (404c84 <sysclk_init+0x48>)
  404c7a:	4798      	blx	r3
  404c7c:	bd10      	pop	{r4, pc}
  404c7e:	bf00      	nop
  404c80:	11e1a300 	.word	0x11e1a300
  404c84:	00405955 	.word	0x00405955
  404c88:	0040541d 	.word	0x0040541d
  404c8c:	00405471 	.word	0x00405471
  404c90:	00405481 	.word	0x00405481
  404c94:	20183f01 	.word	0x20183f01
  404c98:	400e0600 	.word	0x400e0600
  404c9c:	00405491 	.word	0x00405491
  404ca0:	00405381 	.word	0x00405381
  404ca4:	004053b9 	.word	0x004053b9
  404ca8:	00405849 	.word	0x00405849

00404cac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  404cb0:	b980      	cbnz	r0, 404cd4 <_read+0x28>
  404cb2:	460c      	mov	r4, r1
  404cb4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  404cb6:	2a00      	cmp	r2, #0
  404cb8:	dd0f      	ble.n	404cda <_read+0x2e>
  404cba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  404cbc:	4e08      	ldr	r6, [pc, #32]	; (404ce0 <_read+0x34>)
  404cbe:	4d09      	ldr	r5, [pc, #36]	; (404ce4 <_read+0x38>)
  404cc0:	6830      	ldr	r0, [r6, #0]
  404cc2:	4621      	mov	r1, r4
  404cc4:	682b      	ldr	r3, [r5, #0]
  404cc6:	4798      	blx	r3
		ptr++;
  404cc8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  404cca:	42bc      	cmp	r4, r7
  404ccc:	d1f8      	bne.n	404cc0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  404cce:	4640      	mov	r0, r8
  404cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404cd4:	f04f 38ff 	mov.w	r8, #4294967295
  404cd8:	e7f9      	b.n	404cce <_read+0x22>
	for (; len > 0; --len) {
  404cda:	4680      	mov	r8, r0
  404cdc:	e7f7      	b.n	404cce <_read+0x22>
  404cde:	bf00      	nop
  404ce0:	2040d01c 	.word	0x2040d01c
  404ce4:	2040d014 	.word	0x2040d014

00404ce8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  404ce8:	3801      	subs	r0, #1
  404cea:	2802      	cmp	r0, #2
  404cec:	d815      	bhi.n	404d1a <_write+0x32>
{
  404cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404cf2:	460e      	mov	r6, r1
  404cf4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  404cf6:	b19a      	cbz	r2, 404d20 <_write+0x38>
  404cf8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404cfa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404d34 <_write+0x4c>
  404cfe:	4f0c      	ldr	r7, [pc, #48]	; (404d30 <_write+0x48>)
  404d00:	f8d8 0000 	ldr.w	r0, [r8]
  404d04:	f815 1b01 	ldrb.w	r1, [r5], #1
  404d08:	683b      	ldr	r3, [r7, #0]
  404d0a:	4798      	blx	r3
  404d0c:	2800      	cmp	r0, #0
  404d0e:	db0a      	blt.n	404d26 <_write+0x3e>
  404d10:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404d12:	3c01      	subs	r4, #1
  404d14:	d1f4      	bne.n	404d00 <_write+0x18>
  404d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404d1a:	f04f 30ff 	mov.w	r0, #4294967295
  404d1e:	4770      	bx	lr
	for (; len != 0; --len) {
  404d20:	4610      	mov	r0, r2
  404d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404d26:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d2e:	bf00      	nop
  404d30:	2040d018 	.word	0x2040d018
  404d34:	2040d01c 	.word	0x2040d01c

00404d38 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404d3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404d3e:	4b5c      	ldr	r3, [pc, #368]	; (404eb0 <board_init+0x178>)
  404d40:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404d42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404d46:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404d4a:	4b5a      	ldr	r3, [pc, #360]	; (404eb4 <board_init+0x17c>)
  404d4c:	2200      	movs	r2, #0
  404d4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404d52:	695a      	ldr	r2, [r3, #20]
  404d54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404d58:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404d5e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404d62:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404d66:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404d6a:	f007 0007 	and.w	r0, r7, #7
  404d6e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404d70:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404d74:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404d78:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404d7c:	f3bf 8f4f 	dsb	sy
  404d80:	f04f 34ff 	mov.w	r4, #4294967295
  404d84:	fa04 fc00 	lsl.w	ip, r4, r0
  404d88:	fa06 f000 	lsl.w	r0, r6, r0
  404d8c:	fa04 f40e 	lsl.w	r4, r4, lr
  404d90:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404d94:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404d96:	463a      	mov	r2, r7
  404d98:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404d9a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404d9e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404da2:	3a01      	subs	r2, #1
  404da4:	4423      	add	r3, r4
  404da6:	f1b2 3fff 	cmp.w	r2, #4294967295
  404daa:	d1f6      	bne.n	404d9a <board_init+0x62>
        } while(sets--);
  404dac:	3e01      	subs	r6, #1
  404dae:	4460      	add	r0, ip
  404db0:	f1b6 3fff 	cmp.w	r6, #4294967295
  404db4:	d1ef      	bne.n	404d96 <board_init+0x5e>
  404db6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404dba:	4b3e      	ldr	r3, [pc, #248]	; (404eb4 <board_init+0x17c>)
  404dbc:	695a      	ldr	r2, [r3, #20]
  404dbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404dc2:	615a      	str	r2, [r3, #20]
  404dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404dc8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404dcc:	4a3a      	ldr	r2, [pc, #232]	; (404eb8 <board_init+0x180>)
  404dce:	493b      	ldr	r1, [pc, #236]	; (404ebc <board_init+0x184>)
  404dd0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404dd2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404dd6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404dd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ddc:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404de0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404de4:	f022 0201 	bic.w	r2, r2, #1
  404de8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404dec:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  404df0:	f022 0201 	bic.w	r2, r2, #1
  404df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404df8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404dfc:	f3bf 8f6f 	isb	sy
  404e00:	200a      	movs	r0, #10
  404e02:	4c2f      	ldr	r4, [pc, #188]	; (404ec0 <board_init+0x188>)
  404e04:	47a0      	blx	r4
  404e06:	200b      	movs	r0, #11
  404e08:	47a0      	blx	r4
  404e0a:	200c      	movs	r0, #12
  404e0c:	47a0      	blx	r4
  404e0e:	2010      	movs	r0, #16
  404e10:	47a0      	blx	r4
  404e12:	2011      	movs	r0, #17
  404e14:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404e16:	4b2b      	ldr	r3, [pc, #172]	; (404ec4 <board_init+0x18c>)
  404e18:	f44f 7280 	mov.w	r2, #256	; 0x100
  404e1c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404e1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404e22:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404e24:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404e2c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404e2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  404e32:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404e38:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404e3a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  404e40:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404e42:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404e46:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404e48:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404e4a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404e4e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404e50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404e54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404e58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404e60:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404e66:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404e68:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404e6e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404e70:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404e74:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404e76:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404e78:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404e7c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404e7e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404e80:	4a11      	ldr	r2, [pc, #68]	; (404ec8 <board_init+0x190>)
  404e82:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404e86:	f043 0310 	orr.w	r3, r3, #16
  404e8a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  404e8e:	4b0f      	ldr	r3, [pc, #60]	; (404ecc <board_init+0x194>)
  404e90:	2210      	movs	r2, #16
  404e92:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404e98:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404e9a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404ea0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404ea2:	4311      	orrs	r1, r2
  404ea4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404ea6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404ea8:	4311      	orrs	r1, r2
  404eaa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404eac:	605a      	str	r2, [r3, #4]
  404eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404eb0:	400e1850 	.word	0x400e1850
  404eb4:	e000ed00 	.word	0xe000ed00
  404eb8:	400e0c00 	.word	0x400e0c00
  404ebc:	5a00080c 	.word	0x5a00080c
  404ec0:	004054a1 	.word	0x004054a1
  404ec4:	400e1200 	.word	0x400e1200
  404ec8:	40088000 	.word	0x40088000
  404ecc:	400e1000 	.word	0x400e1000

00404ed0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404ed0:	b90a      	cbnz	r2, 404ed6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404ed2:	6601      	str	r1, [r0, #96]	; 0x60
  404ed4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404ed6:	6641      	str	r1, [r0, #100]	; 0x64
  404ed8:	4770      	bx	lr

00404eda <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  404eda:	6301      	str	r1, [r0, #48]	; 0x30
  404edc:	4770      	bx	lr

00404ede <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  404ede:	6341      	str	r1, [r0, #52]	; 0x34
  404ee0:	4770      	bx	lr

00404ee2 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404ee2:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404ee4:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404ee8:	d03a      	beq.n	404f60 <pio_set_peripheral+0x7e>
  404eea:	d813      	bhi.n	404f14 <pio_set_peripheral+0x32>
  404eec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404ef0:	d025      	beq.n	404f3e <pio_set_peripheral+0x5c>
  404ef2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404ef6:	d10a      	bne.n	404f0e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404ef8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404efa:	4313      	orrs	r3, r2
  404efc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404efe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404f00:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404f02:	400b      	ands	r3, r1
  404f04:	ea23 0302 	bic.w	r3, r3, r2
  404f08:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404f0a:	6042      	str	r2, [r0, #4]
  404f0c:	4770      	bx	lr
	switch (ul_type) {
  404f0e:	2900      	cmp	r1, #0
  404f10:	d1fb      	bne.n	404f0a <pio_set_peripheral+0x28>
  404f12:	4770      	bx	lr
  404f14:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404f18:	d021      	beq.n	404f5e <pio_set_peripheral+0x7c>
  404f1a:	d809      	bhi.n	404f30 <pio_set_peripheral+0x4e>
  404f1c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404f20:	d1f3      	bne.n	404f0a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  404f22:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404f24:	4313      	orrs	r3, r2
  404f26:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404f28:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404f2a:	4313      	orrs	r3, r2
  404f2c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404f2e:	e7ec      	b.n	404f0a <pio_set_peripheral+0x28>
	switch (ul_type) {
  404f30:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404f34:	d013      	beq.n	404f5e <pio_set_peripheral+0x7c>
  404f36:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404f3a:	d010      	beq.n	404f5e <pio_set_peripheral+0x7c>
  404f3c:	e7e5      	b.n	404f0a <pio_set_peripheral+0x28>
{
  404f3e:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  404f40:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404f42:	6f04      	ldr	r4, [r0, #112]	; 0x70
  404f44:	43d3      	mvns	r3, r2
  404f46:	4021      	ands	r1, r4
  404f48:	461c      	mov	r4, r3
  404f4a:	4019      	ands	r1, r3
  404f4c:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404f4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404f50:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404f52:	400b      	ands	r3, r1
  404f54:	4023      	ands	r3, r4
  404f56:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  404f58:	6042      	str	r2, [r0, #4]
}
  404f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  404f5e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  404f60:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404f62:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404f64:	400b      	ands	r3, r1
  404f66:	ea23 0302 	bic.w	r3, r3, r2
  404f6a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404f6c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404f6e:	4313      	orrs	r3, r2
  404f70:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404f72:	e7ca      	b.n	404f0a <pio_set_peripheral+0x28>

00404f74 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404f74:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404f76:	f012 0f01 	tst.w	r2, #1
  404f7a:	d10d      	bne.n	404f98 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  404f7c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404f7e:	f012 0f0a 	tst.w	r2, #10
  404f82:	d00b      	beq.n	404f9c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  404f84:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  404f86:	f012 0f02 	tst.w	r2, #2
  404f8a:	d109      	bne.n	404fa0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  404f8c:	f012 0f08 	tst.w	r2, #8
  404f90:	d008      	beq.n	404fa4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  404f92:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  404f96:	e005      	b.n	404fa4 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  404f98:	6641      	str	r1, [r0, #100]	; 0x64
  404f9a:	e7f0      	b.n	404f7e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  404f9c:	6241      	str	r1, [r0, #36]	; 0x24
  404f9e:	e7f2      	b.n	404f86 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  404fa0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  404fa4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404fa6:	6001      	str	r1, [r0, #0]
  404fa8:	4770      	bx	lr

00404faa <pio_set_output>:
{
  404faa:	b410      	push	{r4}
  404fac:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  404fae:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404fb0:	b94c      	cbnz	r4, 404fc6 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  404fb2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  404fb4:	b14b      	cbz	r3, 404fca <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  404fb6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404fb8:	b94a      	cbnz	r2, 404fce <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  404fba:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  404fbc:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  404fbe:	6001      	str	r1, [r0, #0]
}
  404fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  404fc4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404fc6:	6641      	str	r1, [r0, #100]	; 0x64
  404fc8:	e7f4      	b.n	404fb4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404fca:	6541      	str	r1, [r0, #84]	; 0x54
  404fcc:	e7f4      	b.n	404fb8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  404fce:	6301      	str	r1, [r0, #48]	; 0x30
  404fd0:	e7f4      	b.n	404fbc <pio_set_output+0x12>
	...

00404fd4 <pio_configure>:
{
  404fd4:	b570      	push	{r4, r5, r6, lr}
  404fd6:	b082      	sub	sp, #8
  404fd8:	4605      	mov	r5, r0
  404fda:	4616      	mov	r6, r2
  404fdc:	461c      	mov	r4, r3
	switch (ul_type) {
  404fde:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404fe2:	d014      	beq.n	40500e <pio_configure+0x3a>
  404fe4:	d90a      	bls.n	404ffc <pio_configure+0x28>
  404fe6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404fea:	d024      	beq.n	405036 <pio_configure+0x62>
  404fec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404ff0:	d021      	beq.n	405036 <pio_configure+0x62>
  404ff2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404ff6:	d017      	beq.n	405028 <pio_configure+0x54>
		return 0;
  404ff8:	2000      	movs	r0, #0
  404ffa:	e01a      	b.n	405032 <pio_configure+0x5e>
	switch (ul_type) {
  404ffc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  405000:	d005      	beq.n	40500e <pio_configure+0x3a>
  405002:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  405006:	d002      	beq.n	40500e <pio_configure+0x3a>
  405008:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40500c:	d1f4      	bne.n	404ff8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40500e:	4632      	mov	r2, r6
  405010:	4628      	mov	r0, r5
  405012:	4b11      	ldr	r3, [pc, #68]	; (405058 <pio_configure+0x84>)
  405014:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405016:	f014 0f01 	tst.w	r4, #1
  40501a:	d102      	bne.n	405022 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40501c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40501e:	2001      	movs	r0, #1
  405020:	e007      	b.n	405032 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  405022:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  405024:	2001      	movs	r0, #1
  405026:	e004      	b.n	405032 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  405028:	461a      	mov	r2, r3
  40502a:	4631      	mov	r1, r6
  40502c:	4b0b      	ldr	r3, [pc, #44]	; (40505c <pio_configure+0x88>)
  40502e:	4798      	blx	r3
	return 1;
  405030:	2001      	movs	r0, #1
}
  405032:	b002      	add	sp, #8
  405034:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  405036:	f004 0301 	and.w	r3, r4, #1
  40503a:	9300      	str	r3, [sp, #0]
  40503c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  405040:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405044:	bf14      	ite	ne
  405046:	2200      	movne	r2, #0
  405048:	2201      	moveq	r2, #1
  40504a:	4631      	mov	r1, r6
  40504c:	4628      	mov	r0, r5
  40504e:	4c04      	ldr	r4, [pc, #16]	; (405060 <pio_configure+0x8c>)
  405050:	47a0      	blx	r4
	return 1;
  405052:	2001      	movs	r0, #1
		break;
  405054:	e7ed      	b.n	405032 <pio_configure+0x5e>
  405056:	bf00      	nop
  405058:	00404ee3 	.word	0x00404ee3
  40505c:	00404f75 	.word	0x00404f75
  405060:	00404fab 	.word	0x00404fab

00405064 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  405064:	f012 0f10 	tst.w	r2, #16
  405068:	d012      	beq.n	405090 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40506a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40506e:	f012 0f20 	tst.w	r2, #32
  405072:	d007      	beq.n	405084 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  405074:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  405078:	f012 0f40 	tst.w	r2, #64	; 0x40
  40507c:	d005      	beq.n	40508a <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  40507e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  405082:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  405084:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  405088:	e7f6      	b.n	405078 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40508a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40508e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  405090:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  405094:	4770      	bx	lr

00405096 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  405096:	6401      	str	r1, [r0, #64]	; 0x40
  405098:	4770      	bx	lr

0040509a <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  40509a:	6441      	str	r1, [r0, #68]	; 0x44
  40509c:	4770      	bx	lr

0040509e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40509e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4050a0:	4770      	bx	lr

004050a2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4050a2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4050a4:	4770      	bx	lr
	...

004050a8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4050a8:	b570      	push	{r4, r5, r6, lr}
  4050aa:	b082      	sub	sp, #8
  4050ac:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4050ae:	4c46      	ldr	r4, [pc, #280]	; (4051c8 <pio_configure_pin+0x120>)
  4050b0:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4050b4:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4050b6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4050ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4050be:	d059      	beq.n	405174 <pio_configure_pin+0xcc>
  4050c0:	d80a      	bhi.n	4050d8 <pio_configure_pin+0x30>
  4050c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4050c6:	d02f      	beq.n	405128 <pio_configure_pin+0x80>
  4050c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4050cc:	d03f      	beq.n	40514e <pio_configure_pin+0xa6>
  4050ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4050d2:	d016      	beq.n	405102 <pio_configure_pin+0x5a>
		return 0;
  4050d4:	2000      	movs	r0, #0
  4050d6:	e012      	b.n	4050fe <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4050d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4050dc:	d05d      	beq.n	40519a <pio_configure_pin+0xf2>
  4050de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4050e2:	d05a      	beq.n	40519a <pio_configure_pin+0xf2>
  4050e4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4050e8:	d1f4      	bne.n	4050d4 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4050ea:	f000 011f 	and.w	r1, r0, #31
  4050ee:	2601      	movs	r6, #1
  4050f0:	462a      	mov	r2, r5
  4050f2:	fa06 f101 	lsl.w	r1, r6, r1
  4050f6:	4620      	mov	r0, r4
  4050f8:	4b34      	ldr	r3, [pc, #208]	; (4051cc <pio_configure_pin+0x124>)
  4050fa:	4798      	blx	r3
	return 1;
  4050fc:	4630      	mov	r0, r6
}
  4050fe:	b002      	add	sp, #8
  405100:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  405102:	f000 001f 	and.w	r0, r0, #31
  405106:	2601      	movs	r6, #1
  405108:	4086      	lsls	r6, r0
  40510a:	4632      	mov	r2, r6
  40510c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405110:	4620      	mov	r0, r4
  405112:	4b2f      	ldr	r3, [pc, #188]	; (4051d0 <pio_configure_pin+0x128>)
  405114:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405116:	f015 0f01 	tst.w	r5, #1
  40511a:	d102      	bne.n	405122 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  40511c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40511e:	2001      	movs	r0, #1
  405120:	e7ed      	b.n	4050fe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405122:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405124:	2001      	movs	r0, #1
  405126:	e7ea      	b.n	4050fe <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  405128:	f000 001f 	and.w	r0, r0, #31
  40512c:	2601      	movs	r6, #1
  40512e:	4086      	lsls	r6, r0
  405130:	4632      	mov	r2, r6
  405132:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405136:	4620      	mov	r0, r4
  405138:	4b25      	ldr	r3, [pc, #148]	; (4051d0 <pio_configure_pin+0x128>)
  40513a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40513c:	f015 0f01 	tst.w	r5, #1
  405140:	d102      	bne.n	405148 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  405142:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405144:	2001      	movs	r0, #1
  405146:	e7da      	b.n	4050fe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405148:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40514a:	2001      	movs	r0, #1
  40514c:	e7d7      	b.n	4050fe <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40514e:	f000 001f 	and.w	r0, r0, #31
  405152:	2601      	movs	r6, #1
  405154:	4086      	lsls	r6, r0
  405156:	4632      	mov	r2, r6
  405158:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40515c:	4620      	mov	r0, r4
  40515e:	4b1c      	ldr	r3, [pc, #112]	; (4051d0 <pio_configure_pin+0x128>)
  405160:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405162:	f015 0f01 	tst.w	r5, #1
  405166:	d102      	bne.n	40516e <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  405168:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40516a:	2001      	movs	r0, #1
  40516c:	e7c7      	b.n	4050fe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40516e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405170:	2001      	movs	r0, #1
  405172:	e7c4      	b.n	4050fe <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  405174:	f000 001f 	and.w	r0, r0, #31
  405178:	2601      	movs	r6, #1
  40517a:	4086      	lsls	r6, r0
  40517c:	4632      	mov	r2, r6
  40517e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  405182:	4620      	mov	r0, r4
  405184:	4b12      	ldr	r3, [pc, #72]	; (4051d0 <pio_configure_pin+0x128>)
  405186:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405188:	f015 0f01 	tst.w	r5, #1
  40518c:	d102      	bne.n	405194 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40518e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405190:	2001      	movs	r0, #1
  405192:	e7b4      	b.n	4050fe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405194:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405196:	2001      	movs	r0, #1
  405198:	e7b1      	b.n	4050fe <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40519a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40519e:	f000 011f 	and.w	r1, r0, #31
  4051a2:	2601      	movs	r6, #1
  4051a4:	ea05 0306 	and.w	r3, r5, r6
  4051a8:	9300      	str	r3, [sp, #0]
  4051aa:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4051ae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4051b2:	bf14      	ite	ne
  4051b4:	2200      	movne	r2, #0
  4051b6:	2201      	moveq	r2, #1
  4051b8:	fa06 f101 	lsl.w	r1, r6, r1
  4051bc:	4620      	mov	r0, r4
  4051be:	4c05      	ldr	r4, [pc, #20]	; (4051d4 <pio_configure_pin+0x12c>)
  4051c0:	47a0      	blx	r4
	return 1;
  4051c2:	4630      	mov	r0, r6
		break;
  4051c4:	e79b      	b.n	4050fe <pio_configure_pin+0x56>
  4051c6:	bf00      	nop
  4051c8:	00200707 	.word	0x00200707
  4051cc:	00404f75 	.word	0x00404f75
  4051d0:	00404ee3 	.word	0x00404ee3
  4051d4:	00404fab 	.word	0x00404fab

004051d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4051d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051dc:	4604      	mov	r4, r0
  4051de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4051e0:	4b0e      	ldr	r3, [pc, #56]	; (40521c <pio_handler_process+0x44>)
  4051e2:	4798      	blx	r3
  4051e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4051e6:	4620      	mov	r0, r4
  4051e8:	4b0d      	ldr	r3, [pc, #52]	; (405220 <pio_handler_process+0x48>)
  4051ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4051ec:	4005      	ands	r5, r0
  4051ee:	d013      	beq.n	405218 <pio_handler_process+0x40>
  4051f0:	4c0c      	ldr	r4, [pc, #48]	; (405224 <pio_handler_process+0x4c>)
  4051f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4051f6:	e003      	b.n	405200 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4051f8:	42b4      	cmp	r4, r6
  4051fa:	d00d      	beq.n	405218 <pio_handler_process+0x40>
  4051fc:	3410      	adds	r4, #16
		while (status != 0) {
  4051fe:	b15d      	cbz	r5, 405218 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  405200:	6820      	ldr	r0, [r4, #0]
  405202:	4540      	cmp	r0, r8
  405204:	d1f8      	bne.n	4051f8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405206:	6861      	ldr	r1, [r4, #4]
  405208:	4229      	tst	r1, r5
  40520a:	d0f5      	beq.n	4051f8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40520c:	68e3      	ldr	r3, [r4, #12]
  40520e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  405210:	6863      	ldr	r3, [r4, #4]
  405212:	ea25 0503 	bic.w	r5, r5, r3
  405216:	e7ef      	b.n	4051f8 <pio_handler_process+0x20>
  405218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40521c:	0040509f 	.word	0x0040509f
  405220:	004050a3 	.word	0x004050a3
  405224:	2040c364 	.word	0x2040c364

00405228 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40522a:	4c18      	ldr	r4, [pc, #96]	; (40528c <pio_handler_set+0x64>)
  40522c:	6826      	ldr	r6, [r4, #0]
  40522e:	2e06      	cmp	r6, #6
  405230:	d82a      	bhi.n	405288 <pio_handler_set+0x60>
  405232:	f04f 0c00 	mov.w	ip, #0
  405236:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  405238:	4f15      	ldr	r7, [pc, #84]	; (405290 <pio_handler_set+0x68>)
  40523a:	e004      	b.n	405246 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40523c:	3401      	adds	r4, #1
  40523e:	b2e4      	uxtb	r4, r4
  405240:	46a4      	mov	ip, r4
  405242:	42a6      	cmp	r6, r4
  405244:	d309      	bcc.n	40525a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  405246:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  405248:	0125      	lsls	r5, r4, #4
  40524a:	597d      	ldr	r5, [r7, r5]
  40524c:	428d      	cmp	r5, r1
  40524e:	d1f5      	bne.n	40523c <pio_handler_set+0x14>
  405250:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  405254:	686d      	ldr	r5, [r5, #4]
  405256:	4295      	cmp	r5, r2
  405258:	d1f0      	bne.n	40523c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40525a:	4d0d      	ldr	r5, [pc, #52]	; (405290 <pio_handler_set+0x68>)
  40525c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  405260:	eb05 040e 	add.w	r4, r5, lr
  405264:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  405268:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40526a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40526c:	9906      	ldr	r1, [sp, #24]
  40526e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  405270:	3601      	adds	r6, #1
  405272:	4566      	cmp	r6, ip
  405274:	d005      	beq.n	405282 <pio_handler_set+0x5a>
  405276:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  405278:	461a      	mov	r2, r3
  40527a:	4b06      	ldr	r3, [pc, #24]	; (405294 <pio_handler_set+0x6c>)
  40527c:	4798      	blx	r3

	return 0;
  40527e:	2000      	movs	r0, #0
  405280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  405282:	4902      	ldr	r1, [pc, #8]	; (40528c <pio_handler_set+0x64>)
  405284:	600e      	str	r6, [r1, #0]
  405286:	e7f6      	b.n	405276 <pio_handler_set+0x4e>
		return 1;
  405288:	2001      	movs	r0, #1
}
  40528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40528c:	2040c3d4 	.word	0x2040c3d4
  405290:	2040c364 	.word	0x2040c364
  405294:	00405065 	.word	0x00405065

00405298 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405298:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40529a:	210a      	movs	r1, #10
  40529c:	4801      	ldr	r0, [pc, #4]	; (4052a4 <PIOA_Handler+0xc>)
  40529e:	4b02      	ldr	r3, [pc, #8]	; (4052a8 <PIOA_Handler+0x10>)
  4052a0:	4798      	blx	r3
  4052a2:	bd08      	pop	{r3, pc}
  4052a4:	400e0e00 	.word	0x400e0e00
  4052a8:	004051d9 	.word	0x004051d9

004052ac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4052ac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4052ae:	210b      	movs	r1, #11
  4052b0:	4801      	ldr	r0, [pc, #4]	; (4052b8 <PIOB_Handler+0xc>)
  4052b2:	4b02      	ldr	r3, [pc, #8]	; (4052bc <PIOB_Handler+0x10>)
  4052b4:	4798      	blx	r3
  4052b6:	bd08      	pop	{r3, pc}
  4052b8:	400e1000 	.word	0x400e1000
  4052bc:	004051d9 	.word	0x004051d9

004052c0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4052c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4052c2:	210c      	movs	r1, #12
  4052c4:	4801      	ldr	r0, [pc, #4]	; (4052cc <PIOC_Handler+0xc>)
  4052c6:	4b02      	ldr	r3, [pc, #8]	; (4052d0 <PIOC_Handler+0x10>)
  4052c8:	4798      	blx	r3
  4052ca:	bd08      	pop	{r3, pc}
  4052cc:	400e1200 	.word	0x400e1200
  4052d0:	004051d9 	.word	0x004051d9

004052d4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4052d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4052d6:	2110      	movs	r1, #16
  4052d8:	4801      	ldr	r0, [pc, #4]	; (4052e0 <PIOD_Handler+0xc>)
  4052da:	4b02      	ldr	r3, [pc, #8]	; (4052e4 <PIOD_Handler+0x10>)
  4052dc:	4798      	blx	r3
  4052de:	bd08      	pop	{r3, pc}
  4052e0:	400e1400 	.word	0x400e1400
  4052e4:	004051d9 	.word	0x004051d9

004052e8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4052e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4052ea:	2111      	movs	r1, #17
  4052ec:	4801      	ldr	r0, [pc, #4]	; (4052f4 <PIOE_Handler+0xc>)
  4052ee:	4b02      	ldr	r3, [pc, #8]	; (4052f8 <PIOE_Handler+0x10>)
  4052f0:	4798      	blx	r3
  4052f2:	bd08      	pop	{r3, pc}
  4052f4:	400e1600 	.word	0x400e1600
  4052f8:	004051d9 	.word	0x004051d9

004052fc <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4052fe:	4606      	mov	r6, r0
  405300:	460d      	mov	r5, r1
  405302:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  405304:	4b17      	ldr	r3, [pc, #92]	; (405364 <pio_handler_set_priority+0x68>)
  405306:	4798      	blx	r3
  405308:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40530a:	f04f 31ff 	mov.w	r1, #4294967295
  40530e:	4630      	mov	r0, r6
  405310:	4b15      	ldr	r3, [pc, #84]	; (405368 <pio_handler_set_priority+0x6c>)
  405312:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  405314:	4630      	mov	r0, r6
  405316:	4b15      	ldr	r3, [pc, #84]	; (40536c <pio_handler_set_priority+0x70>)
  405318:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40531a:	fa5f fe85 	uxtb.w	lr, r5
  40531e:	f00e 031f 	and.w	r3, lr, #31
  405322:	2201      	movs	r2, #1
  405324:	fa02 f303 	lsl.w	r3, r2, r3
  405328:	0968      	lsrs	r0, r5, #5
  40532a:	4911      	ldr	r1, [pc, #68]	; (405370 <pio_handler_set_priority+0x74>)
  40532c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  405330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405334:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  405338:	2d00      	cmp	r5, #0
  40533a:	db0a      	blt.n	405352 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40533c:	0164      	lsls	r4, r4, #5
  40533e:	b2e4      	uxtb	r4, r4
  405340:	4a0c      	ldr	r2, [pc, #48]	; (405374 <pio_handler_set_priority+0x78>)
  405342:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405344:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  405348:	4639      	mov	r1, r7
  40534a:	4630      	mov	r0, r6
  40534c:	4b0a      	ldr	r3, [pc, #40]	; (405378 <pio_handler_set_priority+0x7c>)
  40534e:	4798      	blx	r3
  405350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405352:	f00e 0e0f 	and.w	lr, lr, #15
  405356:	0164      	lsls	r4, r4, #5
  405358:	b2e4      	uxtb	r4, r4
  40535a:	4a08      	ldr	r2, [pc, #32]	; (40537c <pio_handler_set_priority+0x80>)
  40535c:	f802 400e 	strb.w	r4, [r2, lr]
  405360:	e7f0      	b.n	405344 <pio_handler_set_priority+0x48>
  405362:	bf00      	nop
  405364:	004050a3 	.word	0x004050a3
  405368:	0040509b 	.word	0x0040509b
  40536c:	0040509f 	.word	0x0040509f
  405370:	e000e100 	.word	0xe000e100
  405374:	e000e400 	.word	0xe000e400
  405378:	00405097 	.word	0x00405097
  40537c:	e000ed14 	.word	0xe000ed14

00405380 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  405380:	2803      	cmp	r0, #3
  405382:	d011      	beq.n	4053a8 <pmc_mck_set_division+0x28>
  405384:	2804      	cmp	r0, #4
  405386:	d012      	beq.n	4053ae <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405388:	2802      	cmp	r0, #2
  40538a:	bf0c      	ite	eq
  40538c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  405390:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  405392:	4a08      	ldr	r2, [pc, #32]	; (4053b4 <pmc_mck_set_division+0x34>)
  405394:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40539a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40539c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40539e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4053a0:	f013 0f08 	tst.w	r3, #8
  4053a4:	d0fb      	beq.n	40539e <pmc_mck_set_division+0x1e>
}
  4053a6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4053a8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4053ac:	e7f1      	b.n	405392 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4053ae:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4053b2:	e7ee      	b.n	405392 <pmc_mck_set_division+0x12>
  4053b4:	400e0600 	.word	0x400e0600

004053b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4053b8:	4a17      	ldr	r2, [pc, #92]	; (405418 <pmc_switch_mck_to_pllack+0x60>)
  4053ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4053c0:	4318      	orrs	r0, r3
  4053c2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4053c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4053c6:	f013 0f08 	tst.w	r3, #8
  4053ca:	d10a      	bne.n	4053e2 <pmc_switch_mck_to_pllack+0x2a>
  4053cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4053d0:	4911      	ldr	r1, [pc, #68]	; (405418 <pmc_switch_mck_to_pllack+0x60>)
  4053d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4053d4:	f012 0f08 	tst.w	r2, #8
  4053d8:	d103      	bne.n	4053e2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4053da:	3b01      	subs	r3, #1
  4053dc:	d1f9      	bne.n	4053d2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4053de:	2001      	movs	r0, #1
  4053e0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4053e2:	4a0d      	ldr	r2, [pc, #52]	; (405418 <pmc_switch_mck_to_pllack+0x60>)
  4053e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4053e6:	f023 0303 	bic.w	r3, r3, #3
  4053ea:	f043 0302 	orr.w	r3, r3, #2
  4053ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4053f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4053f2:	f013 0f08 	tst.w	r3, #8
  4053f6:	d10a      	bne.n	40540e <pmc_switch_mck_to_pllack+0x56>
  4053f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4053fc:	4906      	ldr	r1, [pc, #24]	; (405418 <pmc_switch_mck_to_pllack+0x60>)
  4053fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405400:	f012 0f08 	tst.w	r2, #8
  405404:	d105      	bne.n	405412 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405406:	3b01      	subs	r3, #1
  405408:	d1f9      	bne.n	4053fe <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40540a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40540c:	4770      	bx	lr
	return 0;
  40540e:	2000      	movs	r0, #0
  405410:	4770      	bx	lr
  405412:	2000      	movs	r0, #0
  405414:	4770      	bx	lr
  405416:	bf00      	nop
  405418:	400e0600 	.word	0x400e0600

0040541c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40541c:	b9a0      	cbnz	r0, 405448 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40541e:	480e      	ldr	r0, [pc, #56]	; (405458 <pmc_switch_mainck_to_xtal+0x3c>)
  405420:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405422:	0209      	lsls	r1, r1, #8
  405424:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405426:	4a0d      	ldr	r2, [pc, #52]	; (40545c <pmc_switch_mainck_to_xtal+0x40>)
  405428:	401a      	ands	r2, r3
  40542a:	4b0d      	ldr	r3, [pc, #52]	; (405460 <pmc_switch_mainck_to_xtal+0x44>)
  40542c:	4313      	orrs	r3, r2
  40542e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405430:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405432:	4602      	mov	r2, r0
  405434:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405436:	f013 0f01 	tst.w	r3, #1
  40543a:	d0fb      	beq.n	405434 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40543c:	4a06      	ldr	r2, [pc, #24]	; (405458 <pmc_switch_mainck_to_xtal+0x3c>)
  40543e:	6a11      	ldr	r1, [r2, #32]
  405440:	4b08      	ldr	r3, [pc, #32]	; (405464 <pmc_switch_mainck_to_xtal+0x48>)
  405442:	430b      	orrs	r3, r1
  405444:	6213      	str	r3, [r2, #32]
  405446:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405448:	4903      	ldr	r1, [pc, #12]	; (405458 <pmc_switch_mainck_to_xtal+0x3c>)
  40544a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40544c:	4a06      	ldr	r2, [pc, #24]	; (405468 <pmc_switch_mainck_to_xtal+0x4c>)
  40544e:	401a      	ands	r2, r3
  405450:	4b06      	ldr	r3, [pc, #24]	; (40546c <pmc_switch_mainck_to_xtal+0x50>)
  405452:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405454:	620b      	str	r3, [r1, #32]
  405456:	4770      	bx	lr
  405458:	400e0600 	.word	0x400e0600
  40545c:	ffc8fffc 	.word	0xffc8fffc
  405460:	00370001 	.word	0x00370001
  405464:	01370000 	.word	0x01370000
  405468:	fec8fffc 	.word	0xfec8fffc
  40546c:	01370002 	.word	0x01370002

00405470 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405470:	4b02      	ldr	r3, [pc, #8]	; (40547c <pmc_osc_is_ready_mainck+0xc>)
  405472:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405474:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  405478:	4770      	bx	lr
  40547a:	bf00      	nop
  40547c:	400e0600 	.word	0x400e0600

00405480 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405480:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405484:	4b01      	ldr	r3, [pc, #4]	; (40548c <pmc_disable_pllack+0xc>)
  405486:	629a      	str	r2, [r3, #40]	; 0x28
  405488:	4770      	bx	lr
  40548a:	bf00      	nop
  40548c:	400e0600 	.word	0x400e0600

00405490 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  405490:	4b02      	ldr	r3, [pc, #8]	; (40549c <pmc_is_locked_pllack+0xc>)
  405492:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405494:	f000 0002 	and.w	r0, r0, #2
  405498:	4770      	bx	lr
  40549a:	bf00      	nop
  40549c:	400e0600 	.word	0x400e0600

004054a0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4054a0:	283f      	cmp	r0, #63	; 0x3f
  4054a2:	d81e      	bhi.n	4054e2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4054a4:	281f      	cmp	r0, #31
  4054a6:	d80c      	bhi.n	4054c2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4054a8:	4b11      	ldr	r3, [pc, #68]	; (4054f0 <pmc_enable_periph_clk+0x50>)
  4054aa:	699a      	ldr	r2, [r3, #24]
  4054ac:	2301      	movs	r3, #1
  4054ae:	4083      	lsls	r3, r0
  4054b0:	4393      	bics	r3, r2
  4054b2:	d018      	beq.n	4054e6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4054b4:	2301      	movs	r3, #1
  4054b6:	fa03 f000 	lsl.w	r0, r3, r0
  4054ba:	4b0d      	ldr	r3, [pc, #52]	; (4054f0 <pmc_enable_periph_clk+0x50>)
  4054bc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4054be:	2000      	movs	r0, #0
  4054c0:	4770      	bx	lr
		ul_id -= 32;
  4054c2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4054c4:	4b0a      	ldr	r3, [pc, #40]	; (4054f0 <pmc_enable_periph_clk+0x50>)
  4054c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4054ca:	2301      	movs	r3, #1
  4054cc:	4083      	lsls	r3, r0
  4054ce:	4393      	bics	r3, r2
  4054d0:	d00b      	beq.n	4054ea <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4054d2:	2301      	movs	r3, #1
  4054d4:	fa03 f000 	lsl.w	r0, r3, r0
  4054d8:	4b05      	ldr	r3, [pc, #20]	; (4054f0 <pmc_enable_periph_clk+0x50>)
  4054da:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4054de:	2000      	movs	r0, #0
  4054e0:	4770      	bx	lr
		return 1;
  4054e2:	2001      	movs	r0, #1
  4054e4:	4770      	bx	lr
	return 0;
  4054e6:	2000      	movs	r0, #0
  4054e8:	4770      	bx	lr
  4054ea:	2000      	movs	r0, #0
}
  4054ec:	4770      	bx	lr
  4054ee:	bf00      	nop
  4054f0:	400e0600 	.word	0x400e0600

004054f4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4054f4:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4054f6:	4b07      	ldr	r3, [pc, #28]	; (405514 <spi_enable_clock+0x20>)
  4054f8:	4298      	cmp	r0, r3
  4054fa:	d003      	beq.n	405504 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4054fc:	4b06      	ldr	r3, [pc, #24]	; (405518 <spi_enable_clock+0x24>)
  4054fe:	4298      	cmp	r0, r3
  405500:	d004      	beq.n	40550c <spi_enable_clock+0x18>
  405502:	bd08      	pop	{r3, pc}
  405504:	2015      	movs	r0, #21
  405506:	4b05      	ldr	r3, [pc, #20]	; (40551c <spi_enable_clock+0x28>)
  405508:	4798      	blx	r3
  40550a:	bd08      	pop	{r3, pc}
  40550c:	202a      	movs	r0, #42	; 0x2a
  40550e:	4b03      	ldr	r3, [pc, #12]	; (40551c <spi_enable_clock+0x28>)
  405510:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405512:	e7f6      	b.n	405502 <spi_enable_clock+0xe>
  405514:	40008000 	.word	0x40008000
  405518:	40058000 	.word	0x40058000
  40551c:	004054a1 	.word	0x004054a1

00405520 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405520:	6843      	ldr	r3, [r0, #4]
  405522:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  405526:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  405528:	6843      	ldr	r3, [r0, #4]
  40552a:	0409      	lsls	r1, r1, #16
  40552c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  405530:	4319      	orrs	r1, r3
  405532:	6041      	str	r1, [r0, #4]
  405534:	4770      	bx	lr

00405536 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  405536:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  405538:	f643 2399 	movw	r3, #15001	; 0x3a99
  40553c:	6904      	ldr	r4, [r0, #16]
  40553e:	f014 0f01 	tst.w	r4, #1
  405542:	d103      	bne.n	40554c <spi_read+0x16>
		if (!timeout--) {
  405544:	3b01      	subs	r3, #1
  405546:	d1f9      	bne.n	40553c <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  405548:	2001      	movs	r0, #1
  40554a:	e009      	b.n	405560 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  40554c:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40554e:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  405550:	f010 0f02 	tst.w	r0, #2
  405554:	d002      	beq.n	40555c <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  405556:	f3c3 4003 	ubfx	r0, r3, #16, #4
  40555a:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  40555c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40555e:	2000      	movs	r0, #0
}
  405560:	f85d 4b04 	ldr.w	r4, [sp], #4
  405564:	4770      	bx	lr

00405566 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  405566:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  405568:	f643 2499 	movw	r4, #15001	; 0x3a99
  40556c:	6905      	ldr	r5, [r0, #16]
  40556e:	f015 0f02 	tst.w	r5, #2
  405572:	d103      	bne.n	40557c <spi_write+0x16>
		if (!timeout--) {
  405574:	3c01      	subs	r4, #1
  405576:	d1f9      	bne.n	40556c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  405578:	2001      	movs	r0, #1
  40557a:	e00c      	b.n	405596 <spi_write+0x30>
  40557c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40557e:	f014 0f02 	tst.w	r4, #2
  405582:	d006      	beq.n	405592 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  405584:	0412      	lsls	r2, r2, #16
  405586:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40558a:	4311      	orrs	r1, r2
		if (uc_last) {
  40558c:	b10b      	cbz	r3, 405592 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40558e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  405592:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  405594:	2000      	movs	r0, #0
}
  405596:	bc30      	pop	{r4, r5}
  405598:	4770      	bx	lr

0040559a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40559a:	b932      	cbnz	r2, 4055aa <spi_set_clock_polarity+0x10>
  40559c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4055a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4055a2:	f023 0301 	bic.w	r3, r3, #1
  4055a6:	6303      	str	r3, [r0, #48]	; 0x30
  4055a8:	4770      	bx	lr
  4055aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4055ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4055b0:	f043 0301 	orr.w	r3, r3, #1
  4055b4:	6303      	str	r3, [r0, #48]	; 0x30
  4055b6:	4770      	bx	lr

004055b8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4055b8:	b932      	cbnz	r2, 4055c8 <spi_set_clock_phase+0x10>
  4055ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4055be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4055c0:	f023 0302 	bic.w	r3, r3, #2
  4055c4:	6303      	str	r3, [r0, #48]	; 0x30
  4055c6:	4770      	bx	lr
  4055c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4055cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4055ce:	f043 0302 	orr.w	r3, r3, #2
  4055d2:	6303      	str	r3, [r0, #48]	; 0x30
  4055d4:	4770      	bx	lr

004055d6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4055d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4055da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4055dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4055e0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4055e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4055e4:	431a      	orrs	r2, r3
  4055e6:	630a      	str	r2, [r1, #48]	; 0x30
  4055e8:	4770      	bx	lr

004055ea <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4055ea:	1e43      	subs	r3, r0, #1
  4055ec:	4419      	add	r1, r3
  4055ee:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4055f2:	1e43      	subs	r3, r0, #1
  4055f4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4055f6:	bf94      	ite	ls
  4055f8:	b200      	sxthls	r0, r0
		return -1;
  4055fa:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4055fe:	4770      	bx	lr

00405600 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405600:	b17a      	cbz	r2, 405622 <spi_set_baudrate_div+0x22>
{
  405602:	b410      	push	{r4}
  405604:	4614      	mov	r4, r2
  405606:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40560a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40560c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405610:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405612:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405614:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  405618:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40561a:	2000      	movs	r0, #0
}
  40561c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405620:	4770      	bx	lr
        return -1;
  405622:	f04f 30ff 	mov.w	r0, #4294967295
  405626:	4770      	bx	lr

00405628 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  405628:	b410      	push	{r4}
  40562a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40562e:	6b08      	ldr	r0, [r1, #48]	; 0x30
  405630:	b280      	uxth	r0, r0
  405632:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405634:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  405636:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40563a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40563e:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  405640:	f85d 4b04 	ldr.w	r4, [sp], #4
  405644:	4770      	bx	lr

00405646 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  405646:	6943      	ldr	r3, [r0, #20]
  405648:	f013 0f02 	tst.w	r3, #2
  40564c:	d002      	beq.n	405654 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40564e:	61c1      	str	r1, [r0, #28]
	return 0;
  405650:	2000      	movs	r0, #0
  405652:	4770      	bx	lr
		return 1;
  405654:	2001      	movs	r0, #1
}
  405656:	4770      	bx	lr

00405658 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  405658:	6943      	ldr	r3, [r0, #20]
  40565a:	f013 0f01 	tst.w	r3, #1
  40565e:	d003      	beq.n	405668 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  405660:	6983      	ldr	r3, [r0, #24]
  405662:	700b      	strb	r3, [r1, #0]
	return 0;
  405664:	2000      	movs	r0, #0
  405666:	4770      	bx	lr
		return 1;
  405668:	2001      	movs	r0, #1
}
  40566a:	4770      	bx	lr

0040566c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40566c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40566e:	010b      	lsls	r3, r1, #4
  405670:	4293      	cmp	r3, r2
  405672:	d914      	bls.n	40569e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405674:	00c9      	lsls	r1, r1, #3
  405676:	084b      	lsrs	r3, r1, #1
  405678:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40567c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  405680:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405682:	1e5c      	subs	r4, r3, #1
  405684:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405688:	428c      	cmp	r4, r1
  40568a:	d901      	bls.n	405690 <usart_set_async_baudrate+0x24>
		return 1;
  40568c:	2001      	movs	r0, #1
  40568e:	e017      	b.n	4056c0 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  405690:	6841      	ldr	r1, [r0, #4]
  405692:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  405696:	6041      	str	r1, [r0, #4]
  405698:	e00c      	b.n	4056b4 <usart_set_async_baudrate+0x48>
		return 1;
  40569a:	2001      	movs	r0, #1
  40569c:	e010      	b.n	4056c0 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40569e:	0859      	lsrs	r1, r3, #1
  4056a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4056a4:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4056a8:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4056aa:	1e5c      	subs	r4, r3, #1
  4056ac:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4056b0:	428c      	cmp	r4, r1
  4056b2:	d8f2      	bhi.n	40569a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4056b4:	0412      	lsls	r2, r2, #16
  4056b6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4056ba:	431a      	orrs	r2, r3
  4056bc:	6202      	str	r2, [r0, #32]

	return 0;
  4056be:	2000      	movs	r0, #0
}
  4056c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4056c4:	4770      	bx	lr
	...

004056c8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4056c8:	4b08      	ldr	r3, [pc, #32]	; (4056ec <usart_reset+0x24>)
  4056ca:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4056ce:	2300      	movs	r3, #0
  4056d0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4056d2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4056d4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4056d6:	2388      	movs	r3, #136	; 0x88
  4056d8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4056da:	2324      	movs	r3, #36	; 0x24
  4056dc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4056de:	f44f 7380 	mov.w	r3, #256	; 0x100
  4056e2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4056e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4056e8:	6003      	str	r3, [r0, #0]
  4056ea:	4770      	bx	lr
  4056ec:	55534100 	.word	0x55534100

004056f0 <usart_init_rs232>:
{
  4056f0:	b570      	push	{r4, r5, r6, lr}
  4056f2:	4605      	mov	r5, r0
  4056f4:	460c      	mov	r4, r1
  4056f6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4056f8:	4b0f      	ldr	r3, [pc, #60]	; (405738 <usart_init_rs232+0x48>)
  4056fa:	4798      	blx	r3
	ul_reg_val = 0;
  4056fc:	2200      	movs	r2, #0
  4056fe:	4b0f      	ldr	r3, [pc, #60]	; (40573c <usart_init_rs232+0x4c>)
  405700:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405702:	b1a4      	cbz	r4, 40572e <usart_init_rs232+0x3e>
  405704:	4632      	mov	r2, r6
  405706:	6821      	ldr	r1, [r4, #0]
  405708:	4628      	mov	r0, r5
  40570a:	4b0d      	ldr	r3, [pc, #52]	; (405740 <usart_init_rs232+0x50>)
  40570c:	4798      	blx	r3
  40570e:	4602      	mov	r2, r0
  405710:	b978      	cbnz	r0, 405732 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405712:	6863      	ldr	r3, [r4, #4]
  405714:	68a1      	ldr	r1, [r4, #8]
  405716:	430b      	orrs	r3, r1
  405718:	6921      	ldr	r1, [r4, #16]
  40571a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40571c:	68e1      	ldr	r1, [r4, #12]
  40571e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405720:	4906      	ldr	r1, [pc, #24]	; (40573c <usart_init_rs232+0x4c>)
  405722:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  405724:	6869      	ldr	r1, [r5, #4]
  405726:	430b      	orrs	r3, r1
  405728:	606b      	str	r3, [r5, #4]
}
  40572a:	4610      	mov	r0, r2
  40572c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40572e:	2201      	movs	r2, #1
  405730:	e7fb      	b.n	40572a <usart_init_rs232+0x3a>
  405732:	2201      	movs	r2, #1
  405734:	e7f9      	b.n	40572a <usart_init_rs232+0x3a>
  405736:	bf00      	nop
  405738:	004056c9 	.word	0x004056c9
  40573c:	2040c3d8 	.word	0x2040c3d8
  405740:	0040566d 	.word	0x0040566d

00405744 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  405744:	2340      	movs	r3, #64	; 0x40
  405746:	6003      	str	r3, [r0, #0]
  405748:	4770      	bx	lr

0040574a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40574a:	2310      	movs	r3, #16
  40574c:	6003      	str	r3, [r0, #0]
  40574e:	4770      	bx	lr

00405750 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  405750:	6943      	ldr	r3, [r0, #20]
  405752:	f013 0f02 	tst.w	r3, #2
  405756:	d004      	beq.n	405762 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  405758:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40575c:	61c1      	str	r1, [r0, #28]
	return 0;
  40575e:	2000      	movs	r0, #0
  405760:	4770      	bx	lr
		return 1;
  405762:	2001      	movs	r0, #1
}
  405764:	4770      	bx	lr

00405766 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405766:	6943      	ldr	r3, [r0, #20]
  405768:	f013 0f01 	tst.w	r3, #1
  40576c:	d005      	beq.n	40577a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40576e:	6983      	ldr	r3, [r0, #24]
  405770:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405774:	600b      	str	r3, [r1, #0]
	return 0;
  405776:	2000      	movs	r0, #0
  405778:	4770      	bx	lr
		return 1;
  40577a:	2001      	movs	r0, #1
}
  40577c:	4770      	bx	lr

0040577e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40577e:	e7fe      	b.n	40577e <Dummy_Handler>

00405780 <Reset_Handler>:
{
  405780:	b500      	push	{lr}
  405782:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  405784:	4b25      	ldr	r3, [pc, #148]	; (40581c <Reset_Handler+0x9c>)
  405786:	4a26      	ldr	r2, [pc, #152]	; (405820 <Reset_Handler+0xa0>)
  405788:	429a      	cmp	r2, r3
  40578a:	d010      	beq.n	4057ae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40578c:	4b25      	ldr	r3, [pc, #148]	; (405824 <Reset_Handler+0xa4>)
  40578e:	4a23      	ldr	r2, [pc, #140]	; (40581c <Reset_Handler+0x9c>)
  405790:	429a      	cmp	r2, r3
  405792:	d20c      	bcs.n	4057ae <Reset_Handler+0x2e>
  405794:	3b01      	subs	r3, #1
  405796:	1a9b      	subs	r3, r3, r2
  405798:	f023 0303 	bic.w	r3, r3, #3
  40579c:	3304      	adds	r3, #4
  40579e:	4413      	add	r3, r2
  4057a0:	491f      	ldr	r1, [pc, #124]	; (405820 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4057a2:	f851 0b04 	ldr.w	r0, [r1], #4
  4057a6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4057aa:	429a      	cmp	r2, r3
  4057ac:	d1f9      	bne.n	4057a2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4057ae:	4b1e      	ldr	r3, [pc, #120]	; (405828 <Reset_Handler+0xa8>)
  4057b0:	4a1e      	ldr	r2, [pc, #120]	; (40582c <Reset_Handler+0xac>)
  4057b2:	429a      	cmp	r2, r3
  4057b4:	d20a      	bcs.n	4057cc <Reset_Handler+0x4c>
  4057b6:	3b01      	subs	r3, #1
  4057b8:	1a9b      	subs	r3, r3, r2
  4057ba:	f023 0303 	bic.w	r3, r3, #3
  4057be:	3304      	adds	r3, #4
  4057c0:	4413      	add	r3, r2
                *pDest++ = 0;
  4057c2:	2100      	movs	r1, #0
  4057c4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4057c8:	4293      	cmp	r3, r2
  4057ca:	d1fb      	bne.n	4057c4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4057cc:	4a18      	ldr	r2, [pc, #96]	; (405830 <Reset_Handler+0xb0>)
  4057ce:	4b19      	ldr	r3, [pc, #100]	; (405834 <Reset_Handler+0xb4>)
  4057d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4057d4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4057d6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4057da:	fab3 f383 	clz	r3, r3
  4057de:	095b      	lsrs	r3, r3, #5
  4057e0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4057e2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4057e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4057e8:	2200      	movs	r2, #0
  4057ea:	4b13      	ldr	r3, [pc, #76]	; (405838 <Reset_Handler+0xb8>)
  4057ec:	701a      	strb	r2, [r3, #0]
	return flags;
  4057ee:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4057f0:	4a12      	ldr	r2, [pc, #72]	; (40583c <Reset_Handler+0xbc>)
  4057f2:	6813      	ldr	r3, [r2, #0]
  4057f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4057f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4057fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4057fe:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  405802:	b129      	cbz	r1, 405810 <Reset_Handler+0x90>
		cpu_irq_enable();
  405804:	2201      	movs	r2, #1
  405806:	4b0c      	ldr	r3, [pc, #48]	; (405838 <Reset_Handler+0xb8>)
  405808:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40580a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40580e:	b662      	cpsie	i
        __libc_init_array();
  405810:	4b0b      	ldr	r3, [pc, #44]	; (405840 <Reset_Handler+0xc0>)
  405812:	4798      	blx	r3
        main();
  405814:	4b0b      	ldr	r3, [pc, #44]	; (405844 <Reset_Handler+0xc4>)
  405816:	4798      	blx	r3
  405818:	e7fe      	b.n	405818 <Reset_Handler+0x98>
  40581a:	bf00      	nop
  40581c:	20400000 	.word	0x20400000
  405820:	0040dd94 	.word	0x0040dd94
  405824:	204009d0 	.word	0x204009d0
  405828:	2040d050 	.word	0x2040d050
  40582c:	204009d0 	.word	0x204009d0
  405830:	e000ed00 	.word	0xe000ed00
  405834:	00400000 	.word	0x00400000
  405838:	20400018 	.word	0x20400018
  40583c:	e000ed88 	.word	0xe000ed88
  405840:	00406069 	.word	0x00406069
  405844:	00405fd1 	.word	0x00405fd1

00405848 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  405848:	4b3b      	ldr	r3, [pc, #236]	; (405938 <SystemCoreClockUpdate+0xf0>)
  40584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40584c:	f003 0303 	and.w	r3, r3, #3
  405850:	2b01      	cmp	r3, #1
  405852:	d01d      	beq.n	405890 <SystemCoreClockUpdate+0x48>
  405854:	b183      	cbz	r3, 405878 <SystemCoreClockUpdate+0x30>
  405856:	2b02      	cmp	r3, #2
  405858:	d036      	beq.n	4058c8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40585a:	4b37      	ldr	r3, [pc, #220]	; (405938 <SystemCoreClockUpdate+0xf0>)
  40585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40585e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405862:	2b70      	cmp	r3, #112	; 0x70
  405864:	d05f      	beq.n	405926 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405866:	4b34      	ldr	r3, [pc, #208]	; (405938 <SystemCoreClockUpdate+0xf0>)
  405868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40586a:	4934      	ldr	r1, [pc, #208]	; (40593c <SystemCoreClockUpdate+0xf4>)
  40586c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  405870:	680b      	ldr	r3, [r1, #0]
  405872:	40d3      	lsrs	r3, r2
  405874:	600b      	str	r3, [r1, #0]
  405876:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  405878:	4b31      	ldr	r3, [pc, #196]	; (405940 <SystemCoreClockUpdate+0xf8>)
  40587a:	695b      	ldr	r3, [r3, #20]
  40587c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405880:	bf14      	ite	ne
  405882:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405886:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40588a:	4b2c      	ldr	r3, [pc, #176]	; (40593c <SystemCoreClockUpdate+0xf4>)
  40588c:	601a      	str	r2, [r3, #0]
  40588e:	e7e4      	b.n	40585a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405890:	4b29      	ldr	r3, [pc, #164]	; (405938 <SystemCoreClockUpdate+0xf0>)
  405892:	6a1b      	ldr	r3, [r3, #32]
  405894:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405898:	d003      	beq.n	4058a2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40589a:	4a2a      	ldr	r2, [pc, #168]	; (405944 <SystemCoreClockUpdate+0xfc>)
  40589c:	4b27      	ldr	r3, [pc, #156]	; (40593c <SystemCoreClockUpdate+0xf4>)
  40589e:	601a      	str	r2, [r3, #0]
  4058a0:	e7db      	b.n	40585a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4058a2:	4a29      	ldr	r2, [pc, #164]	; (405948 <SystemCoreClockUpdate+0x100>)
  4058a4:	4b25      	ldr	r3, [pc, #148]	; (40593c <SystemCoreClockUpdate+0xf4>)
  4058a6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4058a8:	4b23      	ldr	r3, [pc, #140]	; (405938 <SystemCoreClockUpdate+0xf0>)
  4058aa:	6a1b      	ldr	r3, [r3, #32]
  4058ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4058b0:	2b10      	cmp	r3, #16
  4058b2:	d005      	beq.n	4058c0 <SystemCoreClockUpdate+0x78>
  4058b4:	2b20      	cmp	r3, #32
  4058b6:	d1d0      	bne.n	40585a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4058b8:	4a22      	ldr	r2, [pc, #136]	; (405944 <SystemCoreClockUpdate+0xfc>)
  4058ba:	4b20      	ldr	r3, [pc, #128]	; (40593c <SystemCoreClockUpdate+0xf4>)
  4058bc:	601a      	str	r2, [r3, #0]
          break;
  4058be:	e7cc      	b.n	40585a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4058c0:	4a22      	ldr	r2, [pc, #136]	; (40594c <SystemCoreClockUpdate+0x104>)
  4058c2:	4b1e      	ldr	r3, [pc, #120]	; (40593c <SystemCoreClockUpdate+0xf4>)
  4058c4:	601a      	str	r2, [r3, #0]
          break;
  4058c6:	e7c8      	b.n	40585a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4058c8:	4b1b      	ldr	r3, [pc, #108]	; (405938 <SystemCoreClockUpdate+0xf0>)
  4058ca:	6a1b      	ldr	r3, [r3, #32]
  4058cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4058d0:	d016      	beq.n	405900 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4058d2:	4a1c      	ldr	r2, [pc, #112]	; (405944 <SystemCoreClockUpdate+0xfc>)
  4058d4:	4b19      	ldr	r3, [pc, #100]	; (40593c <SystemCoreClockUpdate+0xf4>)
  4058d6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4058d8:	4b17      	ldr	r3, [pc, #92]	; (405938 <SystemCoreClockUpdate+0xf0>)
  4058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058dc:	f003 0303 	and.w	r3, r3, #3
  4058e0:	2b02      	cmp	r3, #2
  4058e2:	d1ba      	bne.n	40585a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4058e4:	4a14      	ldr	r2, [pc, #80]	; (405938 <SystemCoreClockUpdate+0xf0>)
  4058e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4058e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4058ea:	4814      	ldr	r0, [pc, #80]	; (40593c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4058ec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4058f0:	6803      	ldr	r3, [r0, #0]
  4058f2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4058f6:	b2d2      	uxtb	r2, r2
  4058f8:	fbb3 f3f2 	udiv	r3, r3, r2
  4058fc:	6003      	str	r3, [r0, #0]
  4058fe:	e7ac      	b.n	40585a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405900:	4a11      	ldr	r2, [pc, #68]	; (405948 <SystemCoreClockUpdate+0x100>)
  405902:	4b0e      	ldr	r3, [pc, #56]	; (40593c <SystemCoreClockUpdate+0xf4>)
  405904:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405906:	4b0c      	ldr	r3, [pc, #48]	; (405938 <SystemCoreClockUpdate+0xf0>)
  405908:	6a1b      	ldr	r3, [r3, #32]
  40590a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40590e:	2b10      	cmp	r3, #16
  405910:	d005      	beq.n	40591e <SystemCoreClockUpdate+0xd6>
  405912:	2b20      	cmp	r3, #32
  405914:	d1e0      	bne.n	4058d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405916:	4a0b      	ldr	r2, [pc, #44]	; (405944 <SystemCoreClockUpdate+0xfc>)
  405918:	4b08      	ldr	r3, [pc, #32]	; (40593c <SystemCoreClockUpdate+0xf4>)
  40591a:	601a      	str	r2, [r3, #0]
          break;
  40591c:	e7dc      	b.n	4058d8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40591e:	4a0b      	ldr	r2, [pc, #44]	; (40594c <SystemCoreClockUpdate+0x104>)
  405920:	4b06      	ldr	r3, [pc, #24]	; (40593c <SystemCoreClockUpdate+0xf4>)
  405922:	601a      	str	r2, [r3, #0]
          break;
  405924:	e7d8      	b.n	4058d8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  405926:	4a05      	ldr	r2, [pc, #20]	; (40593c <SystemCoreClockUpdate+0xf4>)
  405928:	6813      	ldr	r3, [r2, #0]
  40592a:	4909      	ldr	r1, [pc, #36]	; (405950 <SystemCoreClockUpdate+0x108>)
  40592c:	fba1 1303 	umull	r1, r3, r1, r3
  405930:	085b      	lsrs	r3, r3, #1
  405932:	6013      	str	r3, [r2, #0]
  405934:	4770      	bx	lr
  405936:	bf00      	nop
  405938:	400e0600 	.word	0x400e0600
  40593c:	2040001c 	.word	0x2040001c
  405940:	400e1810 	.word	0x400e1810
  405944:	00b71b00 	.word	0x00b71b00
  405948:	003d0900 	.word	0x003d0900
  40594c:	007a1200 	.word	0x007a1200
  405950:	aaaaaaab 	.word	0xaaaaaaab

00405954 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  405954:	4b12      	ldr	r3, [pc, #72]	; (4059a0 <system_init_flash+0x4c>)
  405956:	4298      	cmp	r0, r3
  405958:	d911      	bls.n	40597e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40595a:	4b12      	ldr	r3, [pc, #72]	; (4059a4 <system_init_flash+0x50>)
  40595c:	4298      	cmp	r0, r3
  40595e:	d913      	bls.n	405988 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  405960:	4b11      	ldr	r3, [pc, #68]	; (4059a8 <system_init_flash+0x54>)
  405962:	4298      	cmp	r0, r3
  405964:	d914      	bls.n	405990 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  405966:	4b11      	ldr	r3, [pc, #68]	; (4059ac <system_init_flash+0x58>)
  405968:	4298      	cmp	r0, r3
  40596a:	d915      	bls.n	405998 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40596c:	4b10      	ldr	r3, [pc, #64]	; (4059b0 <system_init_flash+0x5c>)
  40596e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  405970:	bf94      	ite	ls
  405972:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405976:	4a0f      	ldrhi	r2, [pc, #60]	; (4059b4 <system_init_flash+0x60>)
  405978:	4b0f      	ldr	r3, [pc, #60]	; (4059b8 <system_init_flash+0x64>)
  40597a:	601a      	str	r2, [r3, #0]
  40597c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40597e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405982:	4b0d      	ldr	r3, [pc, #52]	; (4059b8 <system_init_flash+0x64>)
  405984:	601a      	str	r2, [r3, #0]
  405986:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405988:	4a0c      	ldr	r2, [pc, #48]	; (4059bc <system_init_flash+0x68>)
  40598a:	4b0b      	ldr	r3, [pc, #44]	; (4059b8 <system_init_flash+0x64>)
  40598c:	601a      	str	r2, [r3, #0]
  40598e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405990:	4a0b      	ldr	r2, [pc, #44]	; (4059c0 <system_init_flash+0x6c>)
  405992:	4b09      	ldr	r3, [pc, #36]	; (4059b8 <system_init_flash+0x64>)
  405994:	601a      	str	r2, [r3, #0]
  405996:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405998:	4a0a      	ldr	r2, [pc, #40]	; (4059c4 <system_init_flash+0x70>)
  40599a:	4b07      	ldr	r3, [pc, #28]	; (4059b8 <system_init_flash+0x64>)
  40599c:	601a      	str	r2, [r3, #0]
  40599e:	4770      	bx	lr
  4059a0:	01312cff 	.word	0x01312cff
  4059a4:	026259ff 	.word	0x026259ff
  4059a8:	039386ff 	.word	0x039386ff
  4059ac:	04c4b3ff 	.word	0x04c4b3ff
  4059b0:	05f5e0ff 	.word	0x05f5e0ff
  4059b4:	04000500 	.word	0x04000500
  4059b8:	400e0c00 	.word	0x400e0c00
  4059bc:	04000100 	.word	0x04000100
  4059c0:	04000200 	.word	0x04000200
  4059c4:	04000300 	.word	0x04000300

004059c8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4059c8:	4b0a      	ldr	r3, [pc, #40]	; (4059f4 <_sbrk+0x2c>)
  4059ca:	681b      	ldr	r3, [r3, #0]
  4059cc:	b153      	cbz	r3, 4059e4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4059ce:	4b09      	ldr	r3, [pc, #36]	; (4059f4 <_sbrk+0x2c>)
  4059d0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4059d2:	181a      	adds	r2, r3, r0
  4059d4:	4908      	ldr	r1, [pc, #32]	; (4059f8 <_sbrk+0x30>)
  4059d6:	4291      	cmp	r1, r2
  4059d8:	db08      	blt.n	4059ec <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4059da:	4610      	mov	r0, r2
  4059dc:	4a05      	ldr	r2, [pc, #20]	; (4059f4 <_sbrk+0x2c>)
  4059de:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4059e0:	4618      	mov	r0, r3
  4059e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4059e4:	4a05      	ldr	r2, [pc, #20]	; (4059fc <_sbrk+0x34>)
  4059e6:	4b03      	ldr	r3, [pc, #12]	; (4059f4 <_sbrk+0x2c>)
  4059e8:	601a      	str	r2, [r3, #0]
  4059ea:	e7f0      	b.n	4059ce <_sbrk+0x6>
		return (caddr_t) -1;	
  4059ec:	f04f 30ff 	mov.w	r0, #4294967295
}
  4059f0:	4770      	bx	lr
  4059f2:	bf00      	nop
  4059f4:	2040c3dc 	.word	0x2040c3dc
  4059f8:	2045fffc 	.word	0x2045fffc
  4059fc:	2040f250 	.word	0x2040f250

00405a00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405a00:	f04f 30ff 	mov.w	r0, #4294967295
  405a04:	4770      	bx	lr

00405a06 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405a0a:	604b      	str	r3, [r1, #4]

	return 0;
}
  405a0c:	2000      	movs	r0, #0
  405a0e:	4770      	bx	lr

00405a10 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405a10:	2001      	movs	r0, #1
  405a12:	4770      	bx	lr

00405a14 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405a14:	2000      	movs	r0, #0
  405a16:	4770      	bx	lr

00405a18 <resolve_cb>:
* \param[in] hostIp Server IP.
*
* \return None.
*/
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  405a18:	b510      	push	{r4, lr}
  405a1a:	b082      	sub	sp, #8
  gu32HostIp = hostIp;
  405a1c:	4b07      	ldr	r3, [pc, #28]	; (405a3c <resolve_cb+0x24>)
  405a1e:	6019      	str	r1, [r3, #0]
  gbHostIpByName = true;
  printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
  (int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405a20:	0e0b      	lsrs	r3, r1, #24
  printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405a22:	9301      	str	r3, [sp, #4]
  405a24:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405a28:	9300      	str	r3, [sp, #0]
  405a2a:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405a2e:	b2ca      	uxtb	r2, r1
  405a30:	4601      	mov	r1, r0
  405a32:	4803      	ldr	r0, [pc, #12]	; (405a40 <resolve_cb+0x28>)
  405a34:	4c03      	ldr	r4, [pc, #12]	; (405a44 <resolve_cb+0x2c>)
  405a36:	47a0      	blx	r4
}
  405a38:	b002      	add	sp, #8
  405a3a:	bd10      	pop	{r4, pc}
  405a3c:	2040ced4 	.word	0x2040ced4
  405a40:	0040d79c 	.word	0x0040d79c
  405a44:	004060b9 	.word	0x004060b9

00405a48 <task_process>:

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

static void task_process(void *pvParameters) {
  405a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a4c:	b08d      	sub	sp, #52	; 0x34

  printf("task process created \n");
  405a4e:	487a      	ldr	r0, [pc, #488]	; (405c38 <task_process+0x1f0>)
  405a50:	4b7a      	ldr	r3, [pc, #488]	; (405c3c <task_process+0x1f4>)
  405a52:	4798      	blx	r3
  vTaskDelay(1000);
  405a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405a58:	4b79      	ldr	r3, [pc, #484]	; (405c40 <task_process+0x1f8>)
  405a5a:	4798      	blx	r3
    MSG,
    TIMEOUT,
    DONE,
  };

  enum states state = WAIT;
  405a5c:	2300      	movs	r3, #0

      state = WAIT;
      break;

      case TIMEOUT:
      state = WAIT;
  405a5e:	461d      	mov	r5, r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405a60:	4c78      	ldr	r4, [pc, #480]	; (405c44 <task_process+0x1fc>)
		char needle[20] = "led";
  405a62:	f8df b250 	ldr.w	fp, [pc, #592]	; 405cb4 <task_process+0x26c>
      state = WAIT;
  405a66:	4699      	mov	r9, r3
  405a68:	e006      	b.n	405a78 <task_process+0x30>
      state = GET;
  405a6a:	2301      	movs	r3, #1
  405a6c:	e004      	b.n	405a78 <task_process+0x30>
  405a6e:	2301      	movs	r3, #1
  405a70:	e002      	b.n	405a78 <task_process+0x30>
  405a72:	2301      	movs	r3, #1
  405a74:	e000      	b.n	405a78 <task_process+0x30>
      state = WAIT;
  405a76:	464b      	mov	r3, r9
    switch(state){
  405a78:	2b05      	cmp	r3, #5
  405a7a:	d8fc      	bhi.n	405a76 <task_process+0x2e>
  405a7c:	a201      	add	r2, pc, #4	; (adr r2, 405a84 <task_process+0x3c>)
  405a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405a82:	bf00      	nop
  405a84:	00405a9d 	.word	0x00405a9d
  405a88:	00405acd 	.word	0x00405acd
  405a8c:	00405b0b 	.word	0x00405b0b
  405a90:	00405b61 	.word	0x00405b61
  405a94:	00405a77 	.word	0x00405a77
  405a98:	00405c2f 	.word	0x00405c2f
      printf("STATE: WAIT \n");
  405a9c:	486a      	ldr	r0, [pc, #424]	; (405c48 <task_process+0x200>)
  405a9e:	4b67      	ldr	r3, [pc, #412]	; (405c3c <task_process+0x1f4>)
  405aa0:	4798      	blx	r3
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405aa2:	4b6a      	ldr	r3, [pc, #424]	; (405c4c <task_process+0x204>)
  405aa4:	781b      	ldrb	r3, [r3, #0]
  405aa6:	2b00      	cmp	r3, #0
  405aa8:	d1df      	bne.n	405a6a <task_process+0x22>
  405aaa:	f994 3000 	ldrsb.w	r3, [r4]
  405aae:	2b00      	cmp	r3, #0
  405ab0:	dbdd      	blt.n	405a6e <task_process+0x26>
        vTaskDelay(10);
  405ab2:	4f63      	ldr	r7, [pc, #396]	; (405c40 <task_process+0x1f8>)
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405ab4:	4e65      	ldr	r6, [pc, #404]	; (405c4c <task_process+0x204>)
        vTaskDelay(10);
  405ab6:	200a      	movs	r0, #10
  405ab8:	47b8      	blx	r7
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405aba:	7833      	ldrb	r3, [r6, #0]
  405abc:	2b00      	cmp	r3, #0
  405abe:	d1d8      	bne.n	405a72 <task_process+0x2a>
  405ac0:	f994 3000 	ldrsb.w	r3, [r4]
  405ac4:	2b00      	cmp	r3, #0
  405ac6:	daf6      	bge.n	405ab6 <task_process+0x6e>
      state = GET;
  405ac8:	2301      	movs	r3, #1
  405aca:	e7d5      	b.n	405a78 <task_process+0x30>
      printf("STATE: GET \n");
  405acc:	4860      	ldr	r0, [pc, #384]	; (405c50 <task_process+0x208>)
  405ace:	4b5b      	ldr	r3, [pc, #364]	; (405c3c <task_process+0x1f4>)
  405ad0:	4798      	blx	r3
      sprintf((char *)g_sendBuffer, MAIN_PREFIX_BUFFER);
  405ad2:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 405cb8 <task_process+0x270>
  405ad6:	4646      	mov	r6, r8
  405ad8:	4f5e      	ldr	r7, [pc, #376]	; (405c54 <task_process+0x20c>)
  405ada:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  405adc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  405ade:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  405ae0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  405ae2:	e897 0003 	ldmia.w	r7, {r0, r1}
  405ae6:	f846 0b04 	str.w	r0, [r6], #4
  405aea:	f826 1b02 	strh.w	r1, [r6], #2
  405aee:	0c09      	lsrs	r1, r1, #16
  405af0:	7031      	strb	r1, [r6, #0]
      send(tcp_client_socket, g_sendBuffer, strlen((char *)g_sendBuffer), 0);
  405af2:	4640      	mov	r0, r8
  405af4:	4b58      	ldr	r3, [pc, #352]	; (405c58 <task_process+0x210>)
  405af6:	4798      	blx	r3
  405af8:	462b      	mov	r3, r5
  405afa:	b282      	uxth	r2, r0
  405afc:	4641      	mov	r1, r8
  405afe:	f994 0000 	ldrsb.w	r0, [r4]
  405b02:	4e56      	ldr	r6, [pc, #344]	; (405c5c <task_process+0x214>)
  405b04:	47b0      	blx	r6
      state = ACK;
  405b06:	2302      	movs	r3, #2
      break;
  405b08:	e7b6      	b.n	405a78 <task_process+0x30>
      printf("STATE: ACK \n");
  405b0a:	4855      	ldr	r0, [pc, #340]	; (405c60 <task_process+0x218>)
  405b0c:	4b4b      	ldr	r3, [pc, #300]	; (405c3c <task_process+0x1f4>)
  405b0e:	4798      	blx	r3
      memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405b10:	4e54      	ldr	r6, [pc, #336]	; (405c64 <task_process+0x21c>)
  405b12:	f44f 67af 	mov.w	r7, #1400	; 0x578
  405b16:	463a      	mov	r2, r7
  405b18:	4629      	mov	r1, r5
  405b1a:	4630      	mov	r0, r6
  405b1c:	4b52      	ldr	r3, [pc, #328]	; (405c68 <task_process+0x220>)
  405b1e:	4798      	blx	r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405b20:	462b      	mov	r3, r5
  405b22:	463a      	mov	r2, r7
  405b24:	4631      	mov	r1, r6
  405b26:	f994 0000 	ldrsb.w	r0, [r4]
  405b2a:	4e50      	ldr	r6, [pc, #320]	; (405c6c <task_process+0x224>)
  405b2c:	47b0      	blx	r6
      if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  405b2e:	462b      	mov	r3, r5
  405b30:	f241 3288 	movw	r2, #5000	; 0x1388
  405b34:	a90b      	add	r1, sp, #44	; 0x2c
  405b36:	484e      	ldr	r0, [pc, #312]	; (405c70 <task_process+0x228>)
  405b38:	6800      	ldr	r0, [r0, #0]
  405b3a:	4e4e      	ldr	r6, [pc, #312]	; (405c74 <task_process+0x22c>)
  405b3c:	47b0      	blx	r6
  405b3e:	2801      	cmp	r0, #1
  405b40:	d001      	beq.n	405b46 <task_process+0xfe>
        state = TIMEOUT;
  405b42:	2304      	movs	r3, #4
  405b44:	e798      	b.n	405a78 <task_process+0x30>
        printf(STRING_LINE);
  405b46:	4f4c      	ldr	r7, [pc, #304]	; (405c78 <task_process+0x230>)
  405b48:	4638      	mov	r0, r7
  405b4a:	4e3c      	ldr	r6, [pc, #240]	; (405c3c <task_process+0x1f4>)
  405b4c:	47b0      	blx	r6
        printf(p_recvMsg->pu8Buffer);
  405b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405b50:	6818      	ldr	r0, [r3, #0]
  405b52:	47b0      	blx	r6
        printf(STRING_EOL);  printf(STRING_LINE);
  405b54:	4849      	ldr	r0, [pc, #292]	; (405c7c <task_process+0x234>)
  405b56:	47b0      	blx	r6
  405b58:	4638      	mov	r0, r7
  405b5a:	47b0      	blx	r6
        state = MSG;
  405b5c:	2303      	movs	r3, #3
  405b5e:	e78b      	b.n	405a78 <task_process+0x30>
      printf("STATE: MSG \n");
  405b60:	4847      	ldr	r0, [pc, #284]	; (405c80 <task_process+0x238>)
  405b62:	4e36      	ldr	r6, [pc, #216]	; (405c3c <task_process+0x1f4>)
  405b64:	47b0      	blx	r6
      memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405b66:	4f3f      	ldr	r7, [pc, #252]	; (405c64 <task_process+0x21c>)
  405b68:	f44f 68af 	mov.w	r8, #1400	; 0x578
  405b6c:	4642      	mov	r2, r8
  405b6e:	4629      	mov	r1, r5
  405b70:	4638      	mov	r0, r7
  405b72:	4b3d      	ldr	r3, [pc, #244]	; (405c68 <task_process+0x220>)
  405b74:	4798      	blx	r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405b76:	462b      	mov	r3, r5
  405b78:	4642      	mov	r2, r8
  405b7a:	4639      	mov	r1, r7
  405b7c:	f994 0000 	ldrsb.w	r0, [r4]
  405b80:	4f3a      	ldr	r7, [pc, #232]	; (405c6c <task_process+0x224>)
  405b82:	47b8      	blx	r7
	  printf("BBBBBBBBBBBBBBBBBB\n");
  405b84:	483f      	ldr	r0, [pc, #252]	; (405c84 <task_process+0x23c>)
  405b86:	47b0      	blx	r6
      if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  405b88:	462b      	mov	r3, r5
  405b8a:	f241 3288 	movw	r2, #5000	; 0x1388
  405b8e:	a90b      	add	r1, sp, #44	; 0x2c
  405b90:	4837      	ldr	r0, [pc, #220]	; (405c70 <task_process+0x228>)
  405b92:	6800      	ldr	r0, [r0, #0]
  405b94:	4e37      	ldr	r6, [pc, #220]	; (405c74 <task_process+0x22c>)
  405b96:	47b0      	blx	r6
  405b98:	2801      	cmp	r0, #1
  405b9a:	d001      	beq.n	405ba0 <task_process+0x158>
        state = TIMEOUT;
  405b9c:	2304      	movs	r3, #4
  405b9e:	e76b      	b.n	405a78 <task_process+0x30>
        printf(STRING_LINE);
  405ba0:	4835      	ldr	r0, [pc, #212]	; (405c78 <task_process+0x230>)
  405ba2:	4e26      	ldr	r6, [pc, #152]	; (405c3c <task_process+0x1f4>)
  405ba4:	47b0      	blx	r6
		printf("\nAOOOOOO\n");
  405ba6:	4838      	ldr	r0, [pc, #224]	; (405c88 <task_process+0x240>)
  405ba8:	47b0      	blx	r6
		char needle[20] = "led";
  405baa:	f8cd b018 	str.w	fp, [sp, #24]
  405bae:	9507      	str	r5, [sp, #28]
  405bb0:	9508      	str	r5, [sp, #32]
  405bb2:	9509      	str	r5, [sp, #36]	; 0x24
  405bb4:	950a      	str	r5, [sp, #40]	; 0x28
		char *founded = strstr(p_recvMsg->pu8Buffer, needle);
  405bb6:	a906      	add	r1, sp, #24
  405bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405bba:	6818      	ldr	r0, [r3, #0]
  405bbc:	4b33      	ldr	r3, [pc, #204]	; (405c8c <task_process+0x244>)
  405bbe:	4798      	blx	r3
  405bc0:	9001      	str	r0, [sp, #4]
		int someInt = 0;
  405bc2:	462e      	mov	r6, r5
			sprintf(j, "%d", someInt);
  405bc4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 405cbc <task_process+0x274>
  405bc8:	4632      	mov	r2, r6
  405bca:	4931      	ldr	r1, [pc, #196]	; (405c90 <task_process+0x248>)
  405bcc:	a803      	add	r0, sp, #12
  405bce:	47d0      	blx	sl
			printf("i = %d ---------- j = %s\n",someInt,j);
  405bd0:	aa03      	add	r2, sp, #12
  405bd2:	4631      	mov	r1, r6
  405bd4:	482f      	ldr	r0, [pc, #188]	; (405c94 <task_process+0x24c>)
  405bd6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 405c3c <task_process+0x1f4>
  405bda:	47c0      	blx	r8
			flagzin = strstr(founded, j);
  405bdc:	a903      	add	r1, sp, #12
  405bde:	9801      	ldr	r0, [sp, #4]
  405be0:	4b2a      	ldr	r3, [pc, #168]	; (405c8c <task_process+0x244>)
  405be2:	4798      	blx	r3
  405be4:	4607      	mov	r7, r0
			printf("FLAGZIN ----> %s\n", flagzin); 
  405be6:	4601      	mov	r1, r0
  405be8:	482b      	ldr	r0, [pc, #172]	; (405c98 <task_process+0x250>)
  405bea:	47c0      	blx	r8
			if (flagzin != NULL) {
  405bec:	b9a7      	cbnz	r7, 405c18 <task_process+0x1d0>
			someInt++;
  405bee:	3601      	adds	r6, #1
		for (int i = 0; i < 2; i++) {
  405bf0:	2e02      	cmp	r6, #2
  405bf2:	d1e9      	bne.n	405bc8 <task_process+0x180>
			printf("APAGUEI\n");
  405bf4:	4829      	ldr	r0, [pc, #164]	; (405c9c <task_process+0x254>)
  405bf6:	4b11      	ldr	r3, [pc, #68]	; (405c3c <task_process+0x1f4>)
  405bf8:	4798      	blx	r3
			pio_set(LED_PIO, LED_IDX_MASK);	
  405bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
  405bfe:	4828      	ldr	r0, [pc, #160]	; (405ca0 <task_process+0x258>)
  405c00:	4b28      	ldr	r3, [pc, #160]	; (405ca4 <task_process+0x25c>)
  405c02:	4798      	blx	r3
        printf(p_recvMsg->pu8Buffer);
  405c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405c06:	6818      	ldr	r0, [r3, #0]
  405c08:	4e0c      	ldr	r6, [pc, #48]	; (405c3c <task_process+0x1f4>)
  405c0a:	47b0      	blx	r6
        printf(STRING_EOL);  printf(STRING_LINE);
  405c0c:	481b      	ldr	r0, [pc, #108]	; (405c7c <task_process+0x234>)
  405c0e:	47b0      	blx	r6
  405c10:	4819      	ldr	r0, [pc, #100]	; (405c78 <task_process+0x230>)
  405c12:	47b0      	blx	r6
        state = DONE;
  405c14:	2305      	movs	r3, #5
  405c16:	e72f      	b.n	405a78 <task_process+0x30>
		if (someInt == 1) {
  405c18:	2e01      	cmp	r6, #1
  405c1a:	d1eb      	bne.n	405bf4 <task_process+0x1ac>
			printf("ACENDI \n");
  405c1c:	4822      	ldr	r0, [pc, #136]	; (405ca8 <task_process+0x260>)
  405c1e:	4b07      	ldr	r3, [pc, #28]	; (405c3c <task_process+0x1f4>)
  405c20:	4798      	blx	r3
			pio_clear(LED_PIO, LED_IDX_MASK);
  405c22:	f44f 7180 	mov.w	r1, #256	; 0x100
  405c26:	481e      	ldr	r0, [pc, #120]	; (405ca0 <task_process+0x258>)
  405c28:	4b20      	ldr	r3, [pc, #128]	; (405cac <task_process+0x264>)
  405c2a:	4798      	blx	r3
  405c2c:	e7ea      	b.n	405c04 <task_process+0x1bc>
      printf("STATE: DONE \n");
  405c2e:	4820      	ldr	r0, [pc, #128]	; (405cb0 <task_process+0x268>)
  405c30:	4b02      	ldr	r3, [pc, #8]	; (405c3c <task_process+0x1f4>)
  405c32:	4798      	blx	r3
      state = WAIT;
  405c34:	462b      	mov	r3, r5
      break;
  405c36:	e71f      	b.n	405a78 <task_process+0x30>
  405c38:	0040d814 	.word	0x0040d814
  405c3c:	004060b9 	.word	0x004060b9
  405c40:	004016fd 	.word	0x004016fd
  405c44:	20400020 	.word	0x20400020
  405c48:	0040d82c 	.word	0x0040d82c
  405c4c:	2040ced0 	.word	0x2040ced0
  405c50:	0040d83c 	.word	0x0040d83c
  405c54:	0040d84c 	.word	0x0040d84c
  405c58:	004064c1 	.word	0x004064c1
  405c5c:	0040499d 	.word	0x0040499d
  405c60:	0040d874 	.word	0x0040d874
  405c64:	2040c3e0 	.word	0x2040c3e0
  405c68:	00406215 	.word	0x00406215
  405c6c:	00404a39 	.word	0x00404a39
  405c70:	2040d020 	.word	0x2040d020
  405c74:	00400ed5 	.word	0x00400ed5
  405c78:	0040d75c 	.word	0x0040d75c
  405c7c:	0040d870 	.word	0x0040d870
  405c80:	0040d884 	.word	0x0040d884
  405c84:	0040d894 	.word	0x0040d894
  405c88:	0040d8a8 	.word	0x0040d8a8
  405c8c:	0040684d 	.word	0x0040684d
  405c90:	0040d8b4 	.word	0x0040d8b4
  405c94:	0040d8b8 	.word	0x0040d8b8
  405c98:	0040d8d4 	.word	0x0040d8d4
  405c9c:	0040d8f4 	.word	0x0040d8f4
  405ca0:	400e1200 	.word	0x400e1200
  405ca4:	00404edb 	.word	0x00404edb
  405ca8:	0040d8e8 	.word	0x0040d8e8
  405cac:	00404edf 	.word	0x00404edf
  405cb0:	0040d900 	.word	0x0040d900
  405cb4:	0064656c 	.word	0x0064656c
  405cb8:	2040c958 	.word	0x2040c958
  405cbc:	00406451 	.word	0x00406451

00405cc0 <task_wifi>:
      default: state = WAIT;
    }
  }
}

static void task_wifi(void *pvParameters) {
  405cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  405cc2:	b08d      	sub	sp, #52	; 0x34
  tstrWifiInitParam param;
  struct sockaddr_in addr_in;

  xSemaphore = xSemaphoreCreateCounting(20,0);
  405cc4:	2100      	movs	r1, #0
  405cc6:	2014      	movs	r0, #20
  405cc8:	4b3b      	ldr	r3, [pc, #236]	; (405db8 <task_wifi+0xf8>)
  405cca:	4798      	blx	r3
  405ccc:	4b3b      	ldr	r3, [pc, #236]	; (405dbc <task_wifi+0xfc>)
  405cce:	6018      	str	r0, [r3, #0]
  xQueueMsg = xQueueCreate(10, sizeof(tstrSocketRecvMsg));
  405cd0:	2200      	movs	r2, #0
  405cd2:	2118      	movs	r1, #24
  405cd4:	200a      	movs	r0, #10
  405cd6:	4b3a      	ldr	r3, [pc, #232]	; (405dc0 <task_wifi+0x100>)
  405cd8:	4798      	blx	r3
  405cda:	4b3a      	ldr	r3, [pc, #232]	; (405dc4 <task_wifi+0x104>)
  405cdc:	6018      	str	r0, [r3, #0]

  /* Initialize the BSP. */
  nm_bsp_init();
  405cde:	4b3a      	ldr	r3, [pc, #232]	; (405dc8 <task_wifi+0x108>)
  405ce0:	4798      	blx	r3

  /* Initialize Wi-Fi parameters structure. */
  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  405ce2:	2300      	movs	r3, #0
  405ce4:	9307      	str	r3, [sp, #28]
  405ce6:	9308      	str	r3, [sp, #32]
  405ce8:	9309      	str	r3, [sp, #36]	; 0x24
  405cea:	930a      	str	r3, [sp, #40]	; 0x28
  405cec:	930b      	str	r3, [sp, #44]	; 0x2c

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
  405cee:	4b37      	ldr	r3, [pc, #220]	; (405dcc <task_wifi+0x10c>)
  405cf0:	9306      	str	r3, [sp, #24]
  int8_t ret = m2m_wifi_init(&param);
  405cf2:	a806      	add	r0, sp, #24
  405cf4:	4b36      	ldr	r3, [pc, #216]	; (405dd0 <task_wifi+0x110>)
  405cf6:	4798      	blx	r3
  if (M2M_SUCCESS != ret) {
  405cf8:	b120      	cbz	r0, 405d04 <task_wifi+0x44>
  405cfa:	4601      	mov	r1, r0
    printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  405cfc:	4835      	ldr	r0, [pc, #212]	; (405dd4 <task_wifi+0x114>)
  405cfe:	4b36      	ldr	r3, [pc, #216]	; (405dd8 <task_wifi+0x118>)
  405d00:	4798      	blx	r3
  405d02:	e7fe      	b.n	405d02 <task_wifi+0x42>
    while (1) { }
  }

  /* Initialize socket module. */
  socketInit();
  405d04:	4b35      	ldr	r3, [pc, #212]	; (405ddc <task_wifi+0x11c>)
  405d06:	4798      	blx	r3

  /* Register socket callback function. */
  registerSocketCallback(socket_cb, resolve_cb);
  405d08:	4935      	ldr	r1, [pc, #212]	; (405de0 <task_wifi+0x120>)
  405d0a:	4836      	ldr	r0, [pc, #216]	; (405de4 <task_wifi+0x124>)
  405d0c:	4b36      	ldr	r3, [pc, #216]	; (405de8 <task_wifi+0x128>)
  405d0e:	4798      	blx	r3

  /* Connect to router. */
  printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  405d10:	4d36      	ldr	r5, [pc, #216]	; (405dec <task_wifi+0x12c>)
  405d12:	4629      	mov	r1, r5
  405d14:	4836      	ldr	r0, [pc, #216]	; (405df0 <task_wifi+0x130>)
  405d16:	4c30      	ldr	r4, [pc, #192]	; (405dd8 <task_wifi+0x118>)
  405d18:	47a0      	blx	r4
  m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  405d1a:	23ff      	movs	r3, #255	; 0xff
  405d1c:	9300      	str	r3, [sp, #0]
  405d1e:	4b35      	ldr	r3, [pc, #212]	; (405df4 <task_wifi+0x134>)
  405d20:	2202      	movs	r2, #2
  405d22:	2105      	movs	r1, #5
  405d24:	4628      	mov	r0, r5
  405d26:	4d34      	ldr	r5, [pc, #208]	; (405df8 <task_wifi+0x138>)
  405d28:	47a8      	blx	r5

  /* formata ip */
  addr_in.sin_family = AF_INET;
  405d2a:	2302      	movs	r3, #2
  405d2c:	f8ad 3008 	strh.w	r3, [sp, #8]
  addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  405d30:	f648 0313 	movw	r3, #34835	; 0x8813
  405d34:	f8ad 300a 	strh.w	r3, [sp, #10]
  inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  405d38:	a903      	add	r1, sp, #12
  405d3a:	4830      	ldr	r0, [pc, #192]	; (405dfc <task_wifi+0x13c>)
  405d3c:	4b30      	ldr	r3, [pc, #192]	; (405e00 <task_wifi+0x140>)
  405d3e:	4798      	blx	r3

  printf(STRING_LINE);
  405d40:	4830      	ldr	r0, [pc, #192]	; (405e04 <task_wifi+0x144>)
  405d42:	47a0      	blx	r4

  while(1){
    vTaskDelay(50);
  405d44:	4e30      	ldr	r6, [pc, #192]	; (405e08 <task_wifi+0x148>)
    m2m_wifi_handle_events(NULL);
  405d46:	4d31      	ldr	r5, [pc, #196]	; (405e0c <task_wifi+0x14c>)

    if (wifi_connected == M2M_WIFI_CONNECTED) {
  405d48:	4c31      	ldr	r4, [pc, #196]	; (405e10 <task_wifi+0x150>)
  405d4a:	e001      	b.n	405d50 <task_wifi+0x90>
      /* Open client socket. */
      if (tcp_client_socket < 0) {
        printf(STRING_LINE);
        printf("socket init \n");
        if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
          printf("main: failed to create TCP client socket error!\r\n");
  405d4c:	4831      	ldr	r0, [pc, #196]	; (405e14 <task_wifi+0x154>)
  405d4e:	47b8      	blx	r7
    vTaskDelay(50);
  405d50:	2032      	movs	r0, #50	; 0x32
  405d52:	47b0      	blx	r6
    m2m_wifi_handle_events(NULL);
  405d54:	2000      	movs	r0, #0
  405d56:	47a8      	blx	r5
    if (wifi_connected == M2M_WIFI_CONNECTED) {
  405d58:	7823      	ldrb	r3, [r4, #0]
  405d5a:	2b01      	cmp	r3, #1
  405d5c:	d1f8      	bne.n	405d50 <task_wifi+0x90>
      if (tcp_client_socket < 0) {
  405d5e:	4b2e      	ldr	r3, [pc, #184]	; (405e18 <task_wifi+0x158>)
  405d60:	f993 3000 	ldrsb.w	r3, [r3]
  405d64:	2b00      	cmp	r3, #0
  405d66:	daf3      	bge.n	405d50 <task_wifi+0x90>
        printf(STRING_LINE);
  405d68:	4826      	ldr	r0, [pc, #152]	; (405e04 <task_wifi+0x144>)
  405d6a:	4f1b      	ldr	r7, [pc, #108]	; (405dd8 <task_wifi+0x118>)
  405d6c:	47b8      	blx	r7
        printf("socket init \n");
  405d6e:	482b      	ldr	r0, [pc, #172]	; (405e1c <task_wifi+0x15c>)
  405d70:	47b8      	blx	r7
        if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405d72:	2200      	movs	r2, #0
  405d74:	2101      	movs	r1, #1
  405d76:	2002      	movs	r0, #2
  405d78:	4b29      	ldr	r3, [pc, #164]	; (405e20 <task_wifi+0x160>)
  405d7a:	4798      	blx	r3
  405d7c:	4b26      	ldr	r3, [pc, #152]	; (405e18 <task_wifi+0x158>)
  405d7e:	7018      	strb	r0, [r3, #0]
  405d80:	2800      	cmp	r0, #0
  405d82:	dbe3      	blt.n	405d4c <task_wifi+0x8c>
          continue;
        }

        /* Connect server */
        printf("socket connecting\n");
  405d84:	4827      	ldr	r0, [pc, #156]	; (405e24 <task_wifi+0x164>)
  405d86:	4b14      	ldr	r3, [pc, #80]	; (405dd8 <task_wifi+0x118>)
  405d88:	4798      	blx	r3
        if (connect(tcp_client_socket, (struct sockaddr *)&addr_in,
  405d8a:	2210      	movs	r2, #16
  405d8c:	a902      	add	r1, sp, #8
  405d8e:	4b22      	ldr	r3, [pc, #136]	; (405e18 <task_wifi+0x158>)
  405d90:	f993 0000 	ldrsb.w	r0, [r3]
  405d94:	4b24      	ldr	r3, [pc, #144]	; (405e28 <task_wifi+0x168>)
  405d96:	4798      	blx	r3
  405d98:	b918      	cbnz	r0, 405da2 <task_wifi+0xe2>
        sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
          close(tcp_client_socket);
          tcp_client_socket = -1;
          printf("main: error connect to socket\n");
          }else{
          gbTcpConnection = true;
  405d9a:	2201      	movs	r2, #1
  405d9c:	4b23      	ldr	r3, [pc, #140]	; (405e2c <task_wifi+0x16c>)
  405d9e:	701a      	strb	r2, [r3, #0]
  405da0:	e7d6      	b.n	405d50 <task_wifi+0x90>
          close(tcp_client_socket);
  405da2:	4f1d      	ldr	r7, [pc, #116]	; (405e18 <task_wifi+0x158>)
  405da4:	f997 0000 	ldrsb.w	r0, [r7]
  405da8:	4b21      	ldr	r3, [pc, #132]	; (405e30 <task_wifi+0x170>)
  405daa:	4798      	blx	r3
          tcp_client_socket = -1;
  405dac:	23ff      	movs	r3, #255	; 0xff
  405dae:	703b      	strb	r3, [r7, #0]
          printf("main: error connect to socket\n");
  405db0:	4820      	ldr	r0, [pc, #128]	; (405e34 <task_wifi+0x174>)
  405db2:	4b09      	ldr	r3, [pc, #36]	; (405dd8 <task_wifi+0x118>)
  405db4:	4798      	blx	r3
  405db6:	e7cb      	b.n	405d50 <task_wifi+0x90>
  405db8:	00400b91 	.word	0x00400b91
  405dbc:	2040d024 	.word	0x2040d024
  405dc0:	00400b15 	.word	0x00400b15
  405dc4:	2040d020 	.word	0x2040d020
  405dc8:	004021d5 	.word	0x004021d5
  405dcc:	00405ef1 	.word	0x00405ef1
  405dd0:	00403025 	.word	0x00403025
  405dd4:	0040d910 	.word	0x0040d910
  405dd8:	004060b9 	.word	0x004060b9
  405ddc:	004047d5 	.word	0x004047d5
  405de0:	00405a19 	.word	0x00405a19
  405de4:	00405e39 	.word	0x00405e39
  405de8:	00404819 	.word	0x00404819
  405dec:	0040d938 	.word	0x0040d938
  405df0:	0040d940 	.word	0x0040d940
  405df4:	0040d964 	.word	0x0040d964
  405df8:	0040337d 	.word	0x0040337d
  405dfc:	0040d970 	.word	0x0040d970
  405e00:	004003f5 	.word	0x004003f5
  405e04:	0040d75c 	.word	0x0040d75c
  405e08:	004016fd 	.word	0x004016fd
  405e0c:	00403121 	.word	0x00403121
  405e10:	2040ced8 	.word	0x2040ced8
  405e14:	0040d990 	.word	0x0040d990
  405e18:	20400020 	.word	0x20400020
  405e1c:	0040d980 	.word	0x0040d980
  405e20:	0040482d 	.word	0x0040482d
  405e24:	0040d9c4 	.word	0x0040d9c4
  405e28:	0040490d 	.word	0x0040490d
  405e2c:	2040ced0 	.word	0x2040ced0
  405e30:	00404ad9 	.word	0x00404ad9
  405e34:	0040d9d8 	.word	0x0040d9d8

00405e38 <socket_cb>:
  if (sock == tcp_client_socket) {
  405e38:	4b23      	ldr	r3, [pc, #140]	; (405ec8 <socket_cb+0x90>)
  405e3a:	f993 3000 	ldrsb.w	r3, [r3]
  405e3e:	4283      	cmp	r3, r0
  405e40:	d000      	beq.n	405e44 <socket_cb+0xc>
  405e42:	4770      	bx	lr
{
  405e44:	b510      	push	{r4, lr}
  405e46:	b082      	sub	sp, #8
  405e48:	4614      	mov	r4, r2
    switch (u8Msg) {
  405e4a:	2905      	cmp	r1, #5
  405e4c:	d003      	beq.n	405e56 <socket_cb+0x1e>
  405e4e:	2906      	cmp	r1, #6
  405e50:	d01f      	beq.n	405e92 <socket_cb+0x5a>
}
  405e52:	b002      	add	sp, #8
  405e54:	bd10      	pop	{r4, pc}
        printf("socket_msg_connect\n");
  405e56:	481d      	ldr	r0, [pc, #116]	; (405ecc <socket_cb+0x94>)
  405e58:	4b1d      	ldr	r3, [pc, #116]	; (405ed0 <socket_cb+0x98>)
  405e5a:	4798      	blx	r3
        if (gbTcpConnection) {
  405e5c:	4b1d      	ldr	r3, [pc, #116]	; (405ed4 <socket_cb+0x9c>)
  405e5e:	781b      	ldrb	r3, [r3, #0]
  405e60:	2b00      	cmp	r3, #0
  405e62:	d0f6      	beq.n	405e52 <socket_cb+0x1a>
          if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  405e64:	b13c      	cbz	r4, 405e76 <socket_cb+0x3e>
  405e66:	f994 3001 	ldrsb.w	r3, [r4, #1]
  405e6a:	2b00      	cmp	r3, #0
  405e6c:	db03      	blt.n	405e76 <socket_cb+0x3e>
            printf("socket_cb: connect ok \n");
  405e6e:	481a      	ldr	r0, [pc, #104]	; (405ed8 <socket_cb+0xa0>)
  405e70:	4b17      	ldr	r3, [pc, #92]	; (405ed0 <socket_cb+0x98>)
  405e72:	4798      	blx	r3
            gbTcpConnected = true;
  405e74:	e7ed      	b.n	405e52 <socket_cb+0x1a>
            printf("socket_cb: connect error!\r\n");
  405e76:	4819      	ldr	r0, [pc, #100]	; (405edc <socket_cb+0xa4>)
  405e78:	4b15      	ldr	r3, [pc, #84]	; (405ed0 <socket_cb+0x98>)
  405e7a:	4798      	blx	r3
            gbTcpConnection = false;
  405e7c:	2200      	movs	r2, #0
  405e7e:	4b15      	ldr	r3, [pc, #84]	; (405ed4 <socket_cb+0x9c>)
  405e80:	701a      	strb	r2, [r3, #0]
            close(tcp_client_socket);
  405e82:	4c11      	ldr	r4, [pc, #68]	; (405ec8 <socket_cb+0x90>)
  405e84:	f994 0000 	ldrsb.w	r0, [r4]
  405e88:	4b15      	ldr	r3, [pc, #84]	; (405ee0 <socket_cb+0xa8>)
  405e8a:	4798      	blx	r3
            tcp_client_socket = -1;
  405e8c:	23ff      	movs	r3, #255	; 0xff
  405e8e:	7023      	strb	r3, [r4, #0]
  405e90:	e7df      	b.n	405e52 <socket_cb+0x1a>
        tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
  405e92:	9201      	str	r2, [sp, #4]
        if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405e94:	b18a      	cbz	r2, 405eba <socket_cb+0x82>
  405e96:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  405e9a:	2a00      	cmp	r2, #0
  405e9c:	dd0d      	ble.n	405eba <socket_cb+0x82>
          xQueueSend(xQueueMsg, &pstrRecv, 10);
  405e9e:	2300      	movs	r3, #0
  405ea0:	220a      	movs	r2, #10
  405ea2:	a901      	add	r1, sp, #4
  405ea4:	480f      	ldr	r0, [pc, #60]	; (405ee4 <socket_cb+0xac>)
  405ea6:	6800      	ldr	r0, [r0, #0]
  405ea8:	4c0f      	ldr	r4, [pc, #60]	; (405ee8 <socket_cb+0xb0>)
  405eaa:	47a0      	blx	r4
          xSemaphoreGive( xSemaphore );
  405eac:	2300      	movs	r3, #0
  405eae:	461a      	mov	r2, r3
  405eb0:	4619      	mov	r1, r3
  405eb2:	480e      	ldr	r0, [pc, #56]	; (405eec <socket_cb+0xb4>)
  405eb4:	6800      	ldr	r0, [r0, #0]
  405eb6:	47a0      	blx	r4
  405eb8:	e7cb      	b.n	405e52 <socket_cb+0x1a>
          close(tcp_client_socket);
  405eba:	4618      	mov	r0, r3
  405ebc:	4b08      	ldr	r3, [pc, #32]	; (405ee0 <socket_cb+0xa8>)
  405ebe:	4798      	blx	r3
          tcp_client_socket = -1;
  405ec0:	22ff      	movs	r2, #255	; 0xff
  405ec2:	4b01      	ldr	r3, [pc, #4]	; (405ec8 <socket_cb+0x90>)
  405ec4:	701a      	strb	r2, [r3, #0]
}
  405ec6:	e7c4      	b.n	405e52 <socket_cb+0x1a>
  405ec8:	20400020 	.word	0x20400020
  405ecc:	0040d7cc 	.word	0x0040d7cc
  405ed0:	004060b9 	.word	0x004060b9
  405ed4:	2040ced0 	.word	0x2040ced0
  405ed8:	0040d7e0 	.word	0x0040d7e0
  405edc:	0040d7f8 	.word	0x0040d7f8
  405ee0:	00404ad9 	.word	0x00404ad9
  405ee4:	2040d020 	.word	0x2040d020
  405ee8:	00400bf1 	.word	0x00400bf1
  405eec:	2040d024 	.word	0x2040d024

00405ef0 <wifi_cb>:
{
  405ef0:	b510      	push	{r4, lr}
  405ef2:	b082      	sub	sp, #8
  switch (u8MsgType) {
  405ef4:	282c      	cmp	r0, #44	; 0x2c
  405ef6:	d005      	beq.n	405f04 <wifi_cb+0x14>
  405ef8:	2832      	cmp	r0, #50	; 0x32
  405efa:	d015      	beq.n	405f28 <wifi_cb+0x38>
  405efc:	281b      	cmp	r0, #27
  405efe:	d020      	beq.n	405f42 <wifi_cb+0x52>
}
  405f00:	b002      	add	sp, #8
  405f02:	bd10      	pop	{r4, pc}
      if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  405f04:	780b      	ldrb	r3, [r1, #0]
  405f06:	2b01      	cmp	r3, #1
  405f08:	d008      	beq.n	405f1c <wifi_cb+0x2c>
        } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  405f0a:	2b00      	cmp	r3, #0
  405f0c:	d1f8      	bne.n	405f00 <wifi_cb+0x10>
        printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  405f0e:	4813      	ldr	r0, [pc, #76]	; (405f5c <wifi_cb+0x6c>)
  405f10:	4b13      	ldr	r3, [pc, #76]	; (405f60 <wifi_cb+0x70>)
  405f12:	4798      	blx	r3
        wifi_connected = 0;
  405f14:	2200      	movs	r2, #0
  405f16:	4b13      	ldr	r3, [pc, #76]	; (405f64 <wifi_cb+0x74>)
  405f18:	701a      	strb	r2, [r3, #0]
  405f1a:	e7f1      	b.n	405f00 <wifi_cb+0x10>
        printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  405f1c:	4812      	ldr	r0, [pc, #72]	; (405f68 <wifi_cb+0x78>)
  405f1e:	4b10      	ldr	r3, [pc, #64]	; (405f60 <wifi_cb+0x70>)
  405f20:	4798      	blx	r3
        m2m_wifi_request_dhcp_client();
  405f22:	4b12      	ldr	r3, [pc, #72]	; (405f6c <wifi_cb+0x7c>)
  405f24:	4798      	blx	r3
  405f26:	e7eb      	b.n	405f00 <wifi_cb+0x10>
      printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  405f28:	788b      	ldrb	r3, [r1, #2]
  405f2a:	784a      	ldrb	r2, [r1, #1]
  405f2c:	7808      	ldrb	r0, [r1, #0]
  405f2e:	78c9      	ldrb	r1, [r1, #3]
  405f30:	9100      	str	r1, [sp, #0]
  405f32:	4601      	mov	r1, r0
  405f34:	480e      	ldr	r0, [pc, #56]	; (405f70 <wifi_cb+0x80>)
  405f36:	4c0a      	ldr	r4, [pc, #40]	; (405f60 <wifi_cb+0x70>)
  405f38:	47a0      	blx	r4
      wifi_connected = M2M_WIFI_CONNECTED;
  405f3a:	2201      	movs	r2, #1
  405f3c:	4b09      	ldr	r3, [pc, #36]	; (405f64 <wifi_cb+0x74>)
  405f3e:	701a      	strb	r2, [r3, #0]
      break;
  405f40:	e7de      	b.n	405f00 <wifi_cb+0x10>
      printf("socket_cb: Year: %d, Month: %d, The GMT time is %u:%02u:%02u\r\n",
  405f42:	790b      	ldrb	r3, [r1, #4]
  405f44:	788a      	ldrb	r2, [r1, #2]
  405f46:	8808      	ldrh	r0, [r1, #0]
  405f48:	798c      	ldrb	r4, [r1, #6]
  405f4a:	9401      	str	r4, [sp, #4]
  405f4c:	7949      	ldrb	r1, [r1, #5]
  405f4e:	9100      	str	r1, [sp, #0]
  405f50:	4601      	mov	r1, r0
  405f52:	4808      	ldr	r0, [pc, #32]	; (405f74 <wifi_cb+0x84>)
  405f54:	4c02      	ldr	r4, [pc, #8]	; (405f60 <wifi_cb+0x70>)
  405f56:	47a0      	blx	r4
}
  405f58:	e7d2      	b.n	405f00 <wifi_cb+0x10>
  405f5a:	bf00      	nop
  405f5c:	0040da30 	.word	0x0040da30
  405f60:	004060b9 	.word	0x004060b9
  405f64:	2040ced8 	.word	0x2040ced8
  405f68:	0040da10 	.word	0x0040da10
  405f6c:	00403399 	.word	0x00403399
  405f70:	0040da54 	.word	0x0040da54
  405f74:	0040da7c 	.word	0x0040da7c

00405f78 <vApplicationStackOverflowHook>:
signed char *pcTaskName){
  405f78:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  405f7a:	460a      	mov	r2, r1
  405f7c:	4601      	mov	r1, r0
  405f7e:	4802      	ldr	r0, [pc, #8]	; (405f88 <vApplicationStackOverflowHook+0x10>)
  405f80:	4b02      	ldr	r3, [pc, #8]	; (405f8c <vApplicationStackOverflowHook+0x14>)
  405f82:	4798      	blx	r3
  405f84:	e7fe      	b.n	405f84 <vApplicationStackOverflowHook+0xc>
  405f86:	bf00      	nop
  405f88:	0040d9f8 	.word	0x0040d9f8
  405f8c:	004060b9 	.word	0x004060b9

00405f90 <vApplicationTickHook>:
extern void vApplicationTickHook(void){}
  405f90:	4770      	bx	lr

00405f92 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  405f92:	f04f 0380 	mov.w	r3, #128	; 0x80
  405f96:	b672      	cpsid	i
  405f98:	f383 8811 	msr	BASEPRI, r3
  405f9c:	f3bf 8f6f 	isb	sy
  405fa0:	f3bf 8f4f 	dsb	sy
  405fa4:	b662      	cpsie	i
  405fa6:	e7fe      	b.n	405fa6 <vApplicationMallocFailedHook+0x14>

00405fa8 <led_init>:
void led_init(void) {
  405fa8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(LED_PIO_ID);
  405faa:	200c      	movs	r0, #12
  405fac:	4b05      	ldr	r3, [pc, #20]	; (405fc4 <led_init+0x1c>)
  405fae:	4798      	blx	r3
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  405fb0:	2300      	movs	r3, #0
  405fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
  405fb6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  405fba:	4803      	ldr	r0, [pc, #12]	; (405fc8 <led_init+0x20>)
  405fbc:	4c03      	ldr	r4, [pc, #12]	; (405fcc <led_init+0x24>)
  405fbe:	47a0      	blx	r4
  405fc0:	bd10      	pop	{r4, pc}
  405fc2:	bf00      	nop
  405fc4:	004054a1 	.word	0x004054a1
  405fc8:	400e1200 	.word	0x400e1200
  405fcc:	00404fd5 	.word	0x00404fd5

00405fd0 <main>:
    }
  }
}

int main(void)
{
  405fd0:	b500      	push	{lr}
  405fd2:	b085      	sub	sp, #20
  /* Initialize the board. */
  sysclk_init();
  405fd4:	4b15      	ldr	r3, [pc, #84]	; (40602c <main+0x5c>)
  405fd6:	4798      	blx	r3
  board_init();
  405fd8:	4b15      	ldr	r3, [pc, #84]	; (406030 <main+0x60>)
  405fda:	4798      	blx	r3
  
  led_init();
  405fdc:	4b15      	ldr	r3, [pc, #84]	; (406034 <main+0x64>)
  405fde:	4798      	blx	r3
  pio_set(LED_PIO, LED_IDX_MASK);
  405fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
  405fe4:	4814      	ldr	r0, [pc, #80]	; (406038 <main+0x68>)
  405fe6:	4b15      	ldr	r3, [pc, #84]	; (40603c <main+0x6c>)
  405fe8:	4798      	blx	r3
  //pio_clear(LED_PIO, LED_IDX_MASK);

  /* Initialize the UART console. */
  configure_console();
  405fea:	4b15      	ldr	r3, [pc, #84]	; (406040 <main+0x70>)
  405fec:	4798      	blx	r3
  printf(STRING_HEADER);
  405fee:	4815      	ldr	r0, [pc, #84]	; (406044 <main+0x74>)
  405ff0:	4b15      	ldr	r3, [pc, #84]	; (406048 <main+0x78>)
  405ff2:	4798      	blx	r3

  xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL, TASK_WIFI_PRIORITY, &xHandleWifi);
  405ff4:	2400      	movs	r4, #0
  405ff6:	9403      	str	r4, [sp, #12]
  405ff8:	9402      	str	r4, [sp, #8]
  405ffa:	4b14      	ldr	r3, [pc, #80]	; (40604c <main+0x7c>)
  405ffc:	9301      	str	r3, [sp, #4]
  405ffe:	2301      	movs	r3, #1
  406000:	9300      	str	r3, [sp, #0]
  406002:	4623      	mov	r3, r4
  406004:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  406008:	4911      	ldr	r1, [pc, #68]	; (406050 <main+0x80>)
  40600a:	4812      	ldr	r0, [pc, #72]	; (406054 <main+0x84>)
  40600c:	4d12      	ldr	r5, [pc, #72]	; (406058 <main+0x88>)
  40600e:	47a8      	blx	r5
  xTaskCreate(task_process, "process", TASK_PROCESS_STACK_SIZE, NULL, TASK_PROCESS_PRIORITY,  NULL );
  406010:	9403      	str	r4, [sp, #12]
  406012:	9402      	str	r4, [sp, #8]
  406014:	9401      	str	r4, [sp, #4]
  406016:	9400      	str	r4, [sp, #0]
  406018:	4623      	mov	r3, r4
  40601a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40601e:	490f      	ldr	r1, [pc, #60]	; (40605c <main+0x8c>)
  406020:	480f      	ldr	r0, [pc, #60]	; (406060 <main+0x90>)
  406022:	47a8      	blx	r5

  vTaskStartScheduler();
  406024:	4b0f      	ldr	r3, [pc, #60]	; (406064 <main+0x94>)
  406026:	4798      	blx	r3
  406028:	e7fe      	b.n	406028 <main+0x58>
  40602a:	bf00      	nop
  40602c:	00404c3d 	.word	0x00404c3d
  406030:	00404d39 	.word	0x00404d39
  406034:	00405fa9 	.word	0x00405fa9
  406038:	400e1200 	.word	0x400e1200
  40603c:	00404edb 	.word	0x00404edb
  406040:	0040035d 	.word	0x0040035d
  406044:	0040d704 	.word	0x0040d704
  406048:	004060b9 	.word	0x004060b9
  40604c:	2040cedc 	.word	0x2040cedc
  406050:	0040d78c 	.word	0x0040d78c
  406054:	00405cc1 	.word	0x00405cc1
  406058:	004011b5 	.word	0x004011b5
  40605c:	0040d794 	.word	0x0040d794
  406060:	00405a49 	.word	0x00405a49
  406064:	004013e9 	.word	0x004013e9

00406068 <__libc_init_array>:
  406068:	b570      	push	{r4, r5, r6, lr}
  40606a:	4e0f      	ldr	r6, [pc, #60]	; (4060a8 <__libc_init_array+0x40>)
  40606c:	4d0f      	ldr	r5, [pc, #60]	; (4060ac <__libc_init_array+0x44>)
  40606e:	1b76      	subs	r6, r6, r5
  406070:	10b6      	asrs	r6, r6, #2
  406072:	bf18      	it	ne
  406074:	2400      	movne	r4, #0
  406076:	d005      	beq.n	406084 <__libc_init_array+0x1c>
  406078:	3401      	adds	r4, #1
  40607a:	f855 3b04 	ldr.w	r3, [r5], #4
  40607e:	4798      	blx	r3
  406080:	42a6      	cmp	r6, r4
  406082:	d1f9      	bne.n	406078 <__libc_init_array+0x10>
  406084:	4e0a      	ldr	r6, [pc, #40]	; (4060b0 <__libc_init_array+0x48>)
  406086:	4d0b      	ldr	r5, [pc, #44]	; (4060b4 <__libc_init_array+0x4c>)
  406088:	1b76      	subs	r6, r6, r5
  40608a:	f007 fe6d 	bl	40dd68 <_init>
  40608e:	10b6      	asrs	r6, r6, #2
  406090:	bf18      	it	ne
  406092:	2400      	movne	r4, #0
  406094:	d006      	beq.n	4060a4 <__libc_init_array+0x3c>
  406096:	3401      	adds	r4, #1
  406098:	f855 3b04 	ldr.w	r3, [r5], #4
  40609c:	4798      	blx	r3
  40609e:	42a6      	cmp	r6, r4
  4060a0:	d1f9      	bne.n	406096 <__libc_init_array+0x2e>
  4060a2:	bd70      	pop	{r4, r5, r6, pc}
  4060a4:	bd70      	pop	{r4, r5, r6, pc}
  4060a6:	bf00      	nop
  4060a8:	0040dd74 	.word	0x0040dd74
  4060ac:	0040dd74 	.word	0x0040dd74
  4060b0:	0040dd7c 	.word	0x0040dd7c
  4060b4:	0040dd74 	.word	0x0040dd74

004060b8 <iprintf>:
  4060b8:	b40f      	push	{r0, r1, r2, r3}
  4060ba:	b500      	push	{lr}
  4060bc:	4907      	ldr	r1, [pc, #28]	; (4060dc <iprintf+0x24>)
  4060be:	b083      	sub	sp, #12
  4060c0:	ab04      	add	r3, sp, #16
  4060c2:	6808      	ldr	r0, [r1, #0]
  4060c4:	f853 2b04 	ldr.w	r2, [r3], #4
  4060c8:	6881      	ldr	r1, [r0, #8]
  4060ca:	9301      	str	r3, [sp, #4]
  4060cc:	f001 ff38 	bl	407f40 <_vfiprintf_r>
  4060d0:	b003      	add	sp, #12
  4060d2:	f85d eb04 	ldr.w	lr, [sp], #4
  4060d6:	b004      	add	sp, #16
  4060d8:	4770      	bx	lr
  4060da:	bf00      	nop
  4060dc:	20400024 	.word	0x20400024

004060e0 <memcpy>:
  4060e0:	4684      	mov	ip, r0
  4060e2:	ea41 0300 	orr.w	r3, r1, r0
  4060e6:	f013 0303 	ands.w	r3, r3, #3
  4060ea:	d16d      	bne.n	4061c8 <memcpy+0xe8>
  4060ec:	3a40      	subs	r2, #64	; 0x40
  4060ee:	d341      	bcc.n	406174 <memcpy+0x94>
  4060f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060f4:	f840 3b04 	str.w	r3, [r0], #4
  4060f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060fc:	f840 3b04 	str.w	r3, [r0], #4
  406100:	f851 3b04 	ldr.w	r3, [r1], #4
  406104:	f840 3b04 	str.w	r3, [r0], #4
  406108:	f851 3b04 	ldr.w	r3, [r1], #4
  40610c:	f840 3b04 	str.w	r3, [r0], #4
  406110:	f851 3b04 	ldr.w	r3, [r1], #4
  406114:	f840 3b04 	str.w	r3, [r0], #4
  406118:	f851 3b04 	ldr.w	r3, [r1], #4
  40611c:	f840 3b04 	str.w	r3, [r0], #4
  406120:	f851 3b04 	ldr.w	r3, [r1], #4
  406124:	f840 3b04 	str.w	r3, [r0], #4
  406128:	f851 3b04 	ldr.w	r3, [r1], #4
  40612c:	f840 3b04 	str.w	r3, [r0], #4
  406130:	f851 3b04 	ldr.w	r3, [r1], #4
  406134:	f840 3b04 	str.w	r3, [r0], #4
  406138:	f851 3b04 	ldr.w	r3, [r1], #4
  40613c:	f840 3b04 	str.w	r3, [r0], #4
  406140:	f851 3b04 	ldr.w	r3, [r1], #4
  406144:	f840 3b04 	str.w	r3, [r0], #4
  406148:	f851 3b04 	ldr.w	r3, [r1], #4
  40614c:	f840 3b04 	str.w	r3, [r0], #4
  406150:	f851 3b04 	ldr.w	r3, [r1], #4
  406154:	f840 3b04 	str.w	r3, [r0], #4
  406158:	f851 3b04 	ldr.w	r3, [r1], #4
  40615c:	f840 3b04 	str.w	r3, [r0], #4
  406160:	f851 3b04 	ldr.w	r3, [r1], #4
  406164:	f840 3b04 	str.w	r3, [r0], #4
  406168:	f851 3b04 	ldr.w	r3, [r1], #4
  40616c:	f840 3b04 	str.w	r3, [r0], #4
  406170:	3a40      	subs	r2, #64	; 0x40
  406172:	d2bd      	bcs.n	4060f0 <memcpy+0x10>
  406174:	3230      	adds	r2, #48	; 0x30
  406176:	d311      	bcc.n	40619c <memcpy+0xbc>
  406178:	f851 3b04 	ldr.w	r3, [r1], #4
  40617c:	f840 3b04 	str.w	r3, [r0], #4
  406180:	f851 3b04 	ldr.w	r3, [r1], #4
  406184:	f840 3b04 	str.w	r3, [r0], #4
  406188:	f851 3b04 	ldr.w	r3, [r1], #4
  40618c:	f840 3b04 	str.w	r3, [r0], #4
  406190:	f851 3b04 	ldr.w	r3, [r1], #4
  406194:	f840 3b04 	str.w	r3, [r0], #4
  406198:	3a10      	subs	r2, #16
  40619a:	d2ed      	bcs.n	406178 <memcpy+0x98>
  40619c:	320c      	adds	r2, #12
  40619e:	d305      	bcc.n	4061ac <memcpy+0xcc>
  4061a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4061a4:	f840 3b04 	str.w	r3, [r0], #4
  4061a8:	3a04      	subs	r2, #4
  4061aa:	d2f9      	bcs.n	4061a0 <memcpy+0xc0>
  4061ac:	3204      	adds	r2, #4
  4061ae:	d008      	beq.n	4061c2 <memcpy+0xe2>
  4061b0:	07d2      	lsls	r2, r2, #31
  4061b2:	bf1c      	itt	ne
  4061b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4061b8:	f800 3b01 	strbne.w	r3, [r0], #1
  4061bc:	d301      	bcc.n	4061c2 <memcpy+0xe2>
  4061be:	880b      	ldrh	r3, [r1, #0]
  4061c0:	8003      	strh	r3, [r0, #0]
  4061c2:	4660      	mov	r0, ip
  4061c4:	4770      	bx	lr
  4061c6:	bf00      	nop
  4061c8:	2a08      	cmp	r2, #8
  4061ca:	d313      	bcc.n	4061f4 <memcpy+0x114>
  4061cc:	078b      	lsls	r3, r1, #30
  4061ce:	d08d      	beq.n	4060ec <memcpy+0xc>
  4061d0:	f010 0303 	ands.w	r3, r0, #3
  4061d4:	d08a      	beq.n	4060ec <memcpy+0xc>
  4061d6:	f1c3 0304 	rsb	r3, r3, #4
  4061da:	1ad2      	subs	r2, r2, r3
  4061dc:	07db      	lsls	r3, r3, #31
  4061de:	bf1c      	itt	ne
  4061e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4061e4:	f800 3b01 	strbne.w	r3, [r0], #1
  4061e8:	d380      	bcc.n	4060ec <memcpy+0xc>
  4061ea:	f831 3b02 	ldrh.w	r3, [r1], #2
  4061ee:	f820 3b02 	strh.w	r3, [r0], #2
  4061f2:	e77b      	b.n	4060ec <memcpy+0xc>
  4061f4:	3a04      	subs	r2, #4
  4061f6:	d3d9      	bcc.n	4061ac <memcpy+0xcc>
  4061f8:	3a01      	subs	r2, #1
  4061fa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4061fe:	f800 3b01 	strb.w	r3, [r0], #1
  406202:	d2f9      	bcs.n	4061f8 <memcpy+0x118>
  406204:	780b      	ldrb	r3, [r1, #0]
  406206:	7003      	strb	r3, [r0, #0]
  406208:	784b      	ldrb	r3, [r1, #1]
  40620a:	7043      	strb	r3, [r0, #1]
  40620c:	788b      	ldrb	r3, [r1, #2]
  40620e:	7083      	strb	r3, [r0, #2]
  406210:	4660      	mov	r0, ip
  406212:	4770      	bx	lr

00406214 <memset>:
  406214:	b470      	push	{r4, r5, r6}
  406216:	0786      	lsls	r6, r0, #30
  406218:	d046      	beq.n	4062a8 <memset+0x94>
  40621a:	1e54      	subs	r4, r2, #1
  40621c:	2a00      	cmp	r2, #0
  40621e:	d041      	beq.n	4062a4 <memset+0x90>
  406220:	b2ca      	uxtb	r2, r1
  406222:	4603      	mov	r3, r0
  406224:	e002      	b.n	40622c <memset+0x18>
  406226:	f114 34ff 	adds.w	r4, r4, #4294967295
  40622a:	d33b      	bcc.n	4062a4 <memset+0x90>
  40622c:	f803 2b01 	strb.w	r2, [r3], #1
  406230:	079d      	lsls	r5, r3, #30
  406232:	d1f8      	bne.n	406226 <memset+0x12>
  406234:	2c03      	cmp	r4, #3
  406236:	d92e      	bls.n	406296 <memset+0x82>
  406238:	b2cd      	uxtb	r5, r1
  40623a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40623e:	2c0f      	cmp	r4, #15
  406240:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406244:	d919      	bls.n	40627a <memset+0x66>
  406246:	f103 0210 	add.w	r2, r3, #16
  40624a:	4626      	mov	r6, r4
  40624c:	3e10      	subs	r6, #16
  40624e:	2e0f      	cmp	r6, #15
  406250:	f842 5c10 	str.w	r5, [r2, #-16]
  406254:	f842 5c0c 	str.w	r5, [r2, #-12]
  406258:	f842 5c08 	str.w	r5, [r2, #-8]
  40625c:	f842 5c04 	str.w	r5, [r2, #-4]
  406260:	f102 0210 	add.w	r2, r2, #16
  406264:	d8f2      	bhi.n	40624c <memset+0x38>
  406266:	f1a4 0210 	sub.w	r2, r4, #16
  40626a:	f022 020f 	bic.w	r2, r2, #15
  40626e:	f004 040f 	and.w	r4, r4, #15
  406272:	3210      	adds	r2, #16
  406274:	2c03      	cmp	r4, #3
  406276:	4413      	add	r3, r2
  406278:	d90d      	bls.n	406296 <memset+0x82>
  40627a:	461e      	mov	r6, r3
  40627c:	4622      	mov	r2, r4
  40627e:	3a04      	subs	r2, #4
  406280:	2a03      	cmp	r2, #3
  406282:	f846 5b04 	str.w	r5, [r6], #4
  406286:	d8fa      	bhi.n	40627e <memset+0x6a>
  406288:	1f22      	subs	r2, r4, #4
  40628a:	f022 0203 	bic.w	r2, r2, #3
  40628e:	3204      	adds	r2, #4
  406290:	4413      	add	r3, r2
  406292:	f004 0403 	and.w	r4, r4, #3
  406296:	b12c      	cbz	r4, 4062a4 <memset+0x90>
  406298:	b2c9      	uxtb	r1, r1
  40629a:	441c      	add	r4, r3
  40629c:	f803 1b01 	strb.w	r1, [r3], #1
  4062a0:	429c      	cmp	r4, r3
  4062a2:	d1fb      	bne.n	40629c <memset+0x88>
  4062a4:	bc70      	pop	{r4, r5, r6}
  4062a6:	4770      	bx	lr
  4062a8:	4614      	mov	r4, r2
  4062aa:	4603      	mov	r3, r0
  4062ac:	e7c2      	b.n	406234 <memset+0x20>
  4062ae:	bf00      	nop

004062b0 <setbuf>:
  4062b0:	2900      	cmp	r1, #0
  4062b2:	bf0c      	ite	eq
  4062b4:	2202      	moveq	r2, #2
  4062b6:	2200      	movne	r2, #0
  4062b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4062bc:	f000 b800 	b.w	4062c0 <setvbuf>

004062c0 <setvbuf>:
  4062c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4062c4:	4c61      	ldr	r4, [pc, #388]	; (40644c <setvbuf+0x18c>)
  4062c6:	6825      	ldr	r5, [r4, #0]
  4062c8:	b083      	sub	sp, #12
  4062ca:	4604      	mov	r4, r0
  4062cc:	460f      	mov	r7, r1
  4062ce:	4690      	mov	r8, r2
  4062d0:	461e      	mov	r6, r3
  4062d2:	b115      	cbz	r5, 4062da <setvbuf+0x1a>
  4062d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4062d6:	2b00      	cmp	r3, #0
  4062d8:	d064      	beq.n	4063a4 <setvbuf+0xe4>
  4062da:	f1b8 0f02 	cmp.w	r8, #2
  4062de:	d006      	beq.n	4062ee <setvbuf+0x2e>
  4062e0:	f1b8 0f01 	cmp.w	r8, #1
  4062e4:	f200 809f 	bhi.w	406426 <setvbuf+0x166>
  4062e8:	2e00      	cmp	r6, #0
  4062ea:	f2c0 809c 	blt.w	406426 <setvbuf+0x166>
  4062ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4062f0:	07d8      	lsls	r0, r3, #31
  4062f2:	d534      	bpl.n	40635e <setvbuf+0x9e>
  4062f4:	4621      	mov	r1, r4
  4062f6:	4628      	mov	r0, r5
  4062f8:	f003 fd80 	bl	409dfc <_fflush_r>
  4062fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4062fe:	b141      	cbz	r1, 406312 <setvbuf+0x52>
  406300:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406304:	4299      	cmp	r1, r3
  406306:	d002      	beq.n	40630e <setvbuf+0x4e>
  406308:	4628      	mov	r0, r5
  40630a:	f003 fef5 	bl	40a0f8 <_free_r>
  40630e:	2300      	movs	r3, #0
  406310:	6323      	str	r3, [r4, #48]	; 0x30
  406312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406316:	2200      	movs	r2, #0
  406318:	61a2      	str	r2, [r4, #24]
  40631a:	6062      	str	r2, [r4, #4]
  40631c:	061a      	lsls	r2, r3, #24
  40631e:	d43a      	bmi.n	406396 <setvbuf+0xd6>
  406320:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406324:	f023 0303 	bic.w	r3, r3, #3
  406328:	f1b8 0f02 	cmp.w	r8, #2
  40632c:	81a3      	strh	r3, [r4, #12]
  40632e:	d01d      	beq.n	40636c <setvbuf+0xac>
  406330:	ab01      	add	r3, sp, #4
  406332:	466a      	mov	r2, sp
  406334:	4621      	mov	r1, r4
  406336:	4628      	mov	r0, r5
  406338:	f004 f98a 	bl	40a650 <__swhatbuf_r>
  40633c:	89a3      	ldrh	r3, [r4, #12]
  40633e:	4318      	orrs	r0, r3
  406340:	81a0      	strh	r0, [r4, #12]
  406342:	2e00      	cmp	r6, #0
  406344:	d132      	bne.n	4063ac <setvbuf+0xec>
  406346:	9e00      	ldr	r6, [sp, #0]
  406348:	4630      	mov	r0, r6
  40634a:	f004 f9f9 	bl	40a740 <malloc>
  40634e:	4607      	mov	r7, r0
  406350:	2800      	cmp	r0, #0
  406352:	d06b      	beq.n	40642c <setvbuf+0x16c>
  406354:	89a3      	ldrh	r3, [r4, #12]
  406356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40635a:	81a3      	strh	r3, [r4, #12]
  40635c:	e028      	b.n	4063b0 <setvbuf+0xf0>
  40635e:	89a3      	ldrh	r3, [r4, #12]
  406360:	0599      	lsls	r1, r3, #22
  406362:	d4c7      	bmi.n	4062f4 <setvbuf+0x34>
  406364:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406366:	f004 f96f 	bl	40a648 <__retarget_lock_acquire_recursive>
  40636a:	e7c3      	b.n	4062f4 <setvbuf+0x34>
  40636c:	2500      	movs	r5, #0
  40636e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406370:	2600      	movs	r6, #0
  406372:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406376:	f043 0302 	orr.w	r3, r3, #2
  40637a:	2001      	movs	r0, #1
  40637c:	60a6      	str	r6, [r4, #8]
  40637e:	07ce      	lsls	r6, r1, #31
  406380:	81a3      	strh	r3, [r4, #12]
  406382:	6022      	str	r2, [r4, #0]
  406384:	6122      	str	r2, [r4, #16]
  406386:	6160      	str	r0, [r4, #20]
  406388:	d401      	bmi.n	40638e <setvbuf+0xce>
  40638a:	0598      	lsls	r0, r3, #22
  40638c:	d53e      	bpl.n	40640c <setvbuf+0x14c>
  40638e:	4628      	mov	r0, r5
  406390:	b003      	add	sp, #12
  406392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406396:	6921      	ldr	r1, [r4, #16]
  406398:	4628      	mov	r0, r5
  40639a:	f003 fead 	bl	40a0f8 <_free_r>
  40639e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063a2:	e7bd      	b.n	406320 <setvbuf+0x60>
  4063a4:	4628      	mov	r0, r5
  4063a6:	f003 fd81 	bl	409eac <__sinit>
  4063aa:	e796      	b.n	4062da <setvbuf+0x1a>
  4063ac:	2f00      	cmp	r7, #0
  4063ae:	d0cb      	beq.n	406348 <setvbuf+0x88>
  4063b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4063b2:	2b00      	cmp	r3, #0
  4063b4:	d033      	beq.n	40641e <setvbuf+0x15e>
  4063b6:	9b00      	ldr	r3, [sp, #0]
  4063b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4063bc:	6027      	str	r7, [r4, #0]
  4063be:	429e      	cmp	r6, r3
  4063c0:	bf1c      	itt	ne
  4063c2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4063c6:	81a2      	strhne	r2, [r4, #12]
  4063c8:	f1b8 0f01 	cmp.w	r8, #1
  4063cc:	bf04      	itt	eq
  4063ce:	f042 0201 	orreq.w	r2, r2, #1
  4063d2:	81a2      	strheq	r2, [r4, #12]
  4063d4:	b292      	uxth	r2, r2
  4063d6:	f012 0308 	ands.w	r3, r2, #8
  4063da:	6127      	str	r7, [r4, #16]
  4063dc:	6166      	str	r6, [r4, #20]
  4063de:	d00e      	beq.n	4063fe <setvbuf+0x13e>
  4063e0:	07d1      	lsls	r1, r2, #31
  4063e2:	d51a      	bpl.n	40641a <setvbuf+0x15a>
  4063e4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4063e6:	4276      	negs	r6, r6
  4063e8:	2300      	movs	r3, #0
  4063ea:	f015 0501 	ands.w	r5, r5, #1
  4063ee:	61a6      	str	r6, [r4, #24]
  4063f0:	60a3      	str	r3, [r4, #8]
  4063f2:	d009      	beq.n	406408 <setvbuf+0x148>
  4063f4:	2500      	movs	r5, #0
  4063f6:	4628      	mov	r0, r5
  4063f8:	b003      	add	sp, #12
  4063fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4063fe:	60a3      	str	r3, [r4, #8]
  406400:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406402:	f015 0501 	ands.w	r5, r5, #1
  406406:	d1f5      	bne.n	4063f4 <setvbuf+0x134>
  406408:	0593      	lsls	r3, r2, #22
  40640a:	d4c0      	bmi.n	40638e <setvbuf+0xce>
  40640c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40640e:	f004 f91d 	bl	40a64c <__retarget_lock_release_recursive>
  406412:	4628      	mov	r0, r5
  406414:	b003      	add	sp, #12
  406416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40641a:	60a6      	str	r6, [r4, #8]
  40641c:	e7f0      	b.n	406400 <setvbuf+0x140>
  40641e:	4628      	mov	r0, r5
  406420:	f003 fd44 	bl	409eac <__sinit>
  406424:	e7c7      	b.n	4063b6 <setvbuf+0xf6>
  406426:	f04f 35ff 	mov.w	r5, #4294967295
  40642a:	e7b0      	b.n	40638e <setvbuf+0xce>
  40642c:	f8dd 9000 	ldr.w	r9, [sp]
  406430:	45b1      	cmp	r9, r6
  406432:	d004      	beq.n	40643e <setvbuf+0x17e>
  406434:	4648      	mov	r0, r9
  406436:	f004 f983 	bl	40a740 <malloc>
  40643a:	4607      	mov	r7, r0
  40643c:	b920      	cbnz	r0, 406448 <setvbuf+0x188>
  40643e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406442:	f04f 35ff 	mov.w	r5, #4294967295
  406446:	e792      	b.n	40636e <setvbuf+0xae>
  406448:	464e      	mov	r6, r9
  40644a:	e783      	b.n	406354 <setvbuf+0x94>
  40644c:	20400024 	.word	0x20400024

00406450 <sprintf>:
  406450:	b40e      	push	{r1, r2, r3}
  406452:	b5f0      	push	{r4, r5, r6, r7, lr}
  406454:	b09c      	sub	sp, #112	; 0x70
  406456:	ab21      	add	r3, sp, #132	; 0x84
  406458:	490f      	ldr	r1, [pc, #60]	; (406498 <sprintf+0x48>)
  40645a:	f853 2b04 	ldr.w	r2, [r3], #4
  40645e:	9301      	str	r3, [sp, #4]
  406460:	4605      	mov	r5, r0
  406462:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  406466:	6808      	ldr	r0, [r1, #0]
  406468:	9502      	str	r5, [sp, #8]
  40646a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40646e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  406472:	a902      	add	r1, sp, #8
  406474:	9506      	str	r5, [sp, #24]
  406476:	f8ad 7014 	strh.w	r7, [sp, #20]
  40647a:	9404      	str	r4, [sp, #16]
  40647c:	9407      	str	r4, [sp, #28]
  40647e:	f8ad 6016 	strh.w	r6, [sp, #22]
  406482:	f000 faef 	bl	406a64 <_svfprintf_r>
  406486:	9b02      	ldr	r3, [sp, #8]
  406488:	2200      	movs	r2, #0
  40648a:	701a      	strb	r2, [r3, #0]
  40648c:	b01c      	add	sp, #112	; 0x70
  40648e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  406492:	b003      	add	sp, #12
  406494:	4770      	bx	lr
  406496:	bf00      	nop
  406498:	20400024 	.word	0x20400024
	...

004064c0 <strlen>:
  4064c0:	f890 f000 	pld	[r0]
  4064c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4064c8:	f020 0107 	bic.w	r1, r0, #7
  4064cc:	f06f 0c00 	mvn.w	ip, #0
  4064d0:	f010 0407 	ands.w	r4, r0, #7
  4064d4:	f891 f020 	pld	[r1, #32]
  4064d8:	f040 8049 	bne.w	40656e <strlen+0xae>
  4064dc:	f04f 0400 	mov.w	r4, #0
  4064e0:	f06f 0007 	mvn.w	r0, #7
  4064e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4064e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4064ec:	f100 0008 	add.w	r0, r0, #8
  4064f0:	fa82 f24c 	uadd8	r2, r2, ip
  4064f4:	faa4 f28c 	sel	r2, r4, ip
  4064f8:	fa83 f34c 	uadd8	r3, r3, ip
  4064fc:	faa2 f38c 	sel	r3, r2, ip
  406500:	bb4b      	cbnz	r3, 406556 <strlen+0x96>
  406502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406506:	fa82 f24c 	uadd8	r2, r2, ip
  40650a:	f100 0008 	add.w	r0, r0, #8
  40650e:	faa4 f28c 	sel	r2, r4, ip
  406512:	fa83 f34c 	uadd8	r3, r3, ip
  406516:	faa2 f38c 	sel	r3, r2, ip
  40651a:	b9e3      	cbnz	r3, 406556 <strlen+0x96>
  40651c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406520:	fa82 f24c 	uadd8	r2, r2, ip
  406524:	f100 0008 	add.w	r0, r0, #8
  406528:	faa4 f28c 	sel	r2, r4, ip
  40652c:	fa83 f34c 	uadd8	r3, r3, ip
  406530:	faa2 f38c 	sel	r3, r2, ip
  406534:	b97b      	cbnz	r3, 406556 <strlen+0x96>
  406536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40653a:	f101 0120 	add.w	r1, r1, #32
  40653e:	fa82 f24c 	uadd8	r2, r2, ip
  406542:	f100 0008 	add.w	r0, r0, #8
  406546:	faa4 f28c 	sel	r2, r4, ip
  40654a:	fa83 f34c 	uadd8	r3, r3, ip
  40654e:	faa2 f38c 	sel	r3, r2, ip
  406552:	2b00      	cmp	r3, #0
  406554:	d0c6      	beq.n	4064e4 <strlen+0x24>
  406556:	2a00      	cmp	r2, #0
  406558:	bf04      	itt	eq
  40655a:	3004      	addeq	r0, #4
  40655c:	461a      	moveq	r2, r3
  40655e:	ba12      	rev	r2, r2
  406560:	fab2 f282 	clz	r2, r2
  406564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40656c:	4770      	bx	lr
  40656e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406572:	f004 0503 	and.w	r5, r4, #3
  406576:	f1c4 0000 	rsb	r0, r4, #0
  40657a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40657e:	f014 0f04 	tst.w	r4, #4
  406582:	f891 f040 	pld	[r1, #64]	; 0x40
  406586:	fa0c f505 	lsl.w	r5, ip, r5
  40658a:	ea62 0205 	orn	r2, r2, r5
  40658e:	bf1c      	itt	ne
  406590:	ea63 0305 	ornne	r3, r3, r5
  406594:	4662      	movne	r2, ip
  406596:	f04f 0400 	mov.w	r4, #0
  40659a:	e7a9      	b.n	4064f0 <strlen+0x30>

0040659c <critical_factorization>:
  40659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4065a0:	f04f 0e01 	mov.w	lr, #1
  4065a4:	4674      	mov	r4, lr
  4065a6:	2500      	movs	r5, #0
  4065a8:	f04f 36ff 	mov.w	r6, #4294967295
  4065ac:	192b      	adds	r3, r5, r4
  4065ae:	428b      	cmp	r3, r1
  4065b0:	eb00 0706 	add.w	r7, r0, r6
  4065b4:	d20d      	bcs.n	4065d2 <critical_factorization+0x36>
  4065b6:	5d3f      	ldrb	r7, [r7, r4]
  4065b8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4065bc:	45bc      	cmp	ip, r7
  4065be:	d22d      	bcs.n	40661c <critical_factorization+0x80>
  4065c0:	461d      	mov	r5, r3
  4065c2:	2401      	movs	r4, #1
  4065c4:	eba3 0e06 	sub.w	lr, r3, r6
  4065c8:	192b      	adds	r3, r5, r4
  4065ca:	428b      	cmp	r3, r1
  4065cc:	eb00 0706 	add.w	r7, r0, r6
  4065d0:	d3f1      	bcc.n	4065b6 <critical_factorization+0x1a>
  4065d2:	f04f 0801 	mov.w	r8, #1
  4065d6:	f8c2 e000 	str.w	lr, [r2]
  4065da:	4644      	mov	r4, r8
  4065dc:	2500      	movs	r5, #0
  4065de:	f04f 37ff 	mov.w	r7, #4294967295
  4065e2:	192b      	adds	r3, r5, r4
  4065e4:	4299      	cmp	r1, r3
  4065e6:	eb00 0e07 	add.w	lr, r0, r7
  4065ea:	d90e      	bls.n	40660a <critical_factorization+0x6e>
  4065ec:	f81e e004 	ldrb.w	lr, [lr, r4]
  4065f0:	f810 c003 	ldrb.w	ip, [r0, r3]
  4065f4:	45f4      	cmp	ip, lr
  4065f6:	d918      	bls.n	40662a <critical_factorization+0x8e>
  4065f8:	461d      	mov	r5, r3
  4065fa:	2401      	movs	r4, #1
  4065fc:	eba3 0807 	sub.w	r8, r3, r7
  406600:	192b      	adds	r3, r5, r4
  406602:	4299      	cmp	r1, r3
  406604:	eb00 0e07 	add.w	lr, r0, r7
  406608:	d8f0      	bhi.n	4065ec <critical_factorization+0x50>
  40660a:	3701      	adds	r7, #1
  40660c:	1c70      	adds	r0, r6, #1
  40660e:	4287      	cmp	r7, r0
  406610:	bf24      	itt	cs
  406612:	f8c2 8000 	strcs.w	r8, [r2]
  406616:	4638      	movcs	r0, r7
  406618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40661c:	d00c      	beq.n	406638 <critical_factorization+0x9c>
  40661e:	f04f 0e01 	mov.w	lr, #1
  406622:	462e      	mov	r6, r5
  406624:	4674      	mov	r4, lr
  406626:	4475      	add	r5, lr
  406628:	e7c0      	b.n	4065ac <critical_factorization+0x10>
  40662a:	d00b      	beq.n	406644 <critical_factorization+0xa8>
  40662c:	f04f 0801 	mov.w	r8, #1
  406630:	462f      	mov	r7, r5
  406632:	4644      	mov	r4, r8
  406634:	4445      	add	r5, r8
  406636:	e7d4      	b.n	4065e2 <critical_factorization+0x46>
  406638:	4574      	cmp	r4, lr
  40663a:	bf12      	itee	ne
  40663c:	3401      	addne	r4, #1
  40663e:	461d      	moveq	r5, r3
  406640:	2401      	moveq	r4, #1
  406642:	e7b3      	b.n	4065ac <critical_factorization+0x10>
  406644:	4544      	cmp	r4, r8
  406646:	bf12      	itee	ne
  406648:	3401      	addne	r4, #1
  40664a:	461d      	moveq	r5, r3
  40664c:	2401      	moveq	r4, #1
  40664e:	e7c8      	b.n	4065e2 <critical_factorization+0x46>

00406650 <two_way_long_needle>:
  406650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406654:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  406658:	4616      	mov	r6, r2
  40665a:	4605      	mov	r5, r0
  40665c:	468b      	mov	fp, r1
  40665e:	4610      	mov	r0, r2
  406660:	4619      	mov	r1, r3
  406662:	aa03      	add	r2, sp, #12
  406664:	461c      	mov	r4, r3
  406666:	f7ff ff99 	bl	40659c <critical_factorization>
  40666a:	ab03      	add	r3, sp, #12
  40666c:	4681      	mov	r9, r0
  40666e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  406672:	f843 4f04 	str.w	r4, [r3, #4]!
  406676:	4293      	cmp	r3, r2
  406678:	d1fb      	bne.n	406672 <two_way_long_needle+0x22>
  40667a:	b14c      	cbz	r4, 406690 <two_way_long_needle+0x40>
  40667c:	1e63      	subs	r3, r4, #1
  40667e:	1e72      	subs	r2, r6, #1
  406680:	a804      	add	r0, sp, #16
  406682:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  406686:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40668a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40668e:	d2f8      	bcs.n	406682 <two_way_long_needle+0x32>
  406690:	9903      	ldr	r1, [sp, #12]
  406692:	464a      	mov	r2, r9
  406694:	4431      	add	r1, r6
  406696:	4630      	mov	r0, r6
  406698:	f004 fb72 	bl	40ad80 <memcmp>
  40669c:	2800      	cmp	r0, #0
  40669e:	d16f      	bne.n	406780 <two_way_long_needle+0x130>
  4066a0:	f109 33ff 	add.w	r3, r9, #4294967295
  4066a4:	9300      	str	r3, [sp, #0]
  4066a6:	18f3      	adds	r3, r6, r3
  4066a8:	4682      	mov	sl, r0
  4066aa:	9301      	str	r3, [sp, #4]
  4066ac:	4623      	mov	r3, r4
  4066ae:	4680      	mov	r8, r0
  4066b0:	4654      	mov	r4, sl
  4066b2:	4658      	mov	r0, fp
  4066b4:	469a      	mov	sl, r3
  4066b6:	eb08 070a 	add.w	r7, r8, sl
  4066ba:	1a3a      	subs	r2, r7, r0
  4066bc:	2100      	movs	r1, #0
  4066be:	4428      	add	r0, r5
  4066c0:	f004 fb0e 	bl	40ace0 <memchr>
  4066c4:	2800      	cmp	r0, #0
  4066c6:	d156      	bne.n	406776 <two_way_long_needle+0x126>
  4066c8:	2f00      	cmp	r7, #0
  4066ca:	d054      	beq.n	406776 <two_way_long_needle+0x126>
  4066cc:	19eb      	adds	r3, r5, r7
  4066ce:	aa04      	add	r2, sp, #16
  4066d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4066d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4066d8:	b14b      	cbz	r3, 4066ee <two_way_long_needle+0x9e>
  4066da:	b124      	cbz	r4, 4066e6 <two_way_long_needle+0x96>
  4066dc:	9a03      	ldr	r2, [sp, #12]
  4066de:	4293      	cmp	r3, r2
  4066e0:	d201      	bcs.n	4066e6 <two_way_long_needle+0x96>
  4066e2:	ebaa 0302 	sub.w	r3, sl, r2
  4066e6:	4498      	add	r8, r3
  4066e8:	2400      	movs	r4, #0
  4066ea:	4638      	mov	r0, r7
  4066ec:	e7e3      	b.n	4066b6 <two_way_long_needle+0x66>
  4066ee:	454c      	cmp	r4, r9
  4066f0:	4623      	mov	r3, r4
  4066f2:	f10a 3eff 	add.w	lr, sl, #4294967295
  4066f6:	bf38      	it	cc
  4066f8:	464b      	movcc	r3, r9
  4066fa:	4573      	cmp	r3, lr
  4066fc:	d213      	bcs.n	406726 <two_way_long_needle+0xd6>
  4066fe:	eb08 0203 	add.w	r2, r8, r3
  406702:	f816 c003 	ldrb.w	ip, [r6, r3]
  406706:	5ca8      	ldrb	r0, [r5, r2]
  406708:	4584      	cmp	ip, r0
  40670a:	442a      	add	r2, r5
  40670c:	eb06 0103 	add.w	r1, r6, r3
  406710:	d006      	beq.n	406720 <two_way_long_needle+0xd0>
  406712:	e02c      	b.n	40676e <two_way_long_needle+0x11e>
  406714:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  406718:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40671c:	4584      	cmp	ip, r0
  40671e:	d126      	bne.n	40676e <two_way_long_needle+0x11e>
  406720:	3301      	adds	r3, #1
  406722:	4573      	cmp	r3, lr
  406724:	d3f6      	bcc.n	406714 <two_way_long_needle+0xc4>
  406726:	454c      	cmp	r4, r9
  406728:	9900      	ldr	r1, [sp, #0]
  40672a:	f080 8089 	bcs.w	406840 <two_way_long_needle+0x1f0>
  40672e:	9b00      	ldr	r3, [sp, #0]
  406730:	eb08 0203 	add.w	r2, r8, r3
  406734:	9b01      	ldr	r3, [sp, #4]
  406736:	5ca8      	ldrb	r0, [r5, r2]
  406738:	781b      	ldrb	r3, [r3, #0]
  40673a:	4298      	cmp	r0, r3
  40673c:	442a      	add	r2, r5
  40673e:	d17f      	bne.n	406840 <two_way_long_needle+0x1f0>
  406740:	9801      	ldr	r0, [sp, #4]
  406742:	f104 3bff 	add.w	fp, r4, #4294967295
  406746:	e006      	b.n	406756 <two_way_long_needle+0x106>
  406748:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40674c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  406750:	45f4      	cmp	ip, lr
  406752:	d103      	bne.n	40675c <two_way_long_needle+0x10c>
  406754:	4619      	mov	r1, r3
  406756:	1e4b      	subs	r3, r1, #1
  406758:	459b      	cmp	fp, r3
  40675a:	d1f5      	bne.n	406748 <two_way_long_needle+0xf8>
  40675c:	3401      	adds	r4, #1
  40675e:	428c      	cmp	r4, r1
  406760:	d870      	bhi.n	406844 <two_way_long_needle+0x1f4>
  406762:	9c03      	ldr	r4, [sp, #12]
  406764:	4638      	mov	r0, r7
  406766:	44a0      	add	r8, r4
  406768:	ebaa 0404 	sub.w	r4, sl, r4
  40676c:	e7a3      	b.n	4066b6 <two_way_long_needle+0x66>
  40676e:	f1c9 0201 	rsb	r2, r9, #1
  406772:	4490      	add	r8, r2
  406774:	e7b7      	b.n	4066e6 <two_way_long_needle+0x96>
  406776:	2000      	movs	r0, #0
  406778:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406780:	eba4 0309 	sub.w	r3, r4, r9
  406784:	454b      	cmp	r3, r9
  406786:	bf38      	it	cc
  406788:	464b      	movcc	r3, r9
  40678a:	3301      	adds	r3, #1
  40678c:	f109 38ff 	add.w	r8, r9, #4294967295
  406790:	9303      	str	r3, [sp, #12]
  406792:	eb06 0308 	add.w	r3, r6, r8
  406796:	4658      	mov	r0, fp
  406798:	f04f 0a00 	mov.w	sl, #0
  40679c:	46cb      	mov	fp, r9
  40679e:	4699      	mov	r9, r3
  4067a0:	eb0a 0704 	add.w	r7, sl, r4
  4067a4:	1a3a      	subs	r2, r7, r0
  4067a6:	2100      	movs	r1, #0
  4067a8:	4428      	add	r0, r5
  4067aa:	f004 fa99 	bl	40ace0 <memchr>
  4067ae:	2800      	cmp	r0, #0
  4067b0:	d1e1      	bne.n	406776 <two_way_long_needle+0x126>
  4067b2:	2f00      	cmp	r7, #0
  4067b4:	d0df      	beq.n	406776 <two_way_long_needle+0x126>
  4067b6:	19eb      	adds	r3, r5, r7
  4067b8:	aa04      	add	r2, sp, #16
  4067ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4067be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4067c2:	bba3      	cbnz	r3, 40682e <two_way_long_needle+0x1de>
  4067c4:	1e61      	subs	r1, r4, #1
  4067c6:	458b      	cmp	fp, r1
  4067c8:	d215      	bcs.n	4067f6 <two_way_long_needle+0x1a6>
  4067ca:	eb0a 020b 	add.w	r2, sl, fp
  4067ce:	f816 300b 	ldrb.w	r3, [r6, fp]
  4067d2:	f815 e002 	ldrb.w	lr, [r5, r2]
  4067d6:	459e      	cmp	lr, r3
  4067d8:	442a      	add	r2, r5
  4067da:	eb06 000b 	add.w	r0, r6, fp
  4067de:	465b      	mov	r3, fp
  4067e0:	d006      	beq.n	4067f0 <two_way_long_needle+0x1a0>
  4067e2:	e027      	b.n	406834 <two_way_long_needle+0x1e4>
  4067e4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4067e8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4067ec:	45f4      	cmp	ip, lr
  4067ee:	d121      	bne.n	406834 <two_way_long_needle+0x1e4>
  4067f0:	3301      	adds	r3, #1
  4067f2:	428b      	cmp	r3, r1
  4067f4:	d3f6      	bcc.n	4067e4 <two_way_long_needle+0x194>
  4067f6:	f1b8 3fff 	cmp.w	r8, #4294967295
  4067fa:	d011      	beq.n	406820 <two_way_long_needle+0x1d0>
  4067fc:	eb0a 0208 	add.w	r2, sl, r8
  406800:	f899 1000 	ldrb.w	r1, [r9]
  406804:	5cab      	ldrb	r3, [r5, r2]
  406806:	4299      	cmp	r1, r3
  406808:	442a      	add	r2, r5
  40680a:	d10f      	bne.n	40682c <two_way_long_needle+0x1dc>
  40680c:	464b      	mov	r3, r9
  40680e:	e005      	b.n	40681c <two_way_long_needle+0x1cc>
  406810:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  406814:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  406818:	4288      	cmp	r0, r1
  40681a:	d107      	bne.n	40682c <two_way_long_needle+0x1dc>
  40681c:	42b3      	cmp	r3, r6
  40681e:	d1f7      	bne.n	406810 <two_way_long_needle+0x1c0>
  406820:	eb05 000a 	add.w	r0, r5, sl
  406824:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  406828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40682c:	9b03      	ldr	r3, [sp, #12]
  40682e:	449a      	add	sl, r3
  406830:	4638      	mov	r0, r7
  406832:	e7b5      	b.n	4067a0 <two_way_long_needle+0x150>
  406834:	f1cb 0201 	rsb	r2, fp, #1
  406838:	4492      	add	sl, r2
  40683a:	449a      	add	sl, r3
  40683c:	4638      	mov	r0, r7
  40683e:	e7af      	b.n	4067a0 <two_way_long_needle+0x150>
  406840:	4649      	mov	r1, r9
  406842:	e78b      	b.n	40675c <two_way_long_needle+0x10c>
  406844:	eb05 0008 	add.w	r0, r5, r8
  406848:	e796      	b.n	406778 <two_way_long_needle+0x128>
  40684a:	bf00      	nop

0040684c <strstr>:
  40684c:	7802      	ldrb	r2, [r0, #0]
  40684e:	2a00      	cmp	r2, #0
  406850:	f000 8101 	beq.w	406a56 <strstr+0x20a>
  406854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406858:	f891 8000 	ldrb.w	r8, [r1]
  40685c:	b085      	sub	sp, #20
  40685e:	4644      	mov	r4, r8
  406860:	f1b8 0f00 	cmp.w	r8, #0
  406864:	d016      	beq.n	406894 <strstr+0x48>
  406866:	4686      	mov	lr, r0
  406868:	f101 0c01 	add.w	ip, r1, #1
  40686c:	2701      	movs	r7, #1
  40686e:	e003      	b.n	406878 <strstr+0x2c>
  406870:	f813 4b01 	ldrb.w	r4, [r3], #1
  406874:	b16c      	cbz	r4, 406892 <strstr+0x46>
  406876:	469c      	mov	ip, r3
  406878:	42a2      	cmp	r2, r4
  40687a:	bf14      	ite	ne
  40687c:	2700      	movne	r7, #0
  40687e:	f007 0701 	andeq.w	r7, r7, #1
  406882:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  406886:	4663      	mov	r3, ip
  406888:	2a00      	cmp	r2, #0
  40688a:	d1f1      	bne.n	406870 <strstr+0x24>
  40688c:	f89c 3000 	ldrb.w	r3, [ip]
  406890:	b9fb      	cbnz	r3, 4068d2 <strstr+0x86>
  406892:	b117      	cbz	r7, 40689a <strstr+0x4e>
  406894:	b005      	add	sp, #20
  406896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40689a:	460e      	mov	r6, r1
  40689c:	4605      	mov	r5, r0
  40689e:	4641      	mov	r1, r8
  4068a0:	3001      	adds	r0, #1
  4068a2:	ebac 0406 	sub.w	r4, ip, r6
  4068a6:	f005 f801 	bl	40b8ac <strchr>
  4068aa:	4607      	mov	r7, r0
  4068ac:	b188      	cbz	r0, 4068d2 <strstr+0x86>
  4068ae:	2c01      	cmp	r4, #1
  4068b0:	d0f0      	beq.n	406894 <strstr+0x48>
  4068b2:	1928      	adds	r0, r5, r4
  4068b4:	4287      	cmp	r7, r0
  4068b6:	bf94      	ite	ls
  4068b8:	1bc1      	subls	r1, r0, r7
  4068ba:	2101      	movhi	r1, #1
  4068bc:	2c1f      	cmp	r4, #31
  4068be:	468b      	mov	fp, r1
  4068c0:	d90b      	bls.n	4068da <strstr+0x8e>
  4068c2:	4623      	mov	r3, r4
  4068c4:	4632      	mov	r2, r6
  4068c6:	4638      	mov	r0, r7
  4068c8:	f7ff fec2 	bl	406650 <two_way_long_needle>
  4068cc:	b005      	add	sp, #20
  4068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068d2:	2000      	movs	r0, #0
  4068d4:	b005      	add	sp, #20
  4068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068da:	aa03      	add	r2, sp, #12
  4068dc:	4621      	mov	r1, r4
  4068de:	4630      	mov	r0, r6
  4068e0:	f7ff fe5c 	bl	40659c <critical_factorization>
  4068e4:	9903      	ldr	r1, [sp, #12]
  4068e6:	4680      	mov	r8, r0
  4068e8:	4602      	mov	r2, r0
  4068ea:	4431      	add	r1, r6
  4068ec:	4630      	mov	r0, r6
  4068ee:	f004 fa47 	bl	40ad80 <memcmp>
  4068f2:	2800      	cmp	r0, #0
  4068f4:	d157      	bne.n	4069a6 <strstr+0x15a>
  4068f6:	f108 33ff 	add.w	r3, r8, #4294967295
  4068fa:	9300      	str	r3, [sp, #0]
  4068fc:	18f3      	adds	r3, r6, r3
  4068fe:	4681      	mov	r9, r0
  406900:	4605      	mov	r5, r0
  406902:	9301      	str	r3, [sp, #4]
  406904:	4658      	mov	r0, fp
  406906:	46b2      	mov	sl, r6
  406908:	1966      	adds	r6, r4, r5
  40690a:	1a32      	subs	r2, r6, r0
  40690c:	2100      	movs	r1, #0
  40690e:	4438      	add	r0, r7
  406910:	f004 f9e6 	bl	40ace0 <memchr>
  406914:	2800      	cmp	r0, #0
  406916:	d1dc      	bne.n	4068d2 <strstr+0x86>
  406918:	2e00      	cmp	r6, #0
  40691a:	d0da      	beq.n	4068d2 <strstr+0x86>
  40691c:	45c8      	cmp	r8, r9
  40691e:	4643      	mov	r3, r8
  406920:	bf38      	it	cc
  406922:	464b      	movcc	r3, r9
  406924:	429c      	cmp	r4, r3
  406926:	d912      	bls.n	40694e <strstr+0x102>
  406928:	195a      	adds	r2, r3, r5
  40692a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40692e:	5cb8      	ldrb	r0, [r7, r2]
  406930:	4281      	cmp	r1, r0
  406932:	443a      	add	r2, r7
  406934:	eb0a 0e03 	add.w	lr, sl, r3
  406938:	d006      	beq.n	406948 <strstr+0xfc>
  40693a:	e02c      	b.n	406996 <strstr+0x14a>
  40693c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  406940:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  406944:	4288      	cmp	r0, r1
  406946:	d126      	bne.n	406996 <strstr+0x14a>
  406948:	3301      	adds	r3, #1
  40694a:	429c      	cmp	r4, r3
  40694c:	d1f6      	bne.n	40693c <strstr+0xf0>
  40694e:	45c8      	cmp	r8, r9
  406950:	9900      	ldr	r1, [sp, #0]
  406952:	f240 8083 	bls.w	406a5c <strstr+0x210>
  406956:	9b00      	ldr	r3, [sp, #0]
  406958:	18ea      	adds	r2, r5, r3
  40695a:	9b01      	ldr	r3, [sp, #4]
  40695c:	5cb8      	ldrb	r0, [r7, r2]
  40695e:	781b      	ldrb	r3, [r3, #0]
  406960:	4298      	cmp	r0, r3
  406962:	443a      	add	r2, r7
  406964:	d17a      	bne.n	406a5c <strstr+0x210>
  406966:	9801      	ldr	r0, [sp, #4]
  406968:	f109 3bff 	add.w	fp, r9, #4294967295
  40696c:	e006      	b.n	40697c <strstr+0x130>
  40696e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  406972:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  406976:	45f4      	cmp	ip, lr
  406978:	d103      	bne.n	406982 <strstr+0x136>
  40697a:	4619      	mov	r1, r3
  40697c:	1e4b      	subs	r3, r1, #1
  40697e:	455b      	cmp	r3, fp
  406980:	d1f5      	bne.n	40696e <strstr+0x122>
  406982:	f109 0901 	add.w	r9, r9, #1
  406986:	4589      	cmp	r9, r1
  406988:	d857      	bhi.n	406a3a <strstr+0x1ee>
  40698a:	9b03      	ldr	r3, [sp, #12]
  40698c:	4630      	mov	r0, r6
  40698e:	441d      	add	r5, r3
  406990:	eba4 0903 	sub.w	r9, r4, r3
  406994:	e7b8      	b.n	406908 <strstr+0xbc>
  406996:	f1c8 0201 	rsb	r2, r8, #1
  40699a:	4415      	add	r5, r2
  40699c:	441d      	add	r5, r3
  40699e:	f04f 0900 	mov.w	r9, #0
  4069a2:	4630      	mov	r0, r6
  4069a4:	e7b0      	b.n	406908 <strstr+0xbc>
  4069a6:	eba4 0308 	sub.w	r3, r4, r8
  4069aa:	4543      	cmp	r3, r8
  4069ac:	bf38      	it	cc
  4069ae:	4643      	movcc	r3, r8
  4069b0:	3301      	adds	r3, #1
  4069b2:	f108 39ff 	add.w	r9, r8, #4294967295
  4069b6:	9303      	str	r3, [sp, #12]
  4069b8:	eb06 0309 	add.w	r3, r6, r9
  4069bc:	4658      	mov	r0, fp
  4069be:	2500      	movs	r5, #0
  4069c0:	46bb      	mov	fp, r7
  4069c2:	469a      	mov	sl, r3
  4069c4:	1967      	adds	r7, r4, r5
  4069c6:	1a3a      	subs	r2, r7, r0
  4069c8:	2100      	movs	r1, #0
  4069ca:	4458      	add	r0, fp
  4069cc:	f004 f988 	bl	40ace0 <memchr>
  4069d0:	2800      	cmp	r0, #0
  4069d2:	f47f af7e 	bne.w	4068d2 <strstr+0x86>
  4069d6:	2f00      	cmp	r7, #0
  4069d8:	f43f af7b 	beq.w	4068d2 <strstr+0x86>
  4069dc:	4544      	cmp	r4, r8
  4069de:	d915      	bls.n	406a0c <strstr+0x1c0>
  4069e0:	eb08 0205 	add.w	r2, r8, r5
  4069e4:	f816 3008 	ldrb.w	r3, [r6, r8]
  4069e8:	f81b 0002 	ldrb.w	r0, [fp, r2]
  4069ec:	4298      	cmp	r0, r3
  4069ee:	445a      	add	r2, fp
  4069f0:	eb06 0108 	add.w	r1, r6, r8
  4069f4:	4643      	mov	r3, r8
  4069f6:	d006      	beq.n	406a06 <strstr+0x1ba>
  4069f8:	e023      	b.n	406a42 <strstr+0x1f6>
  4069fa:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  4069fe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  406a02:	4586      	cmp	lr, r0
  406a04:	d11d      	bne.n	406a42 <strstr+0x1f6>
  406a06:	3301      	adds	r3, #1
  406a08:	429c      	cmp	r4, r3
  406a0a:	d1f6      	bne.n	4069fa <strstr+0x1ae>
  406a0c:	f1b9 3fff 	cmp.w	r9, #4294967295
  406a10:	d012      	beq.n	406a38 <strstr+0x1ec>
  406a12:	eb05 0209 	add.w	r2, r5, r9
  406a16:	f89a 3000 	ldrb.w	r3, [sl]
  406a1a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  406a1e:	4299      	cmp	r1, r3
  406a20:	445a      	add	r2, fp
  406a22:	d114      	bne.n	406a4e <strstr+0x202>
  406a24:	4653      	mov	r3, sl
  406a26:	e005      	b.n	406a34 <strstr+0x1e8>
  406a28:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  406a2c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  406a30:	4288      	cmp	r0, r1
  406a32:	d10c      	bne.n	406a4e <strstr+0x202>
  406a34:	42b3      	cmp	r3, r6
  406a36:	d1f7      	bne.n	406a28 <strstr+0x1dc>
  406a38:	465f      	mov	r7, fp
  406a3a:	1978      	adds	r0, r7, r5
  406a3c:	b005      	add	sp, #20
  406a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a42:	f1c8 0201 	rsb	r2, r8, #1
  406a46:	4415      	add	r5, r2
  406a48:	441d      	add	r5, r3
  406a4a:	4638      	mov	r0, r7
  406a4c:	e7ba      	b.n	4069c4 <strstr+0x178>
  406a4e:	9b03      	ldr	r3, [sp, #12]
  406a50:	4638      	mov	r0, r7
  406a52:	441d      	add	r5, r3
  406a54:	e7b6      	b.n	4069c4 <strstr+0x178>
  406a56:	780b      	ldrb	r3, [r1, #0]
  406a58:	b913      	cbnz	r3, 406a60 <strstr+0x214>
  406a5a:	4770      	bx	lr
  406a5c:	4641      	mov	r1, r8
  406a5e:	e790      	b.n	406982 <strstr+0x136>
  406a60:	2000      	movs	r0, #0
  406a62:	4770      	bx	lr

00406a64 <_svfprintf_r>:
  406a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a68:	b0c3      	sub	sp, #268	; 0x10c
  406a6a:	460c      	mov	r4, r1
  406a6c:	910b      	str	r1, [sp, #44]	; 0x2c
  406a6e:	4692      	mov	sl, r2
  406a70:	930f      	str	r3, [sp, #60]	; 0x3c
  406a72:	900c      	str	r0, [sp, #48]	; 0x30
  406a74:	f003 fdd6 	bl	40a624 <_localeconv_r>
  406a78:	6803      	ldr	r3, [r0, #0]
  406a7a:	931a      	str	r3, [sp, #104]	; 0x68
  406a7c:	4618      	mov	r0, r3
  406a7e:	f7ff fd1f 	bl	4064c0 <strlen>
  406a82:	89a3      	ldrh	r3, [r4, #12]
  406a84:	9019      	str	r0, [sp, #100]	; 0x64
  406a86:	0619      	lsls	r1, r3, #24
  406a88:	d503      	bpl.n	406a92 <_svfprintf_r+0x2e>
  406a8a:	6923      	ldr	r3, [r4, #16]
  406a8c:	2b00      	cmp	r3, #0
  406a8e:	f001 8003 	beq.w	407a98 <_svfprintf_r+0x1034>
  406a92:	2300      	movs	r3, #0
  406a94:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406a98:	9313      	str	r3, [sp, #76]	; 0x4c
  406a9a:	9315      	str	r3, [sp, #84]	; 0x54
  406a9c:	9314      	str	r3, [sp, #80]	; 0x50
  406a9e:	9327      	str	r3, [sp, #156]	; 0x9c
  406aa0:	9326      	str	r3, [sp, #152]	; 0x98
  406aa2:	9318      	str	r3, [sp, #96]	; 0x60
  406aa4:	931b      	str	r3, [sp, #108]	; 0x6c
  406aa6:	9309      	str	r3, [sp, #36]	; 0x24
  406aa8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406aac:	46c8      	mov	r8, r9
  406aae:	9316      	str	r3, [sp, #88]	; 0x58
  406ab0:	9317      	str	r3, [sp, #92]	; 0x5c
  406ab2:	f89a 3000 	ldrb.w	r3, [sl]
  406ab6:	4654      	mov	r4, sl
  406ab8:	b1e3      	cbz	r3, 406af4 <_svfprintf_r+0x90>
  406aba:	2b25      	cmp	r3, #37	; 0x25
  406abc:	d102      	bne.n	406ac4 <_svfprintf_r+0x60>
  406abe:	e019      	b.n	406af4 <_svfprintf_r+0x90>
  406ac0:	2b25      	cmp	r3, #37	; 0x25
  406ac2:	d003      	beq.n	406acc <_svfprintf_r+0x68>
  406ac4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406ac8:	2b00      	cmp	r3, #0
  406aca:	d1f9      	bne.n	406ac0 <_svfprintf_r+0x5c>
  406acc:	eba4 050a 	sub.w	r5, r4, sl
  406ad0:	b185      	cbz	r5, 406af4 <_svfprintf_r+0x90>
  406ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ad4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406ad6:	f8c8 a000 	str.w	sl, [r8]
  406ada:	3301      	adds	r3, #1
  406adc:	442a      	add	r2, r5
  406ade:	2b07      	cmp	r3, #7
  406ae0:	f8c8 5004 	str.w	r5, [r8, #4]
  406ae4:	9227      	str	r2, [sp, #156]	; 0x9c
  406ae6:	9326      	str	r3, [sp, #152]	; 0x98
  406ae8:	dc7f      	bgt.n	406bea <_svfprintf_r+0x186>
  406aea:	f108 0808 	add.w	r8, r8, #8
  406aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406af0:	442b      	add	r3, r5
  406af2:	9309      	str	r3, [sp, #36]	; 0x24
  406af4:	7823      	ldrb	r3, [r4, #0]
  406af6:	2b00      	cmp	r3, #0
  406af8:	d07f      	beq.n	406bfa <_svfprintf_r+0x196>
  406afa:	2300      	movs	r3, #0
  406afc:	461a      	mov	r2, r3
  406afe:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406b02:	4619      	mov	r1, r3
  406b04:	930d      	str	r3, [sp, #52]	; 0x34
  406b06:	469b      	mov	fp, r3
  406b08:	f04f 30ff 	mov.w	r0, #4294967295
  406b0c:	7863      	ldrb	r3, [r4, #1]
  406b0e:	900a      	str	r0, [sp, #40]	; 0x28
  406b10:	f104 0a01 	add.w	sl, r4, #1
  406b14:	f10a 0a01 	add.w	sl, sl, #1
  406b18:	f1a3 0020 	sub.w	r0, r3, #32
  406b1c:	2858      	cmp	r0, #88	; 0x58
  406b1e:	f200 83c1 	bhi.w	4072a4 <_svfprintf_r+0x840>
  406b22:	e8df f010 	tbh	[pc, r0, lsl #1]
  406b26:	0238      	.short	0x0238
  406b28:	03bf03bf 	.word	0x03bf03bf
  406b2c:	03bf0240 	.word	0x03bf0240
  406b30:	03bf03bf 	.word	0x03bf03bf
  406b34:	03bf03bf 	.word	0x03bf03bf
  406b38:	024503bf 	.word	0x024503bf
  406b3c:	03bf0203 	.word	0x03bf0203
  406b40:	026b005d 	.word	0x026b005d
  406b44:	028603bf 	.word	0x028603bf
  406b48:	039d039d 	.word	0x039d039d
  406b4c:	039d039d 	.word	0x039d039d
  406b50:	039d039d 	.word	0x039d039d
  406b54:	039d039d 	.word	0x039d039d
  406b58:	03bf039d 	.word	0x03bf039d
  406b5c:	03bf03bf 	.word	0x03bf03bf
  406b60:	03bf03bf 	.word	0x03bf03bf
  406b64:	03bf03bf 	.word	0x03bf03bf
  406b68:	03bf03bf 	.word	0x03bf03bf
  406b6c:	033703bf 	.word	0x033703bf
  406b70:	03bf0357 	.word	0x03bf0357
  406b74:	03bf0357 	.word	0x03bf0357
  406b78:	03bf03bf 	.word	0x03bf03bf
  406b7c:	039803bf 	.word	0x039803bf
  406b80:	03bf03bf 	.word	0x03bf03bf
  406b84:	03bf03ad 	.word	0x03bf03ad
  406b88:	03bf03bf 	.word	0x03bf03bf
  406b8c:	03bf03bf 	.word	0x03bf03bf
  406b90:	03bf0259 	.word	0x03bf0259
  406b94:	031e03bf 	.word	0x031e03bf
  406b98:	03bf03bf 	.word	0x03bf03bf
  406b9c:	03bf03bf 	.word	0x03bf03bf
  406ba0:	03bf03bf 	.word	0x03bf03bf
  406ba4:	03bf03bf 	.word	0x03bf03bf
  406ba8:	03bf03bf 	.word	0x03bf03bf
  406bac:	02db02c6 	.word	0x02db02c6
  406bb0:	03570357 	.word	0x03570357
  406bb4:	028b0357 	.word	0x028b0357
  406bb8:	03bf02db 	.word	0x03bf02db
  406bbc:	029003bf 	.word	0x029003bf
  406bc0:	029d03bf 	.word	0x029d03bf
  406bc4:	02b401cc 	.word	0x02b401cc
  406bc8:	03bf0208 	.word	0x03bf0208
  406bcc:	03bf01e1 	.word	0x03bf01e1
  406bd0:	03bf007e 	.word	0x03bf007e
  406bd4:	020d03bf 	.word	0x020d03bf
  406bd8:	980d      	ldr	r0, [sp, #52]	; 0x34
  406bda:	930f      	str	r3, [sp, #60]	; 0x3c
  406bdc:	4240      	negs	r0, r0
  406bde:	900d      	str	r0, [sp, #52]	; 0x34
  406be0:	f04b 0b04 	orr.w	fp, fp, #4
  406be4:	f89a 3000 	ldrb.w	r3, [sl]
  406be8:	e794      	b.n	406b14 <_svfprintf_r+0xb0>
  406bea:	aa25      	add	r2, sp, #148	; 0x94
  406bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406bee:	980c      	ldr	r0, [sp, #48]	; 0x30
  406bf0:	f004 fed0 	bl	40b994 <__ssprint_r>
  406bf4:	b940      	cbnz	r0, 406c08 <_svfprintf_r+0x1a4>
  406bf6:	46c8      	mov	r8, r9
  406bf8:	e779      	b.n	406aee <_svfprintf_r+0x8a>
  406bfa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406bfc:	b123      	cbz	r3, 406c08 <_svfprintf_r+0x1a4>
  406bfe:	980c      	ldr	r0, [sp, #48]	; 0x30
  406c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406c02:	aa25      	add	r2, sp, #148	; 0x94
  406c04:	f004 fec6 	bl	40b994 <__ssprint_r>
  406c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406c0a:	899b      	ldrh	r3, [r3, #12]
  406c0c:	f013 0f40 	tst.w	r3, #64	; 0x40
  406c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c12:	bf18      	it	ne
  406c14:	f04f 33ff 	movne.w	r3, #4294967295
  406c18:	9309      	str	r3, [sp, #36]	; 0x24
  406c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
  406c1c:	b043      	add	sp, #268	; 0x10c
  406c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c22:	f01b 0f20 	tst.w	fp, #32
  406c26:	9311      	str	r3, [sp, #68]	; 0x44
  406c28:	f040 81dd 	bne.w	406fe6 <_svfprintf_r+0x582>
  406c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406c2e:	f01b 0f10 	tst.w	fp, #16
  406c32:	4613      	mov	r3, r2
  406c34:	f040 856e 	bne.w	407714 <_svfprintf_r+0xcb0>
  406c38:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406c3c:	f000 856a 	beq.w	407714 <_svfprintf_r+0xcb0>
  406c40:	8814      	ldrh	r4, [r2, #0]
  406c42:	3204      	adds	r2, #4
  406c44:	2500      	movs	r5, #0
  406c46:	2301      	movs	r3, #1
  406c48:	920f      	str	r2, [sp, #60]	; 0x3c
  406c4a:	2700      	movs	r7, #0
  406c4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406c50:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c52:	1c4a      	adds	r2, r1, #1
  406c54:	f000 8265 	beq.w	407122 <_svfprintf_r+0x6be>
  406c58:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406c5c:	9207      	str	r2, [sp, #28]
  406c5e:	ea54 0205 	orrs.w	r2, r4, r5
  406c62:	f040 8264 	bne.w	40712e <_svfprintf_r+0x6ca>
  406c66:	2900      	cmp	r1, #0
  406c68:	f040 843c 	bne.w	4074e4 <_svfprintf_r+0xa80>
  406c6c:	2b00      	cmp	r3, #0
  406c6e:	f040 84d7 	bne.w	407620 <_svfprintf_r+0xbbc>
  406c72:	f01b 0301 	ands.w	r3, fp, #1
  406c76:	930e      	str	r3, [sp, #56]	; 0x38
  406c78:	f000 8604 	beq.w	407884 <_svfprintf_r+0xe20>
  406c7c:	ae42      	add	r6, sp, #264	; 0x108
  406c7e:	2330      	movs	r3, #48	; 0x30
  406c80:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406c88:	4293      	cmp	r3, r2
  406c8a:	bfb8      	it	lt
  406c8c:	4613      	movlt	r3, r2
  406c8e:	9308      	str	r3, [sp, #32]
  406c90:	2300      	movs	r3, #0
  406c92:	9312      	str	r3, [sp, #72]	; 0x48
  406c94:	b117      	cbz	r7, 406c9c <_svfprintf_r+0x238>
  406c96:	9b08      	ldr	r3, [sp, #32]
  406c98:	3301      	adds	r3, #1
  406c9a:	9308      	str	r3, [sp, #32]
  406c9c:	9b07      	ldr	r3, [sp, #28]
  406c9e:	f013 0302 	ands.w	r3, r3, #2
  406ca2:	9310      	str	r3, [sp, #64]	; 0x40
  406ca4:	d002      	beq.n	406cac <_svfprintf_r+0x248>
  406ca6:	9b08      	ldr	r3, [sp, #32]
  406ca8:	3302      	adds	r3, #2
  406caa:	9308      	str	r3, [sp, #32]
  406cac:	9b07      	ldr	r3, [sp, #28]
  406cae:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406cb2:	f040 830e 	bne.w	4072d2 <_svfprintf_r+0x86e>
  406cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406cb8:	9a08      	ldr	r2, [sp, #32]
  406cba:	eba3 0b02 	sub.w	fp, r3, r2
  406cbe:	f1bb 0f00 	cmp.w	fp, #0
  406cc2:	f340 8306 	ble.w	4072d2 <_svfprintf_r+0x86e>
  406cc6:	f1bb 0f10 	cmp.w	fp, #16
  406cca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406ccc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406cce:	dd29      	ble.n	406d24 <_svfprintf_r+0x2c0>
  406cd0:	4643      	mov	r3, r8
  406cd2:	4621      	mov	r1, r4
  406cd4:	46a8      	mov	r8, r5
  406cd6:	2710      	movs	r7, #16
  406cd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406cda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406cdc:	e006      	b.n	406cec <_svfprintf_r+0x288>
  406cde:	f1ab 0b10 	sub.w	fp, fp, #16
  406ce2:	f1bb 0f10 	cmp.w	fp, #16
  406ce6:	f103 0308 	add.w	r3, r3, #8
  406cea:	dd18      	ble.n	406d1e <_svfprintf_r+0x2ba>
  406cec:	3201      	adds	r2, #1
  406cee:	48b7      	ldr	r0, [pc, #732]	; (406fcc <_svfprintf_r+0x568>)
  406cf0:	9226      	str	r2, [sp, #152]	; 0x98
  406cf2:	3110      	adds	r1, #16
  406cf4:	2a07      	cmp	r2, #7
  406cf6:	9127      	str	r1, [sp, #156]	; 0x9c
  406cf8:	e883 0081 	stmia.w	r3, {r0, r7}
  406cfc:	ddef      	ble.n	406cde <_svfprintf_r+0x27a>
  406cfe:	aa25      	add	r2, sp, #148	; 0x94
  406d00:	4629      	mov	r1, r5
  406d02:	4620      	mov	r0, r4
  406d04:	f004 fe46 	bl	40b994 <__ssprint_r>
  406d08:	2800      	cmp	r0, #0
  406d0a:	f47f af7d 	bne.w	406c08 <_svfprintf_r+0x1a4>
  406d0e:	f1ab 0b10 	sub.w	fp, fp, #16
  406d12:	f1bb 0f10 	cmp.w	fp, #16
  406d16:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406d18:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406d1a:	464b      	mov	r3, r9
  406d1c:	dce6      	bgt.n	406cec <_svfprintf_r+0x288>
  406d1e:	4645      	mov	r5, r8
  406d20:	460c      	mov	r4, r1
  406d22:	4698      	mov	r8, r3
  406d24:	3201      	adds	r2, #1
  406d26:	4ba9      	ldr	r3, [pc, #676]	; (406fcc <_svfprintf_r+0x568>)
  406d28:	9226      	str	r2, [sp, #152]	; 0x98
  406d2a:	445c      	add	r4, fp
  406d2c:	2a07      	cmp	r2, #7
  406d2e:	9427      	str	r4, [sp, #156]	; 0x9c
  406d30:	e888 0808 	stmia.w	r8, {r3, fp}
  406d34:	f300 8498 	bgt.w	407668 <_svfprintf_r+0xc04>
  406d38:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406d3c:	f108 0808 	add.w	r8, r8, #8
  406d40:	b177      	cbz	r7, 406d60 <_svfprintf_r+0x2fc>
  406d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d44:	3301      	adds	r3, #1
  406d46:	3401      	adds	r4, #1
  406d48:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406d4c:	2201      	movs	r2, #1
  406d4e:	2b07      	cmp	r3, #7
  406d50:	9427      	str	r4, [sp, #156]	; 0x9c
  406d52:	9326      	str	r3, [sp, #152]	; 0x98
  406d54:	e888 0006 	stmia.w	r8, {r1, r2}
  406d58:	f300 83db 	bgt.w	407512 <_svfprintf_r+0xaae>
  406d5c:	f108 0808 	add.w	r8, r8, #8
  406d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406d62:	b16b      	cbz	r3, 406d80 <_svfprintf_r+0x31c>
  406d64:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d66:	3301      	adds	r3, #1
  406d68:	3402      	adds	r4, #2
  406d6a:	a91e      	add	r1, sp, #120	; 0x78
  406d6c:	2202      	movs	r2, #2
  406d6e:	2b07      	cmp	r3, #7
  406d70:	9427      	str	r4, [sp, #156]	; 0x9c
  406d72:	9326      	str	r3, [sp, #152]	; 0x98
  406d74:	e888 0006 	stmia.w	r8, {r1, r2}
  406d78:	f300 83d6 	bgt.w	407528 <_svfprintf_r+0xac4>
  406d7c:	f108 0808 	add.w	r8, r8, #8
  406d80:	2d80      	cmp	r5, #128	; 0x80
  406d82:	f000 8315 	beq.w	4073b0 <_svfprintf_r+0x94c>
  406d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406d8a:	1a9f      	subs	r7, r3, r2
  406d8c:	2f00      	cmp	r7, #0
  406d8e:	dd36      	ble.n	406dfe <_svfprintf_r+0x39a>
  406d90:	2f10      	cmp	r7, #16
  406d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d94:	4d8e      	ldr	r5, [pc, #568]	; (406fd0 <_svfprintf_r+0x56c>)
  406d96:	dd27      	ble.n	406de8 <_svfprintf_r+0x384>
  406d98:	4642      	mov	r2, r8
  406d9a:	4621      	mov	r1, r4
  406d9c:	46b0      	mov	r8, r6
  406d9e:	f04f 0b10 	mov.w	fp, #16
  406da2:	462e      	mov	r6, r5
  406da4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406da6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406da8:	e004      	b.n	406db4 <_svfprintf_r+0x350>
  406daa:	3f10      	subs	r7, #16
  406dac:	2f10      	cmp	r7, #16
  406dae:	f102 0208 	add.w	r2, r2, #8
  406db2:	dd15      	ble.n	406de0 <_svfprintf_r+0x37c>
  406db4:	3301      	adds	r3, #1
  406db6:	3110      	adds	r1, #16
  406db8:	2b07      	cmp	r3, #7
  406dba:	9127      	str	r1, [sp, #156]	; 0x9c
  406dbc:	9326      	str	r3, [sp, #152]	; 0x98
  406dbe:	e882 0840 	stmia.w	r2, {r6, fp}
  406dc2:	ddf2      	ble.n	406daa <_svfprintf_r+0x346>
  406dc4:	aa25      	add	r2, sp, #148	; 0x94
  406dc6:	4629      	mov	r1, r5
  406dc8:	4620      	mov	r0, r4
  406dca:	f004 fde3 	bl	40b994 <__ssprint_r>
  406dce:	2800      	cmp	r0, #0
  406dd0:	f47f af1a 	bne.w	406c08 <_svfprintf_r+0x1a4>
  406dd4:	3f10      	subs	r7, #16
  406dd6:	2f10      	cmp	r7, #16
  406dd8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ddc:	464a      	mov	r2, r9
  406dde:	dce9      	bgt.n	406db4 <_svfprintf_r+0x350>
  406de0:	4635      	mov	r5, r6
  406de2:	460c      	mov	r4, r1
  406de4:	4646      	mov	r6, r8
  406de6:	4690      	mov	r8, r2
  406de8:	3301      	adds	r3, #1
  406dea:	443c      	add	r4, r7
  406dec:	2b07      	cmp	r3, #7
  406dee:	9427      	str	r4, [sp, #156]	; 0x9c
  406df0:	9326      	str	r3, [sp, #152]	; 0x98
  406df2:	e888 00a0 	stmia.w	r8, {r5, r7}
  406df6:	f300 8381 	bgt.w	4074fc <_svfprintf_r+0xa98>
  406dfa:	f108 0808 	add.w	r8, r8, #8
  406dfe:	9b07      	ldr	r3, [sp, #28]
  406e00:	05df      	lsls	r7, r3, #23
  406e02:	f100 8268 	bmi.w	4072d6 <_svfprintf_r+0x872>
  406e06:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e08:	990e      	ldr	r1, [sp, #56]	; 0x38
  406e0a:	f8c8 6000 	str.w	r6, [r8]
  406e0e:	3301      	adds	r3, #1
  406e10:	440c      	add	r4, r1
  406e12:	2b07      	cmp	r3, #7
  406e14:	9427      	str	r4, [sp, #156]	; 0x9c
  406e16:	f8c8 1004 	str.w	r1, [r8, #4]
  406e1a:	9326      	str	r3, [sp, #152]	; 0x98
  406e1c:	f300 834d 	bgt.w	4074ba <_svfprintf_r+0xa56>
  406e20:	f108 0808 	add.w	r8, r8, #8
  406e24:	9b07      	ldr	r3, [sp, #28]
  406e26:	075b      	lsls	r3, r3, #29
  406e28:	d53a      	bpl.n	406ea0 <_svfprintf_r+0x43c>
  406e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406e2c:	9a08      	ldr	r2, [sp, #32]
  406e2e:	1a9d      	subs	r5, r3, r2
  406e30:	2d00      	cmp	r5, #0
  406e32:	dd35      	ble.n	406ea0 <_svfprintf_r+0x43c>
  406e34:	2d10      	cmp	r5, #16
  406e36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e38:	dd20      	ble.n	406e7c <_svfprintf_r+0x418>
  406e3a:	2610      	movs	r6, #16
  406e3c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406e3e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406e42:	e004      	b.n	406e4e <_svfprintf_r+0x3ea>
  406e44:	3d10      	subs	r5, #16
  406e46:	2d10      	cmp	r5, #16
  406e48:	f108 0808 	add.w	r8, r8, #8
  406e4c:	dd16      	ble.n	406e7c <_svfprintf_r+0x418>
  406e4e:	3301      	adds	r3, #1
  406e50:	4a5e      	ldr	r2, [pc, #376]	; (406fcc <_svfprintf_r+0x568>)
  406e52:	9326      	str	r3, [sp, #152]	; 0x98
  406e54:	3410      	adds	r4, #16
  406e56:	2b07      	cmp	r3, #7
  406e58:	9427      	str	r4, [sp, #156]	; 0x9c
  406e5a:	e888 0044 	stmia.w	r8, {r2, r6}
  406e5e:	ddf1      	ble.n	406e44 <_svfprintf_r+0x3e0>
  406e60:	aa25      	add	r2, sp, #148	; 0x94
  406e62:	4659      	mov	r1, fp
  406e64:	4638      	mov	r0, r7
  406e66:	f004 fd95 	bl	40b994 <__ssprint_r>
  406e6a:	2800      	cmp	r0, #0
  406e6c:	f47f aecc 	bne.w	406c08 <_svfprintf_r+0x1a4>
  406e70:	3d10      	subs	r5, #16
  406e72:	2d10      	cmp	r5, #16
  406e74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406e76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e78:	46c8      	mov	r8, r9
  406e7a:	dce8      	bgt.n	406e4e <_svfprintf_r+0x3ea>
  406e7c:	3301      	adds	r3, #1
  406e7e:	4a53      	ldr	r2, [pc, #332]	; (406fcc <_svfprintf_r+0x568>)
  406e80:	9326      	str	r3, [sp, #152]	; 0x98
  406e82:	442c      	add	r4, r5
  406e84:	2b07      	cmp	r3, #7
  406e86:	9427      	str	r4, [sp, #156]	; 0x9c
  406e88:	e888 0024 	stmia.w	r8, {r2, r5}
  406e8c:	dd08      	ble.n	406ea0 <_svfprintf_r+0x43c>
  406e8e:	aa25      	add	r2, sp, #148	; 0x94
  406e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406e92:	980c      	ldr	r0, [sp, #48]	; 0x30
  406e94:	f004 fd7e 	bl	40b994 <__ssprint_r>
  406e98:	2800      	cmp	r0, #0
  406e9a:	f47f aeb5 	bne.w	406c08 <_svfprintf_r+0x1a4>
  406e9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ea2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406ea4:	9908      	ldr	r1, [sp, #32]
  406ea6:	428a      	cmp	r2, r1
  406ea8:	bfac      	ite	ge
  406eaa:	189b      	addge	r3, r3, r2
  406eac:	185b      	addlt	r3, r3, r1
  406eae:	9309      	str	r3, [sp, #36]	; 0x24
  406eb0:	2c00      	cmp	r4, #0
  406eb2:	f040 830d 	bne.w	4074d0 <_svfprintf_r+0xa6c>
  406eb6:	2300      	movs	r3, #0
  406eb8:	9326      	str	r3, [sp, #152]	; 0x98
  406eba:	46c8      	mov	r8, r9
  406ebc:	e5f9      	b.n	406ab2 <_svfprintf_r+0x4e>
  406ebe:	9311      	str	r3, [sp, #68]	; 0x44
  406ec0:	f01b 0320 	ands.w	r3, fp, #32
  406ec4:	f040 81e3 	bne.w	40728e <_svfprintf_r+0x82a>
  406ec8:	f01b 0210 	ands.w	r2, fp, #16
  406ecc:	f040 842e 	bne.w	40772c <_svfprintf_r+0xcc8>
  406ed0:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406ed4:	f000 842a 	beq.w	40772c <_svfprintf_r+0xcc8>
  406ed8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406eda:	4613      	mov	r3, r2
  406edc:	460a      	mov	r2, r1
  406ede:	3204      	adds	r2, #4
  406ee0:	880c      	ldrh	r4, [r1, #0]
  406ee2:	920f      	str	r2, [sp, #60]	; 0x3c
  406ee4:	2500      	movs	r5, #0
  406ee6:	e6b0      	b.n	406c4a <_svfprintf_r+0x1e6>
  406ee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406eea:	9311      	str	r3, [sp, #68]	; 0x44
  406eec:	6816      	ldr	r6, [r2, #0]
  406eee:	2400      	movs	r4, #0
  406ef0:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  406ef4:	1d15      	adds	r5, r2, #4
  406ef6:	2e00      	cmp	r6, #0
  406ef8:	f000 86a7 	beq.w	407c4a <_svfprintf_r+0x11e6>
  406efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406efe:	1c53      	adds	r3, r2, #1
  406f00:	f000 8609 	beq.w	407b16 <_svfprintf_r+0x10b2>
  406f04:	4621      	mov	r1, r4
  406f06:	4630      	mov	r0, r6
  406f08:	f003 feea 	bl	40ace0 <memchr>
  406f0c:	2800      	cmp	r0, #0
  406f0e:	f000 86e1 	beq.w	407cd4 <_svfprintf_r+0x1270>
  406f12:	1b83      	subs	r3, r0, r6
  406f14:	930e      	str	r3, [sp, #56]	; 0x38
  406f16:	940a      	str	r4, [sp, #40]	; 0x28
  406f18:	950f      	str	r5, [sp, #60]	; 0x3c
  406f1a:	f8cd b01c 	str.w	fp, [sp, #28]
  406f1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406f22:	9308      	str	r3, [sp, #32]
  406f24:	9412      	str	r4, [sp, #72]	; 0x48
  406f26:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406f2a:	e6b3      	b.n	406c94 <_svfprintf_r+0x230>
  406f2c:	f89a 3000 	ldrb.w	r3, [sl]
  406f30:	2201      	movs	r2, #1
  406f32:	212b      	movs	r1, #43	; 0x2b
  406f34:	e5ee      	b.n	406b14 <_svfprintf_r+0xb0>
  406f36:	f04b 0b20 	orr.w	fp, fp, #32
  406f3a:	f89a 3000 	ldrb.w	r3, [sl]
  406f3e:	e5e9      	b.n	406b14 <_svfprintf_r+0xb0>
  406f40:	9311      	str	r3, [sp, #68]	; 0x44
  406f42:	2a00      	cmp	r2, #0
  406f44:	f040 8795 	bne.w	407e72 <_svfprintf_r+0x140e>
  406f48:	4b22      	ldr	r3, [pc, #136]	; (406fd4 <_svfprintf_r+0x570>)
  406f4a:	9318      	str	r3, [sp, #96]	; 0x60
  406f4c:	f01b 0f20 	tst.w	fp, #32
  406f50:	f040 8111 	bne.w	407176 <_svfprintf_r+0x712>
  406f54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406f56:	f01b 0f10 	tst.w	fp, #16
  406f5a:	4613      	mov	r3, r2
  406f5c:	f040 83e1 	bne.w	407722 <_svfprintf_r+0xcbe>
  406f60:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406f64:	f000 83dd 	beq.w	407722 <_svfprintf_r+0xcbe>
  406f68:	3304      	adds	r3, #4
  406f6a:	8814      	ldrh	r4, [r2, #0]
  406f6c:	930f      	str	r3, [sp, #60]	; 0x3c
  406f6e:	2500      	movs	r5, #0
  406f70:	f01b 0f01 	tst.w	fp, #1
  406f74:	f000 810c 	beq.w	407190 <_svfprintf_r+0x72c>
  406f78:	ea54 0305 	orrs.w	r3, r4, r5
  406f7c:	f000 8108 	beq.w	407190 <_svfprintf_r+0x72c>
  406f80:	2330      	movs	r3, #48	; 0x30
  406f82:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  406f86:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  406f8a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  406f8e:	f04b 0b02 	orr.w	fp, fp, #2
  406f92:	2302      	movs	r3, #2
  406f94:	e659      	b.n	406c4a <_svfprintf_r+0x1e6>
  406f96:	f89a 3000 	ldrb.w	r3, [sl]
  406f9a:	2900      	cmp	r1, #0
  406f9c:	f47f adba 	bne.w	406b14 <_svfprintf_r+0xb0>
  406fa0:	2201      	movs	r2, #1
  406fa2:	2120      	movs	r1, #32
  406fa4:	e5b6      	b.n	406b14 <_svfprintf_r+0xb0>
  406fa6:	f04b 0b01 	orr.w	fp, fp, #1
  406faa:	f89a 3000 	ldrb.w	r3, [sl]
  406fae:	e5b1      	b.n	406b14 <_svfprintf_r+0xb0>
  406fb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  406fb2:	6823      	ldr	r3, [r4, #0]
  406fb4:	930d      	str	r3, [sp, #52]	; 0x34
  406fb6:	4618      	mov	r0, r3
  406fb8:	2800      	cmp	r0, #0
  406fba:	4623      	mov	r3, r4
  406fbc:	f103 0304 	add.w	r3, r3, #4
  406fc0:	f6ff ae0a 	blt.w	406bd8 <_svfprintf_r+0x174>
  406fc4:	930f      	str	r3, [sp, #60]	; 0x3c
  406fc6:	f89a 3000 	ldrb.w	r3, [sl]
  406fca:	e5a3      	b.n	406b14 <_svfprintf_r+0xb0>
  406fcc:	0040db04 	.word	0x0040db04
  406fd0:	0040db14 	.word	0x0040db14
  406fd4:	0040dae4 	.word	0x0040dae4
  406fd8:	f04b 0b10 	orr.w	fp, fp, #16
  406fdc:	f01b 0f20 	tst.w	fp, #32
  406fe0:	9311      	str	r3, [sp, #68]	; 0x44
  406fe2:	f43f ae23 	beq.w	406c2c <_svfprintf_r+0x1c8>
  406fe6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406fe8:	3507      	adds	r5, #7
  406fea:	f025 0307 	bic.w	r3, r5, #7
  406fee:	f103 0208 	add.w	r2, r3, #8
  406ff2:	e9d3 4500 	ldrd	r4, r5, [r3]
  406ff6:	920f      	str	r2, [sp, #60]	; 0x3c
  406ff8:	2301      	movs	r3, #1
  406ffa:	e626      	b.n	406c4a <_svfprintf_r+0x1e6>
  406ffc:	f89a 3000 	ldrb.w	r3, [sl]
  407000:	2b2a      	cmp	r3, #42	; 0x2a
  407002:	f10a 0401 	add.w	r4, sl, #1
  407006:	f000 8727 	beq.w	407e58 <_svfprintf_r+0x13f4>
  40700a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40700e:	2809      	cmp	r0, #9
  407010:	46a2      	mov	sl, r4
  407012:	f200 86ad 	bhi.w	407d70 <_svfprintf_r+0x130c>
  407016:	2300      	movs	r3, #0
  407018:	461c      	mov	r4, r3
  40701a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40701e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407022:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407026:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40702a:	2809      	cmp	r0, #9
  40702c:	d9f5      	bls.n	40701a <_svfprintf_r+0x5b6>
  40702e:	940a      	str	r4, [sp, #40]	; 0x28
  407030:	e572      	b.n	406b18 <_svfprintf_r+0xb4>
  407032:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407036:	f89a 3000 	ldrb.w	r3, [sl]
  40703a:	e56b      	b.n	406b14 <_svfprintf_r+0xb0>
  40703c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407040:	f89a 3000 	ldrb.w	r3, [sl]
  407044:	e566      	b.n	406b14 <_svfprintf_r+0xb0>
  407046:	f89a 3000 	ldrb.w	r3, [sl]
  40704a:	2b6c      	cmp	r3, #108	; 0x6c
  40704c:	bf03      	ittte	eq
  40704e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  407052:	f04b 0b20 	orreq.w	fp, fp, #32
  407056:	f10a 0a01 	addeq.w	sl, sl, #1
  40705a:	f04b 0b10 	orrne.w	fp, fp, #16
  40705e:	e559      	b.n	406b14 <_svfprintf_r+0xb0>
  407060:	2a00      	cmp	r2, #0
  407062:	f040 8711 	bne.w	407e88 <_svfprintf_r+0x1424>
  407066:	f01b 0f20 	tst.w	fp, #32
  40706a:	f040 84f9 	bne.w	407a60 <_svfprintf_r+0xffc>
  40706e:	f01b 0f10 	tst.w	fp, #16
  407072:	f040 84ac 	bne.w	4079ce <_svfprintf_r+0xf6a>
  407076:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40707a:	f000 84a8 	beq.w	4079ce <_svfprintf_r+0xf6a>
  40707e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407080:	6813      	ldr	r3, [r2, #0]
  407082:	3204      	adds	r2, #4
  407084:	920f      	str	r2, [sp, #60]	; 0x3c
  407086:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40708a:	801a      	strh	r2, [r3, #0]
  40708c:	e511      	b.n	406ab2 <_svfprintf_r+0x4e>
  40708e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407090:	4bb3      	ldr	r3, [pc, #716]	; (407360 <_svfprintf_r+0x8fc>)
  407092:	680c      	ldr	r4, [r1, #0]
  407094:	9318      	str	r3, [sp, #96]	; 0x60
  407096:	2230      	movs	r2, #48	; 0x30
  407098:	2378      	movs	r3, #120	; 0x78
  40709a:	3104      	adds	r1, #4
  40709c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4070a0:	9311      	str	r3, [sp, #68]	; 0x44
  4070a2:	f04b 0b02 	orr.w	fp, fp, #2
  4070a6:	910f      	str	r1, [sp, #60]	; 0x3c
  4070a8:	2500      	movs	r5, #0
  4070aa:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4070ae:	2302      	movs	r3, #2
  4070b0:	e5cb      	b.n	406c4a <_svfprintf_r+0x1e6>
  4070b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4070b4:	9311      	str	r3, [sp, #68]	; 0x44
  4070b6:	680a      	ldr	r2, [r1, #0]
  4070b8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4070bc:	2300      	movs	r3, #0
  4070be:	460a      	mov	r2, r1
  4070c0:	461f      	mov	r7, r3
  4070c2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4070c6:	3204      	adds	r2, #4
  4070c8:	2301      	movs	r3, #1
  4070ca:	9308      	str	r3, [sp, #32]
  4070cc:	f8cd b01c 	str.w	fp, [sp, #28]
  4070d0:	970a      	str	r7, [sp, #40]	; 0x28
  4070d2:	9712      	str	r7, [sp, #72]	; 0x48
  4070d4:	920f      	str	r2, [sp, #60]	; 0x3c
  4070d6:	930e      	str	r3, [sp, #56]	; 0x38
  4070d8:	ae28      	add	r6, sp, #160	; 0xa0
  4070da:	e5df      	b.n	406c9c <_svfprintf_r+0x238>
  4070dc:	9311      	str	r3, [sp, #68]	; 0x44
  4070de:	2a00      	cmp	r2, #0
  4070e0:	f040 86ea 	bne.w	407eb8 <_svfprintf_r+0x1454>
  4070e4:	f01b 0f20 	tst.w	fp, #32
  4070e8:	d15d      	bne.n	4071a6 <_svfprintf_r+0x742>
  4070ea:	f01b 0f10 	tst.w	fp, #16
  4070ee:	f040 8308 	bne.w	407702 <_svfprintf_r+0xc9e>
  4070f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4070f6:	f000 8304 	beq.w	407702 <_svfprintf_r+0xc9e>
  4070fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4070fc:	f9b1 4000 	ldrsh.w	r4, [r1]
  407100:	3104      	adds	r1, #4
  407102:	17e5      	asrs	r5, r4, #31
  407104:	4622      	mov	r2, r4
  407106:	462b      	mov	r3, r5
  407108:	910f      	str	r1, [sp, #60]	; 0x3c
  40710a:	2a00      	cmp	r2, #0
  40710c:	f173 0300 	sbcs.w	r3, r3, #0
  407110:	db58      	blt.n	4071c4 <_svfprintf_r+0x760>
  407112:	990a      	ldr	r1, [sp, #40]	; 0x28
  407114:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407118:	1c4a      	adds	r2, r1, #1
  40711a:	f04f 0301 	mov.w	r3, #1
  40711e:	f47f ad9b 	bne.w	406c58 <_svfprintf_r+0x1f4>
  407122:	ea54 0205 	orrs.w	r2, r4, r5
  407126:	f000 81df 	beq.w	4074e8 <_svfprintf_r+0xa84>
  40712a:	f8cd b01c 	str.w	fp, [sp, #28]
  40712e:	2b01      	cmp	r3, #1
  407130:	f000 827b 	beq.w	40762a <_svfprintf_r+0xbc6>
  407134:	2b02      	cmp	r3, #2
  407136:	f040 8206 	bne.w	407546 <_svfprintf_r+0xae2>
  40713a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40713c:	464e      	mov	r6, r9
  40713e:	0923      	lsrs	r3, r4, #4
  407140:	f004 010f 	and.w	r1, r4, #15
  407144:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407148:	092a      	lsrs	r2, r5, #4
  40714a:	461c      	mov	r4, r3
  40714c:	4615      	mov	r5, r2
  40714e:	5c43      	ldrb	r3, [r0, r1]
  407150:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407154:	ea54 0305 	orrs.w	r3, r4, r5
  407158:	d1f1      	bne.n	40713e <_svfprintf_r+0x6da>
  40715a:	eba9 0306 	sub.w	r3, r9, r6
  40715e:	930e      	str	r3, [sp, #56]	; 0x38
  407160:	e590      	b.n	406c84 <_svfprintf_r+0x220>
  407162:	9311      	str	r3, [sp, #68]	; 0x44
  407164:	2a00      	cmp	r2, #0
  407166:	f040 86a3 	bne.w	407eb0 <_svfprintf_r+0x144c>
  40716a:	4b7e      	ldr	r3, [pc, #504]	; (407364 <_svfprintf_r+0x900>)
  40716c:	9318      	str	r3, [sp, #96]	; 0x60
  40716e:	f01b 0f20 	tst.w	fp, #32
  407172:	f43f aeef 	beq.w	406f54 <_svfprintf_r+0x4f0>
  407176:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407178:	3507      	adds	r5, #7
  40717a:	f025 0307 	bic.w	r3, r5, #7
  40717e:	f103 0208 	add.w	r2, r3, #8
  407182:	f01b 0f01 	tst.w	fp, #1
  407186:	920f      	str	r2, [sp, #60]	; 0x3c
  407188:	e9d3 4500 	ldrd	r4, r5, [r3]
  40718c:	f47f aef4 	bne.w	406f78 <_svfprintf_r+0x514>
  407190:	2302      	movs	r3, #2
  407192:	e55a      	b.n	406c4a <_svfprintf_r+0x1e6>
  407194:	9311      	str	r3, [sp, #68]	; 0x44
  407196:	2a00      	cmp	r2, #0
  407198:	f040 8686 	bne.w	407ea8 <_svfprintf_r+0x1444>
  40719c:	f04b 0b10 	orr.w	fp, fp, #16
  4071a0:	f01b 0f20 	tst.w	fp, #32
  4071a4:	d0a1      	beq.n	4070ea <_svfprintf_r+0x686>
  4071a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4071a8:	3507      	adds	r5, #7
  4071aa:	f025 0507 	bic.w	r5, r5, #7
  4071ae:	e9d5 2300 	ldrd	r2, r3, [r5]
  4071b2:	2a00      	cmp	r2, #0
  4071b4:	f105 0108 	add.w	r1, r5, #8
  4071b8:	461d      	mov	r5, r3
  4071ba:	f173 0300 	sbcs.w	r3, r3, #0
  4071be:	910f      	str	r1, [sp, #60]	; 0x3c
  4071c0:	4614      	mov	r4, r2
  4071c2:	daa6      	bge.n	407112 <_svfprintf_r+0x6ae>
  4071c4:	272d      	movs	r7, #45	; 0x2d
  4071c6:	4264      	negs	r4, r4
  4071c8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4071cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4071d0:	2301      	movs	r3, #1
  4071d2:	e53d      	b.n	406c50 <_svfprintf_r+0x1ec>
  4071d4:	9311      	str	r3, [sp, #68]	; 0x44
  4071d6:	2a00      	cmp	r2, #0
  4071d8:	f040 8662 	bne.w	407ea0 <_svfprintf_r+0x143c>
  4071dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4071de:	3507      	adds	r5, #7
  4071e0:	f025 0307 	bic.w	r3, r5, #7
  4071e4:	f103 0208 	add.w	r2, r3, #8
  4071e8:	920f      	str	r2, [sp, #60]	; 0x3c
  4071ea:	681a      	ldr	r2, [r3, #0]
  4071ec:	9215      	str	r2, [sp, #84]	; 0x54
  4071ee:	685b      	ldr	r3, [r3, #4]
  4071f0:	9314      	str	r3, [sp, #80]	; 0x50
  4071f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4071f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4071f6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4071fa:	4628      	mov	r0, r5
  4071fc:	4621      	mov	r1, r4
  4071fe:	f04f 32ff 	mov.w	r2, #4294967295
  407202:	4b59      	ldr	r3, [pc, #356]	; (407368 <_svfprintf_r+0x904>)
  407204:	f005 fa94 	bl	40c730 <__aeabi_dcmpun>
  407208:	2800      	cmp	r0, #0
  40720a:	f040 834a 	bne.w	4078a2 <_svfprintf_r+0xe3e>
  40720e:	4628      	mov	r0, r5
  407210:	4621      	mov	r1, r4
  407212:	f04f 32ff 	mov.w	r2, #4294967295
  407216:	4b54      	ldr	r3, [pc, #336]	; (407368 <_svfprintf_r+0x904>)
  407218:	f005 fa6c 	bl	40c6f4 <__aeabi_dcmple>
  40721c:	2800      	cmp	r0, #0
  40721e:	f040 8340 	bne.w	4078a2 <_svfprintf_r+0xe3e>
  407222:	a815      	add	r0, sp, #84	; 0x54
  407224:	c80d      	ldmia	r0, {r0, r2, r3}
  407226:	9914      	ldr	r1, [sp, #80]	; 0x50
  407228:	f005 fa5a 	bl	40c6e0 <__aeabi_dcmplt>
  40722c:	2800      	cmp	r0, #0
  40722e:	f040 8530 	bne.w	407c92 <_svfprintf_r+0x122e>
  407232:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407236:	4e4d      	ldr	r6, [pc, #308]	; (40736c <_svfprintf_r+0x908>)
  407238:	4b4d      	ldr	r3, [pc, #308]	; (407370 <_svfprintf_r+0x90c>)
  40723a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40723e:	9007      	str	r0, [sp, #28]
  407240:	9811      	ldr	r0, [sp, #68]	; 0x44
  407242:	2203      	movs	r2, #3
  407244:	2100      	movs	r1, #0
  407246:	9208      	str	r2, [sp, #32]
  407248:	910a      	str	r1, [sp, #40]	; 0x28
  40724a:	2847      	cmp	r0, #71	; 0x47
  40724c:	bfd8      	it	le
  40724e:	461e      	movle	r6, r3
  407250:	920e      	str	r2, [sp, #56]	; 0x38
  407252:	9112      	str	r1, [sp, #72]	; 0x48
  407254:	e51e      	b.n	406c94 <_svfprintf_r+0x230>
  407256:	f04b 0b08 	orr.w	fp, fp, #8
  40725a:	f89a 3000 	ldrb.w	r3, [sl]
  40725e:	e459      	b.n	406b14 <_svfprintf_r+0xb0>
  407260:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407264:	2300      	movs	r3, #0
  407266:	461c      	mov	r4, r3
  407268:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40726c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407270:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407274:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407278:	2809      	cmp	r0, #9
  40727a:	d9f5      	bls.n	407268 <_svfprintf_r+0x804>
  40727c:	940d      	str	r4, [sp, #52]	; 0x34
  40727e:	e44b      	b.n	406b18 <_svfprintf_r+0xb4>
  407280:	f04b 0b10 	orr.w	fp, fp, #16
  407284:	9311      	str	r3, [sp, #68]	; 0x44
  407286:	f01b 0320 	ands.w	r3, fp, #32
  40728a:	f43f ae1d 	beq.w	406ec8 <_svfprintf_r+0x464>
  40728e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407290:	3507      	adds	r5, #7
  407292:	f025 0307 	bic.w	r3, r5, #7
  407296:	f103 0208 	add.w	r2, r3, #8
  40729a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40729e:	920f      	str	r2, [sp, #60]	; 0x3c
  4072a0:	2300      	movs	r3, #0
  4072a2:	e4d2      	b.n	406c4a <_svfprintf_r+0x1e6>
  4072a4:	9311      	str	r3, [sp, #68]	; 0x44
  4072a6:	2a00      	cmp	r2, #0
  4072a8:	f040 85e7 	bne.w	407e7a <_svfprintf_r+0x1416>
  4072ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4072ae:	2a00      	cmp	r2, #0
  4072b0:	f43f aca3 	beq.w	406bfa <_svfprintf_r+0x196>
  4072b4:	2300      	movs	r3, #0
  4072b6:	2101      	movs	r1, #1
  4072b8:	461f      	mov	r7, r3
  4072ba:	9108      	str	r1, [sp, #32]
  4072bc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4072c0:	f8cd b01c 	str.w	fp, [sp, #28]
  4072c4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4072c8:	930a      	str	r3, [sp, #40]	; 0x28
  4072ca:	9312      	str	r3, [sp, #72]	; 0x48
  4072cc:	910e      	str	r1, [sp, #56]	; 0x38
  4072ce:	ae28      	add	r6, sp, #160	; 0xa0
  4072d0:	e4e4      	b.n	406c9c <_svfprintf_r+0x238>
  4072d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4072d4:	e534      	b.n	406d40 <_svfprintf_r+0x2dc>
  4072d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4072d8:	2b65      	cmp	r3, #101	; 0x65
  4072da:	f340 80a7 	ble.w	40742c <_svfprintf_r+0x9c8>
  4072de:	a815      	add	r0, sp, #84	; 0x54
  4072e0:	c80d      	ldmia	r0, {r0, r2, r3}
  4072e2:	9914      	ldr	r1, [sp, #80]	; 0x50
  4072e4:	f005 f9f2 	bl	40c6cc <__aeabi_dcmpeq>
  4072e8:	2800      	cmp	r0, #0
  4072ea:	f000 8150 	beq.w	40758e <_svfprintf_r+0xb2a>
  4072ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4072f0:	4a20      	ldr	r2, [pc, #128]	; (407374 <_svfprintf_r+0x910>)
  4072f2:	f8c8 2000 	str.w	r2, [r8]
  4072f6:	3301      	adds	r3, #1
  4072f8:	3401      	adds	r4, #1
  4072fa:	2201      	movs	r2, #1
  4072fc:	2b07      	cmp	r3, #7
  4072fe:	9427      	str	r4, [sp, #156]	; 0x9c
  407300:	9326      	str	r3, [sp, #152]	; 0x98
  407302:	f8c8 2004 	str.w	r2, [r8, #4]
  407306:	f300 836a 	bgt.w	4079de <_svfprintf_r+0xf7a>
  40730a:	f108 0808 	add.w	r8, r8, #8
  40730e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407312:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407314:	4293      	cmp	r3, r2
  407316:	db03      	blt.n	407320 <_svfprintf_r+0x8bc>
  407318:	9b07      	ldr	r3, [sp, #28]
  40731a:	07dd      	lsls	r5, r3, #31
  40731c:	f57f ad82 	bpl.w	406e24 <_svfprintf_r+0x3c0>
  407320:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407322:	9919      	ldr	r1, [sp, #100]	; 0x64
  407324:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407326:	f8c8 2000 	str.w	r2, [r8]
  40732a:	3301      	adds	r3, #1
  40732c:	440c      	add	r4, r1
  40732e:	2b07      	cmp	r3, #7
  407330:	f8c8 1004 	str.w	r1, [r8, #4]
  407334:	9427      	str	r4, [sp, #156]	; 0x9c
  407336:	9326      	str	r3, [sp, #152]	; 0x98
  407338:	f300 839e 	bgt.w	407a78 <_svfprintf_r+0x1014>
  40733c:	f108 0808 	add.w	r8, r8, #8
  407340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407342:	1e5e      	subs	r6, r3, #1
  407344:	2e00      	cmp	r6, #0
  407346:	f77f ad6d 	ble.w	406e24 <_svfprintf_r+0x3c0>
  40734a:	2e10      	cmp	r6, #16
  40734c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40734e:	4d0a      	ldr	r5, [pc, #40]	; (407378 <_svfprintf_r+0x914>)
  407350:	f340 81f5 	ble.w	40773e <_svfprintf_r+0xcda>
  407354:	4622      	mov	r2, r4
  407356:	2710      	movs	r7, #16
  407358:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40735c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40735e:	e013      	b.n	407388 <_svfprintf_r+0x924>
  407360:	0040dae4 	.word	0x0040dae4
  407364:	0040dad0 	.word	0x0040dad0
  407368:	7fefffff 	.word	0x7fefffff
  40736c:	0040dac4 	.word	0x0040dac4
  407370:	0040dac0 	.word	0x0040dac0
  407374:	0040db00 	.word	0x0040db00
  407378:	0040db14 	.word	0x0040db14
  40737c:	f108 0808 	add.w	r8, r8, #8
  407380:	3e10      	subs	r6, #16
  407382:	2e10      	cmp	r6, #16
  407384:	f340 81da 	ble.w	40773c <_svfprintf_r+0xcd8>
  407388:	3301      	adds	r3, #1
  40738a:	3210      	adds	r2, #16
  40738c:	2b07      	cmp	r3, #7
  40738e:	9227      	str	r2, [sp, #156]	; 0x9c
  407390:	9326      	str	r3, [sp, #152]	; 0x98
  407392:	e888 00a0 	stmia.w	r8, {r5, r7}
  407396:	ddf1      	ble.n	40737c <_svfprintf_r+0x918>
  407398:	aa25      	add	r2, sp, #148	; 0x94
  40739a:	4621      	mov	r1, r4
  40739c:	4658      	mov	r0, fp
  40739e:	f004 faf9 	bl	40b994 <__ssprint_r>
  4073a2:	2800      	cmp	r0, #0
  4073a4:	f47f ac30 	bne.w	406c08 <_svfprintf_r+0x1a4>
  4073a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4073aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4073ac:	46c8      	mov	r8, r9
  4073ae:	e7e7      	b.n	407380 <_svfprintf_r+0x91c>
  4073b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4073b2:	9a08      	ldr	r2, [sp, #32]
  4073b4:	1a9f      	subs	r7, r3, r2
  4073b6:	2f00      	cmp	r7, #0
  4073b8:	f77f ace5 	ble.w	406d86 <_svfprintf_r+0x322>
  4073bc:	2f10      	cmp	r7, #16
  4073be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4073c0:	4db6      	ldr	r5, [pc, #728]	; (40769c <_svfprintf_r+0xc38>)
  4073c2:	dd27      	ble.n	407414 <_svfprintf_r+0x9b0>
  4073c4:	4642      	mov	r2, r8
  4073c6:	4621      	mov	r1, r4
  4073c8:	46b0      	mov	r8, r6
  4073ca:	f04f 0b10 	mov.w	fp, #16
  4073ce:	462e      	mov	r6, r5
  4073d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4073d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4073d4:	e004      	b.n	4073e0 <_svfprintf_r+0x97c>
  4073d6:	3f10      	subs	r7, #16
  4073d8:	2f10      	cmp	r7, #16
  4073da:	f102 0208 	add.w	r2, r2, #8
  4073de:	dd15      	ble.n	40740c <_svfprintf_r+0x9a8>
  4073e0:	3301      	adds	r3, #1
  4073e2:	3110      	adds	r1, #16
  4073e4:	2b07      	cmp	r3, #7
  4073e6:	9127      	str	r1, [sp, #156]	; 0x9c
  4073e8:	9326      	str	r3, [sp, #152]	; 0x98
  4073ea:	e882 0840 	stmia.w	r2, {r6, fp}
  4073ee:	ddf2      	ble.n	4073d6 <_svfprintf_r+0x972>
  4073f0:	aa25      	add	r2, sp, #148	; 0x94
  4073f2:	4629      	mov	r1, r5
  4073f4:	4620      	mov	r0, r4
  4073f6:	f004 facd 	bl	40b994 <__ssprint_r>
  4073fa:	2800      	cmp	r0, #0
  4073fc:	f47f ac04 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407400:	3f10      	subs	r7, #16
  407402:	2f10      	cmp	r7, #16
  407404:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407406:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407408:	464a      	mov	r2, r9
  40740a:	dce9      	bgt.n	4073e0 <_svfprintf_r+0x97c>
  40740c:	4635      	mov	r5, r6
  40740e:	460c      	mov	r4, r1
  407410:	4646      	mov	r6, r8
  407412:	4690      	mov	r8, r2
  407414:	3301      	adds	r3, #1
  407416:	443c      	add	r4, r7
  407418:	2b07      	cmp	r3, #7
  40741a:	9427      	str	r4, [sp, #156]	; 0x9c
  40741c:	9326      	str	r3, [sp, #152]	; 0x98
  40741e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407422:	f300 8232 	bgt.w	40788a <_svfprintf_r+0xe26>
  407426:	f108 0808 	add.w	r8, r8, #8
  40742a:	e4ac      	b.n	406d86 <_svfprintf_r+0x322>
  40742c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40742e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407430:	2b01      	cmp	r3, #1
  407432:	f340 81fe 	ble.w	407832 <_svfprintf_r+0xdce>
  407436:	3701      	adds	r7, #1
  407438:	3401      	adds	r4, #1
  40743a:	2301      	movs	r3, #1
  40743c:	2f07      	cmp	r7, #7
  40743e:	9427      	str	r4, [sp, #156]	; 0x9c
  407440:	9726      	str	r7, [sp, #152]	; 0x98
  407442:	f8c8 6000 	str.w	r6, [r8]
  407446:	f8c8 3004 	str.w	r3, [r8, #4]
  40744a:	f300 8203 	bgt.w	407854 <_svfprintf_r+0xdf0>
  40744e:	f108 0808 	add.w	r8, r8, #8
  407452:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407454:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  407456:	f8c8 3000 	str.w	r3, [r8]
  40745a:	3701      	adds	r7, #1
  40745c:	4414      	add	r4, r2
  40745e:	2f07      	cmp	r7, #7
  407460:	9427      	str	r4, [sp, #156]	; 0x9c
  407462:	9726      	str	r7, [sp, #152]	; 0x98
  407464:	f8c8 2004 	str.w	r2, [r8, #4]
  407468:	f300 8200 	bgt.w	40786c <_svfprintf_r+0xe08>
  40746c:	f108 0808 	add.w	r8, r8, #8
  407470:	a815      	add	r0, sp, #84	; 0x54
  407472:	c80d      	ldmia	r0, {r0, r2, r3}
  407474:	9914      	ldr	r1, [sp, #80]	; 0x50
  407476:	f005 f929 	bl	40c6cc <__aeabi_dcmpeq>
  40747a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40747c:	2800      	cmp	r0, #0
  40747e:	f040 8101 	bne.w	407684 <_svfprintf_r+0xc20>
  407482:	3b01      	subs	r3, #1
  407484:	3701      	adds	r7, #1
  407486:	3601      	adds	r6, #1
  407488:	441c      	add	r4, r3
  40748a:	2f07      	cmp	r7, #7
  40748c:	9726      	str	r7, [sp, #152]	; 0x98
  40748e:	9427      	str	r4, [sp, #156]	; 0x9c
  407490:	f8c8 6000 	str.w	r6, [r8]
  407494:	f8c8 3004 	str.w	r3, [r8, #4]
  407498:	f300 8127 	bgt.w	4076ea <_svfprintf_r+0xc86>
  40749c:	f108 0808 	add.w	r8, r8, #8
  4074a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4074a2:	f8c8 2004 	str.w	r2, [r8, #4]
  4074a6:	3701      	adds	r7, #1
  4074a8:	4414      	add	r4, r2
  4074aa:	ab21      	add	r3, sp, #132	; 0x84
  4074ac:	2f07      	cmp	r7, #7
  4074ae:	9427      	str	r4, [sp, #156]	; 0x9c
  4074b0:	9726      	str	r7, [sp, #152]	; 0x98
  4074b2:	f8c8 3000 	str.w	r3, [r8]
  4074b6:	f77f acb3 	ble.w	406e20 <_svfprintf_r+0x3bc>
  4074ba:	aa25      	add	r2, sp, #148	; 0x94
  4074bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074c0:	f004 fa68 	bl	40b994 <__ssprint_r>
  4074c4:	2800      	cmp	r0, #0
  4074c6:	f47f ab9f 	bne.w	406c08 <_svfprintf_r+0x1a4>
  4074ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4074cc:	46c8      	mov	r8, r9
  4074ce:	e4a9      	b.n	406e24 <_svfprintf_r+0x3c0>
  4074d0:	aa25      	add	r2, sp, #148	; 0x94
  4074d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074d6:	f004 fa5d 	bl	40b994 <__ssprint_r>
  4074da:	2800      	cmp	r0, #0
  4074dc:	f43f aceb 	beq.w	406eb6 <_svfprintf_r+0x452>
  4074e0:	f7ff bb92 	b.w	406c08 <_svfprintf_r+0x1a4>
  4074e4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4074e8:	2b01      	cmp	r3, #1
  4074ea:	f000 8134 	beq.w	407756 <_svfprintf_r+0xcf2>
  4074ee:	2b02      	cmp	r3, #2
  4074f0:	d125      	bne.n	40753e <_svfprintf_r+0xada>
  4074f2:	f8cd b01c 	str.w	fp, [sp, #28]
  4074f6:	2400      	movs	r4, #0
  4074f8:	2500      	movs	r5, #0
  4074fa:	e61e      	b.n	40713a <_svfprintf_r+0x6d6>
  4074fc:	aa25      	add	r2, sp, #148	; 0x94
  4074fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407500:	980c      	ldr	r0, [sp, #48]	; 0x30
  407502:	f004 fa47 	bl	40b994 <__ssprint_r>
  407506:	2800      	cmp	r0, #0
  407508:	f47f ab7e 	bne.w	406c08 <_svfprintf_r+0x1a4>
  40750c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40750e:	46c8      	mov	r8, r9
  407510:	e475      	b.n	406dfe <_svfprintf_r+0x39a>
  407512:	aa25      	add	r2, sp, #148	; 0x94
  407514:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407516:	980c      	ldr	r0, [sp, #48]	; 0x30
  407518:	f004 fa3c 	bl	40b994 <__ssprint_r>
  40751c:	2800      	cmp	r0, #0
  40751e:	f47f ab73 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407522:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407524:	46c8      	mov	r8, r9
  407526:	e41b      	b.n	406d60 <_svfprintf_r+0x2fc>
  407528:	aa25      	add	r2, sp, #148	; 0x94
  40752a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40752c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40752e:	f004 fa31 	bl	40b994 <__ssprint_r>
  407532:	2800      	cmp	r0, #0
  407534:	f47f ab68 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407538:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40753a:	46c8      	mov	r8, r9
  40753c:	e420      	b.n	406d80 <_svfprintf_r+0x31c>
  40753e:	f8cd b01c 	str.w	fp, [sp, #28]
  407542:	2400      	movs	r4, #0
  407544:	2500      	movs	r5, #0
  407546:	4649      	mov	r1, r9
  407548:	e000      	b.n	40754c <_svfprintf_r+0xae8>
  40754a:	4631      	mov	r1, r6
  40754c:	08e2      	lsrs	r2, r4, #3
  40754e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407552:	08e8      	lsrs	r0, r5, #3
  407554:	f004 0307 	and.w	r3, r4, #7
  407558:	4605      	mov	r5, r0
  40755a:	4614      	mov	r4, r2
  40755c:	3330      	adds	r3, #48	; 0x30
  40755e:	ea54 0205 	orrs.w	r2, r4, r5
  407562:	f801 3c01 	strb.w	r3, [r1, #-1]
  407566:	f101 36ff 	add.w	r6, r1, #4294967295
  40756a:	d1ee      	bne.n	40754a <_svfprintf_r+0xae6>
  40756c:	9a07      	ldr	r2, [sp, #28]
  40756e:	07d2      	lsls	r2, r2, #31
  407570:	f57f adf3 	bpl.w	40715a <_svfprintf_r+0x6f6>
  407574:	2b30      	cmp	r3, #48	; 0x30
  407576:	f43f adf0 	beq.w	40715a <_svfprintf_r+0x6f6>
  40757a:	3902      	subs	r1, #2
  40757c:	2330      	movs	r3, #48	; 0x30
  40757e:	f806 3c01 	strb.w	r3, [r6, #-1]
  407582:	eba9 0301 	sub.w	r3, r9, r1
  407586:	930e      	str	r3, [sp, #56]	; 0x38
  407588:	460e      	mov	r6, r1
  40758a:	f7ff bb7b 	b.w	406c84 <_svfprintf_r+0x220>
  40758e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407590:	2900      	cmp	r1, #0
  407592:	f340 822e 	ble.w	4079f2 <_svfprintf_r+0xf8e>
  407596:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40759a:	4293      	cmp	r3, r2
  40759c:	bfa8      	it	ge
  40759e:	4613      	movge	r3, r2
  4075a0:	2b00      	cmp	r3, #0
  4075a2:	461f      	mov	r7, r3
  4075a4:	dd0d      	ble.n	4075c2 <_svfprintf_r+0xb5e>
  4075a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4075a8:	f8c8 6000 	str.w	r6, [r8]
  4075ac:	3301      	adds	r3, #1
  4075ae:	443c      	add	r4, r7
  4075b0:	2b07      	cmp	r3, #7
  4075b2:	9427      	str	r4, [sp, #156]	; 0x9c
  4075b4:	f8c8 7004 	str.w	r7, [r8, #4]
  4075b8:	9326      	str	r3, [sp, #152]	; 0x98
  4075ba:	f300 831f 	bgt.w	407bfc <_svfprintf_r+0x1198>
  4075be:	f108 0808 	add.w	r8, r8, #8
  4075c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4075c4:	2f00      	cmp	r7, #0
  4075c6:	bfa8      	it	ge
  4075c8:	1bdb      	subge	r3, r3, r7
  4075ca:	2b00      	cmp	r3, #0
  4075cc:	461f      	mov	r7, r3
  4075ce:	f340 80d6 	ble.w	40777e <_svfprintf_r+0xd1a>
  4075d2:	2f10      	cmp	r7, #16
  4075d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4075d6:	4d31      	ldr	r5, [pc, #196]	; (40769c <_svfprintf_r+0xc38>)
  4075d8:	f340 81ed 	ble.w	4079b6 <_svfprintf_r+0xf52>
  4075dc:	4642      	mov	r2, r8
  4075de:	4621      	mov	r1, r4
  4075e0:	46b0      	mov	r8, r6
  4075e2:	f04f 0b10 	mov.w	fp, #16
  4075e6:	462e      	mov	r6, r5
  4075e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4075ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4075ec:	e004      	b.n	4075f8 <_svfprintf_r+0xb94>
  4075ee:	3208      	adds	r2, #8
  4075f0:	3f10      	subs	r7, #16
  4075f2:	2f10      	cmp	r7, #16
  4075f4:	f340 81db 	ble.w	4079ae <_svfprintf_r+0xf4a>
  4075f8:	3301      	adds	r3, #1
  4075fa:	3110      	adds	r1, #16
  4075fc:	2b07      	cmp	r3, #7
  4075fe:	9127      	str	r1, [sp, #156]	; 0x9c
  407600:	9326      	str	r3, [sp, #152]	; 0x98
  407602:	e882 0840 	stmia.w	r2, {r6, fp}
  407606:	ddf2      	ble.n	4075ee <_svfprintf_r+0xb8a>
  407608:	aa25      	add	r2, sp, #148	; 0x94
  40760a:	4629      	mov	r1, r5
  40760c:	4620      	mov	r0, r4
  40760e:	f004 f9c1 	bl	40b994 <__ssprint_r>
  407612:	2800      	cmp	r0, #0
  407614:	f47f aaf8 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407618:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40761a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40761c:	464a      	mov	r2, r9
  40761e:	e7e7      	b.n	4075f0 <_svfprintf_r+0xb8c>
  407620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407622:	930e      	str	r3, [sp, #56]	; 0x38
  407624:	464e      	mov	r6, r9
  407626:	f7ff bb2d 	b.w	406c84 <_svfprintf_r+0x220>
  40762a:	2d00      	cmp	r5, #0
  40762c:	bf08      	it	eq
  40762e:	2c0a      	cmpeq	r4, #10
  407630:	f0c0 808f 	bcc.w	407752 <_svfprintf_r+0xcee>
  407634:	464e      	mov	r6, r9
  407636:	4620      	mov	r0, r4
  407638:	4629      	mov	r1, r5
  40763a:	220a      	movs	r2, #10
  40763c:	2300      	movs	r3, #0
  40763e:	f005 f8b5 	bl	40c7ac <__aeabi_uldivmod>
  407642:	3230      	adds	r2, #48	; 0x30
  407644:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407648:	4620      	mov	r0, r4
  40764a:	4629      	mov	r1, r5
  40764c:	2300      	movs	r3, #0
  40764e:	220a      	movs	r2, #10
  407650:	f005 f8ac 	bl	40c7ac <__aeabi_uldivmod>
  407654:	4604      	mov	r4, r0
  407656:	460d      	mov	r5, r1
  407658:	ea54 0305 	orrs.w	r3, r4, r5
  40765c:	d1eb      	bne.n	407636 <_svfprintf_r+0xbd2>
  40765e:	eba9 0306 	sub.w	r3, r9, r6
  407662:	930e      	str	r3, [sp, #56]	; 0x38
  407664:	f7ff bb0e 	b.w	406c84 <_svfprintf_r+0x220>
  407668:	aa25      	add	r2, sp, #148	; 0x94
  40766a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40766c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40766e:	f004 f991 	bl	40b994 <__ssprint_r>
  407672:	2800      	cmp	r0, #0
  407674:	f47f aac8 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407678:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40767c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40767e:	46c8      	mov	r8, r9
  407680:	f7ff bb5e 	b.w	406d40 <_svfprintf_r+0x2dc>
  407684:	1e5e      	subs	r6, r3, #1
  407686:	2e00      	cmp	r6, #0
  407688:	f77f af0a 	ble.w	4074a0 <_svfprintf_r+0xa3c>
  40768c:	2e10      	cmp	r6, #16
  40768e:	4d03      	ldr	r5, [pc, #12]	; (40769c <_svfprintf_r+0xc38>)
  407690:	dd22      	ble.n	4076d8 <_svfprintf_r+0xc74>
  407692:	4622      	mov	r2, r4
  407694:	f04f 0b10 	mov.w	fp, #16
  407698:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40769a:	e006      	b.n	4076aa <_svfprintf_r+0xc46>
  40769c:	0040db14 	.word	0x0040db14
  4076a0:	3e10      	subs	r6, #16
  4076a2:	2e10      	cmp	r6, #16
  4076a4:	f108 0808 	add.w	r8, r8, #8
  4076a8:	dd15      	ble.n	4076d6 <_svfprintf_r+0xc72>
  4076aa:	3701      	adds	r7, #1
  4076ac:	3210      	adds	r2, #16
  4076ae:	2f07      	cmp	r7, #7
  4076b0:	9227      	str	r2, [sp, #156]	; 0x9c
  4076b2:	9726      	str	r7, [sp, #152]	; 0x98
  4076b4:	e888 0820 	stmia.w	r8, {r5, fp}
  4076b8:	ddf2      	ble.n	4076a0 <_svfprintf_r+0xc3c>
  4076ba:	aa25      	add	r2, sp, #148	; 0x94
  4076bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076be:	4620      	mov	r0, r4
  4076c0:	f004 f968 	bl	40b994 <__ssprint_r>
  4076c4:	2800      	cmp	r0, #0
  4076c6:	f47f aa9f 	bne.w	406c08 <_svfprintf_r+0x1a4>
  4076ca:	3e10      	subs	r6, #16
  4076cc:	2e10      	cmp	r6, #16
  4076ce:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4076d0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4076d2:	46c8      	mov	r8, r9
  4076d4:	dce9      	bgt.n	4076aa <_svfprintf_r+0xc46>
  4076d6:	4614      	mov	r4, r2
  4076d8:	3701      	adds	r7, #1
  4076da:	4434      	add	r4, r6
  4076dc:	2f07      	cmp	r7, #7
  4076de:	9427      	str	r4, [sp, #156]	; 0x9c
  4076e0:	9726      	str	r7, [sp, #152]	; 0x98
  4076e2:	e888 0060 	stmia.w	r8, {r5, r6}
  4076e6:	f77f aed9 	ble.w	40749c <_svfprintf_r+0xa38>
  4076ea:	aa25      	add	r2, sp, #148	; 0x94
  4076ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4076f0:	f004 f950 	bl	40b994 <__ssprint_r>
  4076f4:	2800      	cmp	r0, #0
  4076f6:	f47f aa87 	bne.w	406c08 <_svfprintf_r+0x1a4>
  4076fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4076fc:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4076fe:	46c8      	mov	r8, r9
  407700:	e6ce      	b.n	4074a0 <_svfprintf_r+0xa3c>
  407702:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407704:	6814      	ldr	r4, [r2, #0]
  407706:	4613      	mov	r3, r2
  407708:	3304      	adds	r3, #4
  40770a:	17e5      	asrs	r5, r4, #31
  40770c:	930f      	str	r3, [sp, #60]	; 0x3c
  40770e:	4622      	mov	r2, r4
  407710:	462b      	mov	r3, r5
  407712:	e4fa      	b.n	40710a <_svfprintf_r+0x6a6>
  407714:	3204      	adds	r2, #4
  407716:	681c      	ldr	r4, [r3, #0]
  407718:	920f      	str	r2, [sp, #60]	; 0x3c
  40771a:	2301      	movs	r3, #1
  40771c:	2500      	movs	r5, #0
  40771e:	f7ff ba94 	b.w	406c4a <_svfprintf_r+0x1e6>
  407722:	681c      	ldr	r4, [r3, #0]
  407724:	3304      	adds	r3, #4
  407726:	930f      	str	r3, [sp, #60]	; 0x3c
  407728:	2500      	movs	r5, #0
  40772a:	e421      	b.n	406f70 <_svfprintf_r+0x50c>
  40772c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40772e:	460a      	mov	r2, r1
  407730:	3204      	adds	r2, #4
  407732:	680c      	ldr	r4, [r1, #0]
  407734:	920f      	str	r2, [sp, #60]	; 0x3c
  407736:	2500      	movs	r5, #0
  407738:	f7ff ba87 	b.w	406c4a <_svfprintf_r+0x1e6>
  40773c:	4614      	mov	r4, r2
  40773e:	3301      	adds	r3, #1
  407740:	4434      	add	r4, r6
  407742:	2b07      	cmp	r3, #7
  407744:	9427      	str	r4, [sp, #156]	; 0x9c
  407746:	9326      	str	r3, [sp, #152]	; 0x98
  407748:	e888 0060 	stmia.w	r8, {r5, r6}
  40774c:	f77f ab68 	ble.w	406e20 <_svfprintf_r+0x3bc>
  407750:	e6b3      	b.n	4074ba <_svfprintf_r+0xa56>
  407752:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407756:	f8cd b01c 	str.w	fp, [sp, #28]
  40775a:	ae42      	add	r6, sp, #264	; 0x108
  40775c:	3430      	adds	r4, #48	; 0x30
  40775e:	2301      	movs	r3, #1
  407760:	f806 4d41 	strb.w	r4, [r6, #-65]!
  407764:	930e      	str	r3, [sp, #56]	; 0x38
  407766:	f7ff ba8d 	b.w	406c84 <_svfprintf_r+0x220>
  40776a:	aa25      	add	r2, sp, #148	; 0x94
  40776c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40776e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407770:	f004 f910 	bl	40b994 <__ssprint_r>
  407774:	2800      	cmp	r0, #0
  407776:	f47f aa47 	bne.w	406c08 <_svfprintf_r+0x1a4>
  40777a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40777c:	46c8      	mov	r8, r9
  40777e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407782:	429a      	cmp	r2, r3
  407784:	db44      	blt.n	407810 <_svfprintf_r+0xdac>
  407786:	9b07      	ldr	r3, [sp, #28]
  407788:	07d9      	lsls	r1, r3, #31
  40778a:	d441      	bmi.n	407810 <_svfprintf_r+0xdac>
  40778c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40778e:	9812      	ldr	r0, [sp, #72]	; 0x48
  407790:	1a9a      	subs	r2, r3, r2
  407792:	1a1d      	subs	r5, r3, r0
  407794:	4295      	cmp	r5, r2
  407796:	bfa8      	it	ge
  407798:	4615      	movge	r5, r2
  40779a:	2d00      	cmp	r5, #0
  40779c:	dd0e      	ble.n	4077bc <_svfprintf_r+0xd58>
  40779e:	9926      	ldr	r1, [sp, #152]	; 0x98
  4077a0:	f8c8 5004 	str.w	r5, [r8, #4]
  4077a4:	3101      	adds	r1, #1
  4077a6:	4406      	add	r6, r0
  4077a8:	442c      	add	r4, r5
  4077aa:	2907      	cmp	r1, #7
  4077ac:	f8c8 6000 	str.w	r6, [r8]
  4077b0:	9427      	str	r4, [sp, #156]	; 0x9c
  4077b2:	9126      	str	r1, [sp, #152]	; 0x98
  4077b4:	f300 823b 	bgt.w	407c2e <_svfprintf_r+0x11ca>
  4077b8:	f108 0808 	add.w	r8, r8, #8
  4077bc:	2d00      	cmp	r5, #0
  4077be:	bfac      	ite	ge
  4077c0:	1b56      	subge	r6, r2, r5
  4077c2:	4616      	movlt	r6, r2
  4077c4:	2e00      	cmp	r6, #0
  4077c6:	f77f ab2d 	ble.w	406e24 <_svfprintf_r+0x3c0>
  4077ca:	2e10      	cmp	r6, #16
  4077cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4077ce:	4db0      	ldr	r5, [pc, #704]	; (407a90 <_svfprintf_r+0x102c>)
  4077d0:	ddb5      	ble.n	40773e <_svfprintf_r+0xcda>
  4077d2:	4622      	mov	r2, r4
  4077d4:	2710      	movs	r7, #16
  4077d6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4077da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4077dc:	e004      	b.n	4077e8 <_svfprintf_r+0xd84>
  4077de:	f108 0808 	add.w	r8, r8, #8
  4077e2:	3e10      	subs	r6, #16
  4077e4:	2e10      	cmp	r6, #16
  4077e6:	dda9      	ble.n	40773c <_svfprintf_r+0xcd8>
  4077e8:	3301      	adds	r3, #1
  4077ea:	3210      	adds	r2, #16
  4077ec:	2b07      	cmp	r3, #7
  4077ee:	9227      	str	r2, [sp, #156]	; 0x9c
  4077f0:	9326      	str	r3, [sp, #152]	; 0x98
  4077f2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4077f6:	ddf2      	ble.n	4077de <_svfprintf_r+0xd7a>
  4077f8:	aa25      	add	r2, sp, #148	; 0x94
  4077fa:	4621      	mov	r1, r4
  4077fc:	4658      	mov	r0, fp
  4077fe:	f004 f8c9 	bl	40b994 <__ssprint_r>
  407802:	2800      	cmp	r0, #0
  407804:	f47f aa00 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407808:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40780a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40780c:	46c8      	mov	r8, r9
  40780e:	e7e8      	b.n	4077e2 <_svfprintf_r+0xd7e>
  407810:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407812:	9819      	ldr	r0, [sp, #100]	; 0x64
  407814:	991a      	ldr	r1, [sp, #104]	; 0x68
  407816:	f8c8 1000 	str.w	r1, [r8]
  40781a:	3301      	adds	r3, #1
  40781c:	4404      	add	r4, r0
  40781e:	2b07      	cmp	r3, #7
  407820:	9427      	str	r4, [sp, #156]	; 0x9c
  407822:	f8c8 0004 	str.w	r0, [r8, #4]
  407826:	9326      	str	r3, [sp, #152]	; 0x98
  407828:	f300 81f5 	bgt.w	407c16 <_svfprintf_r+0x11b2>
  40782c:	f108 0808 	add.w	r8, r8, #8
  407830:	e7ac      	b.n	40778c <_svfprintf_r+0xd28>
  407832:	9b07      	ldr	r3, [sp, #28]
  407834:	07da      	lsls	r2, r3, #31
  407836:	f53f adfe 	bmi.w	407436 <_svfprintf_r+0x9d2>
  40783a:	3701      	adds	r7, #1
  40783c:	3401      	adds	r4, #1
  40783e:	2301      	movs	r3, #1
  407840:	2f07      	cmp	r7, #7
  407842:	9427      	str	r4, [sp, #156]	; 0x9c
  407844:	9726      	str	r7, [sp, #152]	; 0x98
  407846:	f8c8 6000 	str.w	r6, [r8]
  40784a:	f8c8 3004 	str.w	r3, [r8, #4]
  40784e:	f77f ae25 	ble.w	40749c <_svfprintf_r+0xa38>
  407852:	e74a      	b.n	4076ea <_svfprintf_r+0xc86>
  407854:	aa25      	add	r2, sp, #148	; 0x94
  407856:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407858:	980c      	ldr	r0, [sp, #48]	; 0x30
  40785a:	f004 f89b 	bl	40b994 <__ssprint_r>
  40785e:	2800      	cmp	r0, #0
  407860:	f47f a9d2 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407864:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407866:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407868:	46c8      	mov	r8, r9
  40786a:	e5f2      	b.n	407452 <_svfprintf_r+0x9ee>
  40786c:	aa25      	add	r2, sp, #148	; 0x94
  40786e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407870:	980c      	ldr	r0, [sp, #48]	; 0x30
  407872:	f004 f88f 	bl	40b994 <__ssprint_r>
  407876:	2800      	cmp	r0, #0
  407878:	f47f a9c6 	bne.w	406c08 <_svfprintf_r+0x1a4>
  40787c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40787e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407880:	46c8      	mov	r8, r9
  407882:	e5f5      	b.n	407470 <_svfprintf_r+0xa0c>
  407884:	464e      	mov	r6, r9
  407886:	f7ff b9fd 	b.w	406c84 <_svfprintf_r+0x220>
  40788a:	aa25      	add	r2, sp, #148	; 0x94
  40788c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40788e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407890:	f004 f880 	bl	40b994 <__ssprint_r>
  407894:	2800      	cmp	r0, #0
  407896:	f47f a9b7 	bne.w	406c08 <_svfprintf_r+0x1a4>
  40789a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40789c:	46c8      	mov	r8, r9
  40789e:	f7ff ba72 	b.w	406d86 <_svfprintf_r+0x322>
  4078a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4078a4:	4622      	mov	r2, r4
  4078a6:	4620      	mov	r0, r4
  4078a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4078aa:	4623      	mov	r3, r4
  4078ac:	4621      	mov	r1, r4
  4078ae:	f004 ff3f 	bl	40c730 <__aeabi_dcmpun>
  4078b2:	2800      	cmp	r0, #0
  4078b4:	f040 8286 	bne.w	407dc4 <_svfprintf_r+0x1360>
  4078b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4078ba:	3301      	adds	r3, #1
  4078bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4078be:	f023 0320 	bic.w	r3, r3, #32
  4078c2:	930e      	str	r3, [sp, #56]	; 0x38
  4078c4:	f000 81e2 	beq.w	407c8c <_svfprintf_r+0x1228>
  4078c8:	2b47      	cmp	r3, #71	; 0x47
  4078ca:	f000 811e 	beq.w	407b0a <_svfprintf_r+0x10a6>
  4078ce:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4078d2:	9307      	str	r3, [sp, #28]
  4078d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4078d6:	1e1f      	subs	r7, r3, #0
  4078d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4078da:	9308      	str	r3, [sp, #32]
  4078dc:	bfbb      	ittet	lt
  4078de:	463b      	movlt	r3, r7
  4078e0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4078e4:	2300      	movge	r3, #0
  4078e6:	232d      	movlt	r3, #45	; 0x2d
  4078e8:	9310      	str	r3, [sp, #64]	; 0x40
  4078ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4078ec:	2b66      	cmp	r3, #102	; 0x66
  4078ee:	f000 81bb 	beq.w	407c68 <_svfprintf_r+0x1204>
  4078f2:	2b46      	cmp	r3, #70	; 0x46
  4078f4:	f000 80df 	beq.w	407ab6 <_svfprintf_r+0x1052>
  4078f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4078fa:	9a08      	ldr	r2, [sp, #32]
  4078fc:	2b45      	cmp	r3, #69	; 0x45
  4078fe:	bf0c      	ite	eq
  407900:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  407902:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  407904:	a823      	add	r0, sp, #140	; 0x8c
  407906:	a920      	add	r1, sp, #128	; 0x80
  407908:	bf08      	it	eq
  40790a:	1c5d      	addeq	r5, r3, #1
  40790c:	9004      	str	r0, [sp, #16]
  40790e:	9103      	str	r1, [sp, #12]
  407910:	a81f      	add	r0, sp, #124	; 0x7c
  407912:	2102      	movs	r1, #2
  407914:	463b      	mov	r3, r7
  407916:	9002      	str	r0, [sp, #8]
  407918:	9501      	str	r5, [sp, #4]
  40791a:	9100      	str	r1, [sp, #0]
  40791c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40791e:	f001 faa3 	bl	408e68 <_dtoa_r>
  407922:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407924:	2b67      	cmp	r3, #103	; 0x67
  407926:	4606      	mov	r6, r0
  407928:	f040 81e0 	bne.w	407cec <_svfprintf_r+0x1288>
  40792c:	f01b 0f01 	tst.w	fp, #1
  407930:	f000 8246 	beq.w	407dc0 <_svfprintf_r+0x135c>
  407934:	1974      	adds	r4, r6, r5
  407936:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407938:	9808      	ldr	r0, [sp, #32]
  40793a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40793c:	4639      	mov	r1, r7
  40793e:	f004 fec5 	bl	40c6cc <__aeabi_dcmpeq>
  407942:	2800      	cmp	r0, #0
  407944:	f040 8165 	bne.w	407c12 <_svfprintf_r+0x11ae>
  407948:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40794a:	42a3      	cmp	r3, r4
  40794c:	d206      	bcs.n	40795c <_svfprintf_r+0xef8>
  40794e:	2130      	movs	r1, #48	; 0x30
  407950:	1c5a      	adds	r2, r3, #1
  407952:	9223      	str	r2, [sp, #140]	; 0x8c
  407954:	7019      	strb	r1, [r3, #0]
  407956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407958:	429c      	cmp	r4, r3
  40795a:	d8f9      	bhi.n	407950 <_svfprintf_r+0xeec>
  40795c:	1b9b      	subs	r3, r3, r6
  40795e:	9313      	str	r3, [sp, #76]	; 0x4c
  407960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407962:	2b47      	cmp	r3, #71	; 0x47
  407964:	f000 80e9 	beq.w	407b3a <_svfprintf_r+0x10d6>
  407968:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40796a:	2b65      	cmp	r3, #101	; 0x65
  40796c:	f340 81cd 	ble.w	407d0a <_svfprintf_r+0x12a6>
  407970:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407972:	2b66      	cmp	r3, #102	; 0x66
  407974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407976:	9312      	str	r3, [sp, #72]	; 0x48
  407978:	f000 819e 	beq.w	407cb8 <_svfprintf_r+0x1254>
  40797c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40797e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407980:	4619      	mov	r1, r3
  407982:	4291      	cmp	r1, r2
  407984:	f300 818a 	bgt.w	407c9c <_svfprintf_r+0x1238>
  407988:	f01b 0f01 	tst.w	fp, #1
  40798c:	f040 8213 	bne.w	407db6 <_svfprintf_r+0x1352>
  407990:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407994:	9308      	str	r3, [sp, #32]
  407996:	2367      	movs	r3, #103	; 0x67
  407998:	920e      	str	r2, [sp, #56]	; 0x38
  40799a:	9311      	str	r3, [sp, #68]	; 0x44
  40799c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40799e:	2b00      	cmp	r3, #0
  4079a0:	f040 80c4 	bne.w	407b2c <_svfprintf_r+0x10c8>
  4079a4:	930a      	str	r3, [sp, #40]	; 0x28
  4079a6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4079aa:	f7ff b973 	b.w	406c94 <_svfprintf_r+0x230>
  4079ae:	4635      	mov	r5, r6
  4079b0:	460c      	mov	r4, r1
  4079b2:	4646      	mov	r6, r8
  4079b4:	4690      	mov	r8, r2
  4079b6:	3301      	adds	r3, #1
  4079b8:	443c      	add	r4, r7
  4079ba:	2b07      	cmp	r3, #7
  4079bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4079be:	9326      	str	r3, [sp, #152]	; 0x98
  4079c0:	e888 00a0 	stmia.w	r8, {r5, r7}
  4079c4:	f73f aed1 	bgt.w	40776a <_svfprintf_r+0xd06>
  4079c8:	f108 0808 	add.w	r8, r8, #8
  4079cc:	e6d7      	b.n	40777e <_svfprintf_r+0xd1a>
  4079ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4079d0:	6813      	ldr	r3, [r2, #0]
  4079d2:	3204      	adds	r2, #4
  4079d4:	920f      	str	r2, [sp, #60]	; 0x3c
  4079d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4079d8:	601a      	str	r2, [r3, #0]
  4079da:	f7ff b86a 	b.w	406ab2 <_svfprintf_r+0x4e>
  4079de:	aa25      	add	r2, sp, #148	; 0x94
  4079e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079e4:	f003 ffd6 	bl	40b994 <__ssprint_r>
  4079e8:	2800      	cmp	r0, #0
  4079ea:	f47f a90d 	bne.w	406c08 <_svfprintf_r+0x1a4>
  4079ee:	46c8      	mov	r8, r9
  4079f0:	e48d      	b.n	40730e <_svfprintf_r+0x8aa>
  4079f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079f4:	4a27      	ldr	r2, [pc, #156]	; (407a94 <_svfprintf_r+0x1030>)
  4079f6:	f8c8 2000 	str.w	r2, [r8]
  4079fa:	3301      	adds	r3, #1
  4079fc:	3401      	adds	r4, #1
  4079fe:	2201      	movs	r2, #1
  407a00:	2b07      	cmp	r3, #7
  407a02:	9427      	str	r4, [sp, #156]	; 0x9c
  407a04:	9326      	str	r3, [sp, #152]	; 0x98
  407a06:	f8c8 2004 	str.w	r2, [r8, #4]
  407a0a:	dc72      	bgt.n	407af2 <_svfprintf_r+0x108e>
  407a0c:	f108 0808 	add.w	r8, r8, #8
  407a10:	b929      	cbnz	r1, 407a1e <_svfprintf_r+0xfba>
  407a12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407a14:	b91b      	cbnz	r3, 407a1e <_svfprintf_r+0xfba>
  407a16:	9b07      	ldr	r3, [sp, #28]
  407a18:	07d8      	lsls	r0, r3, #31
  407a1a:	f57f aa03 	bpl.w	406e24 <_svfprintf_r+0x3c0>
  407a1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a20:	9819      	ldr	r0, [sp, #100]	; 0x64
  407a22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407a24:	f8c8 2000 	str.w	r2, [r8]
  407a28:	3301      	adds	r3, #1
  407a2a:	4602      	mov	r2, r0
  407a2c:	4422      	add	r2, r4
  407a2e:	2b07      	cmp	r3, #7
  407a30:	9227      	str	r2, [sp, #156]	; 0x9c
  407a32:	f8c8 0004 	str.w	r0, [r8, #4]
  407a36:	9326      	str	r3, [sp, #152]	; 0x98
  407a38:	f300 818d 	bgt.w	407d56 <_svfprintf_r+0x12f2>
  407a3c:	f108 0808 	add.w	r8, r8, #8
  407a40:	2900      	cmp	r1, #0
  407a42:	f2c0 8165 	blt.w	407d10 <_svfprintf_r+0x12ac>
  407a46:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407a48:	f8c8 6000 	str.w	r6, [r8]
  407a4c:	3301      	adds	r3, #1
  407a4e:	188c      	adds	r4, r1, r2
  407a50:	2b07      	cmp	r3, #7
  407a52:	9427      	str	r4, [sp, #156]	; 0x9c
  407a54:	9326      	str	r3, [sp, #152]	; 0x98
  407a56:	f8c8 1004 	str.w	r1, [r8, #4]
  407a5a:	f77f a9e1 	ble.w	406e20 <_svfprintf_r+0x3bc>
  407a5e:	e52c      	b.n	4074ba <_svfprintf_r+0xa56>
  407a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407a62:	9909      	ldr	r1, [sp, #36]	; 0x24
  407a64:	6813      	ldr	r3, [r2, #0]
  407a66:	17cd      	asrs	r5, r1, #31
  407a68:	4608      	mov	r0, r1
  407a6a:	3204      	adds	r2, #4
  407a6c:	4629      	mov	r1, r5
  407a6e:	920f      	str	r2, [sp, #60]	; 0x3c
  407a70:	e9c3 0100 	strd	r0, r1, [r3]
  407a74:	f7ff b81d 	b.w	406ab2 <_svfprintf_r+0x4e>
  407a78:	aa25      	add	r2, sp, #148	; 0x94
  407a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a7e:	f003 ff89 	bl	40b994 <__ssprint_r>
  407a82:	2800      	cmp	r0, #0
  407a84:	f47f a8c0 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407a88:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a8a:	46c8      	mov	r8, r9
  407a8c:	e458      	b.n	407340 <_svfprintf_r+0x8dc>
  407a8e:	bf00      	nop
  407a90:	0040db14 	.word	0x0040db14
  407a94:	0040db00 	.word	0x0040db00
  407a98:	2140      	movs	r1, #64	; 0x40
  407a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a9c:	f002 fe58 	bl	40a750 <_malloc_r>
  407aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407aa2:	6010      	str	r0, [r2, #0]
  407aa4:	6110      	str	r0, [r2, #16]
  407aa6:	2800      	cmp	r0, #0
  407aa8:	f000 81f2 	beq.w	407e90 <_svfprintf_r+0x142c>
  407aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407aae:	2340      	movs	r3, #64	; 0x40
  407ab0:	6153      	str	r3, [r2, #20]
  407ab2:	f7fe bfee 	b.w	406a92 <_svfprintf_r+0x2e>
  407ab6:	a823      	add	r0, sp, #140	; 0x8c
  407ab8:	a920      	add	r1, sp, #128	; 0x80
  407aba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407abc:	9004      	str	r0, [sp, #16]
  407abe:	9103      	str	r1, [sp, #12]
  407ac0:	a81f      	add	r0, sp, #124	; 0x7c
  407ac2:	2103      	movs	r1, #3
  407ac4:	9002      	str	r0, [sp, #8]
  407ac6:	9a08      	ldr	r2, [sp, #32]
  407ac8:	9401      	str	r4, [sp, #4]
  407aca:	463b      	mov	r3, r7
  407acc:	9100      	str	r1, [sp, #0]
  407ace:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ad0:	f001 f9ca 	bl	408e68 <_dtoa_r>
  407ad4:	4625      	mov	r5, r4
  407ad6:	4606      	mov	r6, r0
  407ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407ada:	2b46      	cmp	r3, #70	; 0x46
  407adc:	eb06 0405 	add.w	r4, r6, r5
  407ae0:	f47f af29 	bne.w	407936 <_svfprintf_r+0xed2>
  407ae4:	7833      	ldrb	r3, [r6, #0]
  407ae6:	2b30      	cmp	r3, #48	; 0x30
  407ae8:	f000 8178 	beq.w	407ddc <_svfprintf_r+0x1378>
  407aec:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407aee:	442c      	add	r4, r5
  407af0:	e721      	b.n	407936 <_svfprintf_r+0xed2>
  407af2:	aa25      	add	r2, sp, #148	; 0x94
  407af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407af6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407af8:	f003 ff4c 	bl	40b994 <__ssprint_r>
  407afc:	2800      	cmp	r0, #0
  407afe:	f47f a883 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407b02:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407b04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407b06:	46c8      	mov	r8, r9
  407b08:	e782      	b.n	407a10 <_svfprintf_r+0xfac>
  407b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b0c:	2b00      	cmp	r3, #0
  407b0e:	bf08      	it	eq
  407b10:	2301      	moveq	r3, #1
  407b12:	930a      	str	r3, [sp, #40]	; 0x28
  407b14:	e6db      	b.n	4078ce <_svfprintf_r+0xe6a>
  407b16:	4630      	mov	r0, r6
  407b18:	940a      	str	r4, [sp, #40]	; 0x28
  407b1a:	f7fe fcd1 	bl	4064c0 <strlen>
  407b1e:	950f      	str	r5, [sp, #60]	; 0x3c
  407b20:	900e      	str	r0, [sp, #56]	; 0x38
  407b22:	f8cd b01c 	str.w	fp, [sp, #28]
  407b26:	4603      	mov	r3, r0
  407b28:	f7ff b9f9 	b.w	406f1e <_svfprintf_r+0x4ba>
  407b2c:	272d      	movs	r7, #45	; 0x2d
  407b2e:	2300      	movs	r3, #0
  407b30:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407b34:	930a      	str	r3, [sp, #40]	; 0x28
  407b36:	f7ff b8ae 	b.w	406c96 <_svfprintf_r+0x232>
  407b3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407b3c:	9312      	str	r3, [sp, #72]	; 0x48
  407b3e:	461a      	mov	r2, r3
  407b40:	3303      	adds	r3, #3
  407b42:	db04      	blt.n	407b4e <_svfprintf_r+0x10ea>
  407b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b46:	4619      	mov	r1, r3
  407b48:	4291      	cmp	r1, r2
  407b4a:	f6bf af17 	bge.w	40797c <_svfprintf_r+0xf18>
  407b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407b50:	3b02      	subs	r3, #2
  407b52:	9311      	str	r3, [sp, #68]	; 0x44
  407b54:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407b58:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407b5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407b5e:	3b01      	subs	r3, #1
  407b60:	2b00      	cmp	r3, #0
  407b62:	931f      	str	r3, [sp, #124]	; 0x7c
  407b64:	bfbd      	ittte	lt
  407b66:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407b68:	f1c3 0301 	rsblt	r3, r3, #1
  407b6c:	222d      	movlt	r2, #45	; 0x2d
  407b6e:	222b      	movge	r2, #43	; 0x2b
  407b70:	2b09      	cmp	r3, #9
  407b72:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  407b76:	f340 8116 	ble.w	407da6 <_svfprintf_r+0x1342>
  407b7a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407b7e:	4620      	mov	r0, r4
  407b80:	4dab      	ldr	r5, [pc, #684]	; (407e30 <_svfprintf_r+0x13cc>)
  407b82:	e000      	b.n	407b86 <_svfprintf_r+0x1122>
  407b84:	4610      	mov	r0, r2
  407b86:	fb85 1203 	smull	r1, r2, r5, r3
  407b8a:	17d9      	asrs	r1, r3, #31
  407b8c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407b90:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407b94:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407b98:	3230      	adds	r2, #48	; 0x30
  407b9a:	2909      	cmp	r1, #9
  407b9c:	f800 2c01 	strb.w	r2, [r0, #-1]
  407ba0:	460b      	mov	r3, r1
  407ba2:	f100 32ff 	add.w	r2, r0, #4294967295
  407ba6:	dced      	bgt.n	407b84 <_svfprintf_r+0x1120>
  407ba8:	3330      	adds	r3, #48	; 0x30
  407baa:	3802      	subs	r0, #2
  407bac:	b2d9      	uxtb	r1, r3
  407bae:	4284      	cmp	r4, r0
  407bb0:	f802 1c01 	strb.w	r1, [r2, #-1]
  407bb4:	f240 8165 	bls.w	407e82 <_svfprintf_r+0x141e>
  407bb8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407bbc:	4613      	mov	r3, r2
  407bbe:	e001      	b.n	407bc4 <_svfprintf_r+0x1160>
  407bc0:	f813 1b01 	ldrb.w	r1, [r3], #1
  407bc4:	f800 1b01 	strb.w	r1, [r0], #1
  407bc8:	42a3      	cmp	r3, r4
  407bca:	d1f9      	bne.n	407bc0 <_svfprintf_r+0x115c>
  407bcc:	3301      	adds	r3, #1
  407bce:	1a9b      	subs	r3, r3, r2
  407bd0:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  407bd4:	4413      	add	r3, r2
  407bd6:	aa21      	add	r2, sp, #132	; 0x84
  407bd8:	1a9b      	subs	r3, r3, r2
  407bda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407bdc:	931b      	str	r3, [sp, #108]	; 0x6c
  407bde:	2a01      	cmp	r2, #1
  407be0:	4413      	add	r3, r2
  407be2:	930e      	str	r3, [sp, #56]	; 0x38
  407be4:	f340 8119 	ble.w	407e1a <_svfprintf_r+0x13b6>
  407be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407bea:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407bec:	4413      	add	r3, r2
  407bee:	930e      	str	r3, [sp, #56]	; 0x38
  407bf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407bf4:	9308      	str	r3, [sp, #32]
  407bf6:	2300      	movs	r3, #0
  407bf8:	9312      	str	r3, [sp, #72]	; 0x48
  407bfa:	e6cf      	b.n	40799c <_svfprintf_r+0xf38>
  407bfc:	aa25      	add	r2, sp, #148	; 0x94
  407bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c00:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c02:	f003 fec7 	bl	40b994 <__ssprint_r>
  407c06:	2800      	cmp	r0, #0
  407c08:	f47e affe 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407c0c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c0e:	46c8      	mov	r8, r9
  407c10:	e4d7      	b.n	4075c2 <_svfprintf_r+0xb5e>
  407c12:	4623      	mov	r3, r4
  407c14:	e6a2      	b.n	40795c <_svfprintf_r+0xef8>
  407c16:	aa25      	add	r2, sp, #148	; 0x94
  407c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c1c:	f003 feba 	bl	40b994 <__ssprint_r>
  407c20:	2800      	cmp	r0, #0
  407c22:	f47e aff1 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407c26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407c28:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c2a:	46c8      	mov	r8, r9
  407c2c:	e5ae      	b.n	40778c <_svfprintf_r+0xd28>
  407c2e:	aa25      	add	r2, sp, #148	; 0x94
  407c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c32:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c34:	f003 feae 	bl	40b994 <__ssprint_r>
  407c38:	2800      	cmp	r0, #0
  407c3a:	f47e afe5 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407c3e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407c42:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c44:	1a9a      	subs	r2, r3, r2
  407c46:	46c8      	mov	r8, r9
  407c48:	e5b8      	b.n	4077bc <_svfprintf_r+0xd58>
  407c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c4c:	9612      	str	r6, [sp, #72]	; 0x48
  407c4e:	2b06      	cmp	r3, #6
  407c50:	bf28      	it	cs
  407c52:	2306      	movcs	r3, #6
  407c54:	960a      	str	r6, [sp, #40]	; 0x28
  407c56:	4637      	mov	r7, r6
  407c58:	9308      	str	r3, [sp, #32]
  407c5a:	950f      	str	r5, [sp, #60]	; 0x3c
  407c5c:	f8cd b01c 	str.w	fp, [sp, #28]
  407c60:	930e      	str	r3, [sp, #56]	; 0x38
  407c62:	4e74      	ldr	r6, [pc, #464]	; (407e34 <_svfprintf_r+0x13d0>)
  407c64:	f7ff b816 	b.w	406c94 <_svfprintf_r+0x230>
  407c68:	a823      	add	r0, sp, #140	; 0x8c
  407c6a:	a920      	add	r1, sp, #128	; 0x80
  407c6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407c6e:	9004      	str	r0, [sp, #16]
  407c70:	9103      	str	r1, [sp, #12]
  407c72:	a81f      	add	r0, sp, #124	; 0x7c
  407c74:	2103      	movs	r1, #3
  407c76:	9002      	str	r0, [sp, #8]
  407c78:	9a08      	ldr	r2, [sp, #32]
  407c7a:	9501      	str	r5, [sp, #4]
  407c7c:	463b      	mov	r3, r7
  407c7e:	9100      	str	r1, [sp, #0]
  407c80:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c82:	f001 f8f1 	bl	408e68 <_dtoa_r>
  407c86:	4606      	mov	r6, r0
  407c88:	1944      	adds	r4, r0, r5
  407c8a:	e72b      	b.n	407ae4 <_svfprintf_r+0x1080>
  407c8c:	2306      	movs	r3, #6
  407c8e:	930a      	str	r3, [sp, #40]	; 0x28
  407c90:	e61d      	b.n	4078ce <_svfprintf_r+0xe6a>
  407c92:	272d      	movs	r7, #45	; 0x2d
  407c94:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407c98:	f7ff bacd 	b.w	407236 <_svfprintf_r+0x7d2>
  407c9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407c9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407ca0:	4413      	add	r3, r2
  407ca2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407ca4:	930e      	str	r3, [sp, #56]	; 0x38
  407ca6:	2a00      	cmp	r2, #0
  407ca8:	f340 80b0 	ble.w	407e0c <_svfprintf_r+0x13a8>
  407cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407cb0:	9308      	str	r3, [sp, #32]
  407cb2:	2367      	movs	r3, #103	; 0x67
  407cb4:	9311      	str	r3, [sp, #68]	; 0x44
  407cb6:	e671      	b.n	40799c <_svfprintf_r+0xf38>
  407cb8:	2b00      	cmp	r3, #0
  407cba:	f340 80c3 	ble.w	407e44 <_svfprintf_r+0x13e0>
  407cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407cc0:	2a00      	cmp	r2, #0
  407cc2:	f040 8099 	bne.w	407df8 <_svfprintf_r+0x1394>
  407cc6:	f01b 0f01 	tst.w	fp, #1
  407cca:	f040 8095 	bne.w	407df8 <_svfprintf_r+0x1394>
  407cce:	9308      	str	r3, [sp, #32]
  407cd0:	930e      	str	r3, [sp, #56]	; 0x38
  407cd2:	e663      	b.n	40799c <_svfprintf_r+0xf38>
  407cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cd6:	9308      	str	r3, [sp, #32]
  407cd8:	930e      	str	r3, [sp, #56]	; 0x38
  407cda:	900a      	str	r0, [sp, #40]	; 0x28
  407cdc:	950f      	str	r5, [sp, #60]	; 0x3c
  407cde:	f8cd b01c 	str.w	fp, [sp, #28]
  407ce2:	9012      	str	r0, [sp, #72]	; 0x48
  407ce4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407ce8:	f7fe bfd4 	b.w	406c94 <_svfprintf_r+0x230>
  407cec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407cee:	2b47      	cmp	r3, #71	; 0x47
  407cf0:	f47f ae20 	bne.w	407934 <_svfprintf_r+0xed0>
  407cf4:	f01b 0f01 	tst.w	fp, #1
  407cf8:	f47f aeee 	bne.w	407ad8 <_svfprintf_r+0x1074>
  407cfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407cfe:	1b9b      	subs	r3, r3, r6
  407d00:	9313      	str	r3, [sp, #76]	; 0x4c
  407d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d04:	2b47      	cmp	r3, #71	; 0x47
  407d06:	f43f af18 	beq.w	407b3a <_svfprintf_r+0x10d6>
  407d0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407d0c:	9312      	str	r3, [sp, #72]	; 0x48
  407d0e:	e721      	b.n	407b54 <_svfprintf_r+0x10f0>
  407d10:	424f      	negs	r7, r1
  407d12:	3110      	adds	r1, #16
  407d14:	4d48      	ldr	r5, [pc, #288]	; (407e38 <_svfprintf_r+0x13d4>)
  407d16:	da2f      	bge.n	407d78 <_svfprintf_r+0x1314>
  407d18:	2410      	movs	r4, #16
  407d1a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407d1e:	e004      	b.n	407d2a <_svfprintf_r+0x12c6>
  407d20:	f108 0808 	add.w	r8, r8, #8
  407d24:	3f10      	subs	r7, #16
  407d26:	2f10      	cmp	r7, #16
  407d28:	dd26      	ble.n	407d78 <_svfprintf_r+0x1314>
  407d2a:	3301      	adds	r3, #1
  407d2c:	3210      	adds	r2, #16
  407d2e:	2b07      	cmp	r3, #7
  407d30:	9227      	str	r2, [sp, #156]	; 0x9c
  407d32:	9326      	str	r3, [sp, #152]	; 0x98
  407d34:	f8c8 5000 	str.w	r5, [r8]
  407d38:	f8c8 4004 	str.w	r4, [r8, #4]
  407d3c:	ddf0      	ble.n	407d20 <_svfprintf_r+0x12bc>
  407d3e:	aa25      	add	r2, sp, #148	; 0x94
  407d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d42:	4658      	mov	r0, fp
  407d44:	f003 fe26 	bl	40b994 <__ssprint_r>
  407d48:	2800      	cmp	r0, #0
  407d4a:	f47e af5d 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407d4e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407d50:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407d52:	46c8      	mov	r8, r9
  407d54:	e7e6      	b.n	407d24 <_svfprintf_r+0x12c0>
  407d56:	aa25      	add	r2, sp, #148	; 0x94
  407d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d5a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d5c:	f003 fe1a 	bl	40b994 <__ssprint_r>
  407d60:	2800      	cmp	r0, #0
  407d62:	f47e af51 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407d66:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407d68:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407d6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407d6c:	46c8      	mov	r8, r9
  407d6e:	e667      	b.n	407a40 <_svfprintf_r+0xfdc>
  407d70:	2000      	movs	r0, #0
  407d72:	900a      	str	r0, [sp, #40]	; 0x28
  407d74:	f7fe bed0 	b.w	406b18 <_svfprintf_r+0xb4>
  407d78:	3301      	adds	r3, #1
  407d7a:	443a      	add	r2, r7
  407d7c:	2b07      	cmp	r3, #7
  407d7e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407d82:	9227      	str	r2, [sp, #156]	; 0x9c
  407d84:	9326      	str	r3, [sp, #152]	; 0x98
  407d86:	f108 0808 	add.w	r8, r8, #8
  407d8a:	f77f ae5c 	ble.w	407a46 <_svfprintf_r+0xfe2>
  407d8e:	aa25      	add	r2, sp, #148	; 0x94
  407d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d92:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d94:	f003 fdfe 	bl	40b994 <__ssprint_r>
  407d98:	2800      	cmp	r0, #0
  407d9a:	f47e af35 	bne.w	406c08 <_svfprintf_r+0x1a4>
  407d9e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407da0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407da2:	46c8      	mov	r8, r9
  407da4:	e64f      	b.n	407a46 <_svfprintf_r+0xfe2>
  407da6:	3330      	adds	r3, #48	; 0x30
  407da8:	2230      	movs	r2, #48	; 0x30
  407daa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407dae:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407db2:	ab22      	add	r3, sp, #136	; 0x88
  407db4:	e70f      	b.n	407bd6 <_svfprintf_r+0x1172>
  407db6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407db8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407dba:	4413      	add	r3, r2
  407dbc:	930e      	str	r3, [sp, #56]	; 0x38
  407dbe:	e775      	b.n	407cac <_svfprintf_r+0x1248>
  407dc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407dc2:	e5cb      	b.n	40795c <_svfprintf_r+0xef8>
  407dc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407dc6:	4e1d      	ldr	r6, [pc, #116]	; (407e3c <_svfprintf_r+0x13d8>)
  407dc8:	2b00      	cmp	r3, #0
  407dca:	bfb6      	itet	lt
  407dcc:	272d      	movlt	r7, #45	; 0x2d
  407dce:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407dd2:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407dd6:	4b1a      	ldr	r3, [pc, #104]	; (407e40 <_svfprintf_r+0x13dc>)
  407dd8:	f7ff ba2f 	b.w	40723a <_svfprintf_r+0x7d6>
  407ddc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407dde:	9808      	ldr	r0, [sp, #32]
  407de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407de2:	4639      	mov	r1, r7
  407de4:	f004 fc72 	bl	40c6cc <__aeabi_dcmpeq>
  407de8:	2800      	cmp	r0, #0
  407dea:	f47f ae7f 	bne.w	407aec <_svfprintf_r+0x1088>
  407dee:	f1c5 0501 	rsb	r5, r5, #1
  407df2:	951f      	str	r5, [sp, #124]	; 0x7c
  407df4:	442c      	add	r4, r5
  407df6:	e59e      	b.n	407936 <_svfprintf_r+0xed2>
  407df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407dfa:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407dfc:	4413      	add	r3, r2
  407dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407e00:	441a      	add	r2, r3
  407e02:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407e06:	920e      	str	r2, [sp, #56]	; 0x38
  407e08:	9308      	str	r3, [sp, #32]
  407e0a:	e5c7      	b.n	40799c <_svfprintf_r+0xf38>
  407e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407e10:	f1c3 0301 	rsb	r3, r3, #1
  407e14:	441a      	add	r2, r3
  407e16:	4613      	mov	r3, r2
  407e18:	e7d0      	b.n	407dbc <_svfprintf_r+0x1358>
  407e1a:	f01b 0301 	ands.w	r3, fp, #1
  407e1e:	9312      	str	r3, [sp, #72]	; 0x48
  407e20:	f47f aee2 	bne.w	407be8 <_svfprintf_r+0x1184>
  407e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407e2a:	9308      	str	r3, [sp, #32]
  407e2c:	e5b6      	b.n	40799c <_svfprintf_r+0xf38>
  407e2e:	bf00      	nop
  407e30:	66666667 	.word	0x66666667
  407e34:	0040daf8 	.word	0x0040daf8
  407e38:	0040db14 	.word	0x0040db14
  407e3c:	0040dacc 	.word	0x0040dacc
  407e40:	0040dac8 	.word	0x0040dac8
  407e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e46:	b913      	cbnz	r3, 407e4e <_svfprintf_r+0x13ea>
  407e48:	f01b 0f01 	tst.w	fp, #1
  407e4c:	d002      	beq.n	407e54 <_svfprintf_r+0x13f0>
  407e4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407e50:	3301      	adds	r3, #1
  407e52:	e7d4      	b.n	407dfe <_svfprintf_r+0x139a>
  407e54:	2301      	movs	r3, #1
  407e56:	e73a      	b.n	407cce <_svfprintf_r+0x126a>
  407e58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407e5a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407e5e:	6828      	ldr	r0, [r5, #0]
  407e60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407e64:	900a      	str	r0, [sp, #40]	; 0x28
  407e66:	4628      	mov	r0, r5
  407e68:	3004      	adds	r0, #4
  407e6a:	46a2      	mov	sl, r4
  407e6c:	900f      	str	r0, [sp, #60]	; 0x3c
  407e6e:	f7fe be51 	b.w	406b14 <_svfprintf_r+0xb0>
  407e72:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e76:	f7ff b867 	b.w	406f48 <_svfprintf_r+0x4e4>
  407e7a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e7e:	f7ff ba15 	b.w	4072ac <_svfprintf_r+0x848>
  407e82:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407e86:	e6a6      	b.n	407bd6 <_svfprintf_r+0x1172>
  407e88:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407e8c:	f7ff b8eb 	b.w	407066 <_svfprintf_r+0x602>
  407e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e92:	230c      	movs	r3, #12
  407e94:	6013      	str	r3, [r2, #0]
  407e96:	f04f 33ff 	mov.w	r3, #4294967295
  407e9a:	9309      	str	r3, [sp, #36]	; 0x24
  407e9c:	f7fe bebd 	b.w	406c1a <_svfprintf_r+0x1b6>
  407ea0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407ea4:	f7ff b99a 	b.w	4071dc <_svfprintf_r+0x778>
  407ea8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407eac:	f7ff b976 	b.w	40719c <_svfprintf_r+0x738>
  407eb0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407eb4:	f7ff b959 	b.w	40716a <_svfprintf_r+0x706>
  407eb8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407ebc:	f7ff b912 	b.w	4070e4 <_svfprintf_r+0x680>

00407ec0 <__sprint_r.part.0>:
  407ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ec4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407ec6:	049c      	lsls	r4, r3, #18
  407ec8:	4693      	mov	fp, r2
  407eca:	d52f      	bpl.n	407f2c <__sprint_r.part.0+0x6c>
  407ecc:	6893      	ldr	r3, [r2, #8]
  407ece:	6812      	ldr	r2, [r2, #0]
  407ed0:	b353      	cbz	r3, 407f28 <__sprint_r.part.0+0x68>
  407ed2:	460e      	mov	r6, r1
  407ed4:	4607      	mov	r7, r0
  407ed6:	f102 0908 	add.w	r9, r2, #8
  407eda:	e919 0420 	ldmdb	r9, {r5, sl}
  407ede:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407ee2:	d017      	beq.n	407f14 <__sprint_r.part.0+0x54>
  407ee4:	3d04      	subs	r5, #4
  407ee6:	2400      	movs	r4, #0
  407ee8:	e001      	b.n	407eee <__sprint_r.part.0+0x2e>
  407eea:	45a0      	cmp	r8, r4
  407eec:	d010      	beq.n	407f10 <__sprint_r.part.0+0x50>
  407eee:	4632      	mov	r2, r6
  407ef0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407ef4:	4638      	mov	r0, r7
  407ef6:	f002 f87b 	bl	409ff0 <_fputwc_r>
  407efa:	1c43      	adds	r3, r0, #1
  407efc:	f104 0401 	add.w	r4, r4, #1
  407f00:	d1f3      	bne.n	407eea <__sprint_r.part.0+0x2a>
  407f02:	2300      	movs	r3, #0
  407f04:	f8cb 3008 	str.w	r3, [fp, #8]
  407f08:	f8cb 3004 	str.w	r3, [fp, #4]
  407f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f10:	f8db 3008 	ldr.w	r3, [fp, #8]
  407f14:	f02a 0a03 	bic.w	sl, sl, #3
  407f18:	eba3 030a 	sub.w	r3, r3, sl
  407f1c:	f8cb 3008 	str.w	r3, [fp, #8]
  407f20:	f109 0908 	add.w	r9, r9, #8
  407f24:	2b00      	cmp	r3, #0
  407f26:	d1d8      	bne.n	407eda <__sprint_r.part.0+0x1a>
  407f28:	2000      	movs	r0, #0
  407f2a:	e7ea      	b.n	407f02 <__sprint_r.part.0+0x42>
  407f2c:	f002 f9ca 	bl	40a2c4 <__sfvwrite_r>
  407f30:	2300      	movs	r3, #0
  407f32:	f8cb 3008 	str.w	r3, [fp, #8]
  407f36:	f8cb 3004 	str.w	r3, [fp, #4]
  407f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f3e:	bf00      	nop

00407f40 <_vfiprintf_r>:
  407f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f44:	b0ad      	sub	sp, #180	; 0xb4
  407f46:	461d      	mov	r5, r3
  407f48:	468b      	mov	fp, r1
  407f4a:	4690      	mov	r8, r2
  407f4c:	9307      	str	r3, [sp, #28]
  407f4e:	9006      	str	r0, [sp, #24]
  407f50:	b118      	cbz	r0, 407f5a <_vfiprintf_r+0x1a>
  407f52:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407f54:	2b00      	cmp	r3, #0
  407f56:	f000 80f3 	beq.w	408140 <_vfiprintf_r+0x200>
  407f5a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407f5e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407f62:	07df      	lsls	r7, r3, #31
  407f64:	b281      	uxth	r1, r0
  407f66:	d402      	bmi.n	407f6e <_vfiprintf_r+0x2e>
  407f68:	058e      	lsls	r6, r1, #22
  407f6a:	f140 80fc 	bpl.w	408166 <_vfiprintf_r+0x226>
  407f6e:	048c      	lsls	r4, r1, #18
  407f70:	d40a      	bmi.n	407f88 <_vfiprintf_r+0x48>
  407f72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407f76:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  407f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  407f7e:	f8ab 100c 	strh.w	r1, [fp, #12]
  407f82:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407f86:	b289      	uxth	r1, r1
  407f88:	0708      	lsls	r0, r1, #28
  407f8a:	f140 80b3 	bpl.w	4080f4 <_vfiprintf_r+0x1b4>
  407f8e:	f8db 3010 	ldr.w	r3, [fp, #16]
  407f92:	2b00      	cmp	r3, #0
  407f94:	f000 80ae 	beq.w	4080f4 <_vfiprintf_r+0x1b4>
  407f98:	f001 031a 	and.w	r3, r1, #26
  407f9c:	2b0a      	cmp	r3, #10
  407f9e:	f000 80b5 	beq.w	40810c <_vfiprintf_r+0x1cc>
  407fa2:	2300      	movs	r3, #0
  407fa4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407fa8:	930b      	str	r3, [sp, #44]	; 0x2c
  407faa:	9311      	str	r3, [sp, #68]	; 0x44
  407fac:	9310      	str	r3, [sp, #64]	; 0x40
  407fae:	9303      	str	r3, [sp, #12]
  407fb0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407fb4:	46ca      	mov	sl, r9
  407fb6:	f8cd b010 	str.w	fp, [sp, #16]
  407fba:	f898 3000 	ldrb.w	r3, [r8]
  407fbe:	4644      	mov	r4, r8
  407fc0:	b1fb      	cbz	r3, 408002 <_vfiprintf_r+0xc2>
  407fc2:	2b25      	cmp	r3, #37	; 0x25
  407fc4:	d102      	bne.n	407fcc <_vfiprintf_r+0x8c>
  407fc6:	e01c      	b.n	408002 <_vfiprintf_r+0xc2>
  407fc8:	2b25      	cmp	r3, #37	; 0x25
  407fca:	d003      	beq.n	407fd4 <_vfiprintf_r+0x94>
  407fcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407fd0:	2b00      	cmp	r3, #0
  407fd2:	d1f9      	bne.n	407fc8 <_vfiprintf_r+0x88>
  407fd4:	eba4 0508 	sub.w	r5, r4, r8
  407fd8:	b19d      	cbz	r5, 408002 <_vfiprintf_r+0xc2>
  407fda:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407fdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407fde:	f8ca 8000 	str.w	r8, [sl]
  407fe2:	3301      	adds	r3, #1
  407fe4:	442a      	add	r2, r5
  407fe6:	2b07      	cmp	r3, #7
  407fe8:	f8ca 5004 	str.w	r5, [sl, #4]
  407fec:	9211      	str	r2, [sp, #68]	; 0x44
  407fee:	9310      	str	r3, [sp, #64]	; 0x40
  407ff0:	dd7a      	ble.n	4080e8 <_vfiprintf_r+0x1a8>
  407ff2:	2a00      	cmp	r2, #0
  407ff4:	f040 84b0 	bne.w	408958 <_vfiprintf_r+0xa18>
  407ff8:	9b03      	ldr	r3, [sp, #12]
  407ffa:	9210      	str	r2, [sp, #64]	; 0x40
  407ffc:	442b      	add	r3, r5
  407ffe:	46ca      	mov	sl, r9
  408000:	9303      	str	r3, [sp, #12]
  408002:	7823      	ldrb	r3, [r4, #0]
  408004:	2b00      	cmp	r3, #0
  408006:	f000 83e0 	beq.w	4087ca <_vfiprintf_r+0x88a>
  40800a:	2000      	movs	r0, #0
  40800c:	f04f 0300 	mov.w	r3, #0
  408010:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  408014:	f104 0801 	add.w	r8, r4, #1
  408018:	7862      	ldrb	r2, [r4, #1]
  40801a:	4605      	mov	r5, r0
  40801c:	4606      	mov	r6, r0
  40801e:	4603      	mov	r3, r0
  408020:	f04f 34ff 	mov.w	r4, #4294967295
  408024:	f108 0801 	add.w	r8, r8, #1
  408028:	f1a2 0120 	sub.w	r1, r2, #32
  40802c:	2958      	cmp	r1, #88	; 0x58
  40802e:	f200 82de 	bhi.w	4085ee <_vfiprintf_r+0x6ae>
  408032:	e8df f011 	tbh	[pc, r1, lsl #1]
  408036:	0221      	.short	0x0221
  408038:	02dc02dc 	.word	0x02dc02dc
  40803c:	02dc0229 	.word	0x02dc0229
  408040:	02dc02dc 	.word	0x02dc02dc
  408044:	02dc02dc 	.word	0x02dc02dc
  408048:	028902dc 	.word	0x028902dc
  40804c:	02dc0295 	.word	0x02dc0295
  408050:	02bd00a2 	.word	0x02bd00a2
  408054:	019f02dc 	.word	0x019f02dc
  408058:	01a401a4 	.word	0x01a401a4
  40805c:	01a401a4 	.word	0x01a401a4
  408060:	01a401a4 	.word	0x01a401a4
  408064:	01a401a4 	.word	0x01a401a4
  408068:	02dc01a4 	.word	0x02dc01a4
  40806c:	02dc02dc 	.word	0x02dc02dc
  408070:	02dc02dc 	.word	0x02dc02dc
  408074:	02dc02dc 	.word	0x02dc02dc
  408078:	02dc02dc 	.word	0x02dc02dc
  40807c:	01b202dc 	.word	0x01b202dc
  408080:	02dc02dc 	.word	0x02dc02dc
  408084:	02dc02dc 	.word	0x02dc02dc
  408088:	02dc02dc 	.word	0x02dc02dc
  40808c:	02dc02dc 	.word	0x02dc02dc
  408090:	02dc02dc 	.word	0x02dc02dc
  408094:	02dc0197 	.word	0x02dc0197
  408098:	02dc02dc 	.word	0x02dc02dc
  40809c:	02dc02dc 	.word	0x02dc02dc
  4080a0:	02dc019b 	.word	0x02dc019b
  4080a4:	025302dc 	.word	0x025302dc
  4080a8:	02dc02dc 	.word	0x02dc02dc
  4080ac:	02dc02dc 	.word	0x02dc02dc
  4080b0:	02dc02dc 	.word	0x02dc02dc
  4080b4:	02dc02dc 	.word	0x02dc02dc
  4080b8:	02dc02dc 	.word	0x02dc02dc
  4080bc:	021b025a 	.word	0x021b025a
  4080c0:	02dc02dc 	.word	0x02dc02dc
  4080c4:	026e02dc 	.word	0x026e02dc
  4080c8:	02dc021b 	.word	0x02dc021b
  4080cc:	027302dc 	.word	0x027302dc
  4080d0:	01f502dc 	.word	0x01f502dc
  4080d4:	02090182 	.word	0x02090182
  4080d8:	02dc02d7 	.word	0x02dc02d7
  4080dc:	02dc029a 	.word	0x02dc029a
  4080e0:	02dc00a7 	.word	0x02dc00a7
  4080e4:	022e02dc 	.word	0x022e02dc
  4080e8:	f10a 0a08 	add.w	sl, sl, #8
  4080ec:	9b03      	ldr	r3, [sp, #12]
  4080ee:	442b      	add	r3, r5
  4080f0:	9303      	str	r3, [sp, #12]
  4080f2:	e786      	b.n	408002 <_vfiprintf_r+0xc2>
  4080f4:	4659      	mov	r1, fp
  4080f6:	9806      	ldr	r0, [sp, #24]
  4080f8:	f000 fdac 	bl	408c54 <__swsetup_r>
  4080fc:	bb18      	cbnz	r0, 408146 <_vfiprintf_r+0x206>
  4080fe:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  408102:	f001 031a 	and.w	r3, r1, #26
  408106:	2b0a      	cmp	r3, #10
  408108:	f47f af4b 	bne.w	407fa2 <_vfiprintf_r+0x62>
  40810c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  408110:	2b00      	cmp	r3, #0
  408112:	f6ff af46 	blt.w	407fa2 <_vfiprintf_r+0x62>
  408116:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40811a:	07db      	lsls	r3, r3, #31
  40811c:	d405      	bmi.n	40812a <_vfiprintf_r+0x1ea>
  40811e:	058f      	lsls	r7, r1, #22
  408120:	d403      	bmi.n	40812a <_vfiprintf_r+0x1ea>
  408122:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408126:	f002 fa91 	bl	40a64c <__retarget_lock_release_recursive>
  40812a:	462b      	mov	r3, r5
  40812c:	4642      	mov	r2, r8
  40812e:	4659      	mov	r1, fp
  408130:	9806      	ldr	r0, [sp, #24]
  408132:	f000 fd4d 	bl	408bd0 <__sbprintf>
  408136:	9003      	str	r0, [sp, #12]
  408138:	9803      	ldr	r0, [sp, #12]
  40813a:	b02d      	add	sp, #180	; 0xb4
  40813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408140:	f001 feb4 	bl	409eac <__sinit>
  408144:	e709      	b.n	407f5a <_vfiprintf_r+0x1a>
  408146:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40814a:	07d9      	lsls	r1, r3, #31
  40814c:	d404      	bmi.n	408158 <_vfiprintf_r+0x218>
  40814e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408152:	059a      	lsls	r2, r3, #22
  408154:	f140 84aa 	bpl.w	408aac <_vfiprintf_r+0xb6c>
  408158:	f04f 33ff 	mov.w	r3, #4294967295
  40815c:	9303      	str	r3, [sp, #12]
  40815e:	9803      	ldr	r0, [sp, #12]
  408160:	b02d      	add	sp, #180	; 0xb4
  408162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408166:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40816a:	f002 fa6d 	bl	40a648 <__retarget_lock_acquire_recursive>
  40816e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  408172:	b281      	uxth	r1, r0
  408174:	e6fb      	b.n	407f6e <_vfiprintf_r+0x2e>
  408176:	4276      	negs	r6, r6
  408178:	9207      	str	r2, [sp, #28]
  40817a:	f043 0304 	orr.w	r3, r3, #4
  40817e:	f898 2000 	ldrb.w	r2, [r8]
  408182:	e74f      	b.n	408024 <_vfiprintf_r+0xe4>
  408184:	9608      	str	r6, [sp, #32]
  408186:	069e      	lsls	r6, r3, #26
  408188:	f100 8450 	bmi.w	408a2c <_vfiprintf_r+0xaec>
  40818c:	9907      	ldr	r1, [sp, #28]
  40818e:	06dd      	lsls	r5, r3, #27
  408190:	460a      	mov	r2, r1
  408192:	f100 83ef 	bmi.w	408974 <_vfiprintf_r+0xa34>
  408196:	0658      	lsls	r0, r3, #25
  408198:	f140 83ec 	bpl.w	408974 <_vfiprintf_r+0xa34>
  40819c:	880e      	ldrh	r6, [r1, #0]
  40819e:	3104      	adds	r1, #4
  4081a0:	2700      	movs	r7, #0
  4081a2:	2201      	movs	r2, #1
  4081a4:	9107      	str	r1, [sp, #28]
  4081a6:	f04f 0100 	mov.w	r1, #0
  4081aa:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4081ae:	2500      	movs	r5, #0
  4081b0:	1c61      	adds	r1, r4, #1
  4081b2:	f000 8116 	beq.w	4083e2 <_vfiprintf_r+0x4a2>
  4081b6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4081ba:	9102      	str	r1, [sp, #8]
  4081bc:	ea56 0107 	orrs.w	r1, r6, r7
  4081c0:	f040 8114 	bne.w	4083ec <_vfiprintf_r+0x4ac>
  4081c4:	2c00      	cmp	r4, #0
  4081c6:	f040 835c 	bne.w	408882 <_vfiprintf_r+0x942>
  4081ca:	2a00      	cmp	r2, #0
  4081cc:	f040 83b7 	bne.w	40893e <_vfiprintf_r+0x9fe>
  4081d0:	f013 0301 	ands.w	r3, r3, #1
  4081d4:	9305      	str	r3, [sp, #20]
  4081d6:	f000 8457 	beq.w	408a88 <_vfiprintf_r+0xb48>
  4081da:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4081de:	2330      	movs	r3, #48	; 0x30
  4081e0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4081e4:	9b05      	ldr	r3, [sp, #20]
  4081e6:	42a3      	cmp	r3, r4
  4081e8:	bfb8      	it	lt
  4081ea:	4623      	movlt	r3, r4
  4081ec:	9301      	str	r3, [sp, #4]
  4081ee:	b10d      	cbz	r5, 4081f4 <_vfiprintf_r+0x2b4>
  4081f0:	3301      	adds	r3, #1
  4081f2:	9301      	str	r3, [sp, #4]
  4081f4:	9b02      	ldr	r3, [sp, #8]
  4081f6:	f013 0302 	ands.w	r3, r3, #2
  4081fa:	9309      	str	r3, [sp, #36]	; 0x24
  4081fc:	d002      	beq.n	408204 <_vfiprintf_r+0x2c4>
  4081fe:	9b01      	ldr	r3, [sp, #4]
  408200:	3302      	adds	r3, #2
  408202:	9301      	str	r3, [sp, #4]
  408204:	9b02      	ldr	r3, [sp, #8]
  408206:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40820a:	930a      	str	r3, [sp, #40]	; 0x28
  40820c:	f040 8217 	bne.w	40863e <_vfiprintf_r+0x6fe>
  408210:	9b08      	ldr	r3, [sp, #32]
  408212:	9a01      	ldr	r2, [sp, #4]
  408214:	1a9d      	subs	r5, r3, r2
  408216:	2d00      	cmp	r5, #0
  408218:	f340 8211 	ble.w	40863e <_vfiprintf_r+0x6fe>
  40821c:	2d10      	cmp	r5, #16
  40821e:	f340 8490 	ble.w	408b42 <_vfiprintf_r+0xc02>
  408222:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408224:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408226:	4ec4      	ldr	r6, [pc, #784]	; (408538 <_vfiprintf_r+0x5f8>)
  408228:	46d6      	mov	lr, sl
  40822a:	2710      	movs	r7, #16
  40822c:	46a2      	mov	sl, r4
  40822e:	4619      	mov	r1, r3
  408230:	9c06      	ldr	r4, [sp, #24]
  408232:	e007      	b.n	408244 <_vfiprintf_r+0x304>
  408234:	f101 0c02 	add.w	ip, r1, #2
  408238:	f10e 0e08 	add.w	lr, lr, #8
  40823c:	4601      	mov	r1, r0
  40823e:	3d10      	subs	r5, #16
  408240:	2d10      	cmp	r5, #16
  408242:	dd11      	ble.n	408268 <_vfiprintf_r+0x328>
  408244:	1c48      	adds	r0, r1, #1
  408246:	3210      	adds	r2, #16
  408248:	2807      	cmp	r0, #7
  40824a:	9211      	str	r2, [sp, #68]	; 0x44
  40824c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  408250:	9010      	str	r0, [sp, #64]	; 0x40
  408252:	ddef      	ble.n	408234 <_vfiprintf_r+0x2f4>
  408254:	2a00      	cmp	r2, #0
  408256:	f040 81e4 	bne.w	408622 <_vfiprintf_r+0x6e2>
  40825a:	3d10      	subs	r5, #16
  40825c:	2d10      	cmp	r5, #16
  40825e:	4611      	mov	r1, r2
  408260:	f04f 0c01 	mov.w	ip, #1
  408264:	46ce      	mov	lr, r9
  408266:	dced      	bgt.n	408244 <_vfiprintf_r+0x304>
  408268:	4654      	mov	r4, sl
  40826a:	4661      	mov	r1, ip
  40826c:	46f2      	mov	sl, lr
  40826e:	442a      	add	r2, r5
  408270:	2907      	cmp	r1, #7
  408272:	9211      	str	r2, [sp, #68]	; 0x44
  408274:	f8ca 6000 	str.w	r6, [sl]
  408278:	f8ca 5004 	str.w	r5, [sl, #4]
  40827c:	9110      	str	r1, [sp, #64]	; 0x40
  40827e:	f300 82ec 	bgt.w	40885a <_vfiprintf_r+0x91a>
  408282:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408286:	f10a 0a08 	add.w	sl, sl, #8
  40828a:	1c48      	adds	r0, r1, #1
  40828c:	2d00      	cmp	r5, #0
  40828e:	f040 81de 	bne.w	40864e <_vfiprintf_r+0x70e>
  408292:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408294:	2b00      	cmp	r3, #0
  408296:	f000 81f8 	beq.w	40868a <_vfiprintf_r+0x74a>
  40829a:	3202      	adds	r2, #2
  40829c:	a90e      	add	r1, sp, #56	; 0x38
  40829e:	2302      	movs	r3, #2
  4082a0:	2807      	cmp	r0, #7
  4082a2:	9211      	str	r2, [sp, #68]	; 0x44
  4082a4:	9010      	str	r0, [sp, #64]	; 0x40
  4082a6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4082aa:	f340 81ea 	ble.w	408682 <_vfiprintf_r+0x742>
  4082ae:	2a00      	cmp	r2, #0
  4082b0:	f040 838c 	bne.w	4089cc <_vfiprintf_r+0xa8c>
  4082b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4082b6:	2b80      	cmp	r3, #128	; 0x80
  4082b8:	f04f 0001 	mov.w	r0, #1
  4082bc:	4611      	mov	r1, r2
  4082be:	46ca      	mov	sl, r9
  4082c0:	f040 81e7 	bne.w	408692 <_vfiprintf_r+0x752>
  4082c4:	9b08      	ldr	r3, [sp, #32]
  4082c6:	9d01      	ldr	r5, [sp, #4]
  4082c8:	1b5e      	subs	r6, r3, r5
  4082ca:	2e00      	cmp	r6, #0
  4082cc:	f340 81e1 	ble.w	408692 <_vfiprintf_r+0x752>
  4082d0:	2e10      	cmp	r6, #16
  4082d2:	4d9a      	ldr	r5, [pc, #616]	; (40853c <_vfiprintf_r+0x5fc>)
  4082d4:	f340 8450 	ble.w	408b78 <_vfiprintf_r+0xc38>
  4082d8:	46d4      	mov	ip, sl
  4082da:	2710      	movs	r7, #16
  4082dc:	46a2      	mov	sl, r4
  4082de:	9c06      	ldr	r4, [sp, #24]
  4082e0:	e007      	b.n	4082f2 <_vfiprintf_r+0x3b2>
  4082e2:	f101 0e02 	add.w	lr, r1, #2
  4082e6:	f10c 0c08 	add.w	ip, ip, #8
  4082ea:	4601      	mov	r1, r0
  4082ec:	3e10      	subs	r6, #16
  4082ee:	2e10      	cmp	r6, #16
  4082f0:	dd11      	ble.n	408316 <_vfiprintf_r+0x3d6>
  4082f2:	1c48      	adds	r0, r1, #1
  4082f4:	3210      	adds	r2, #16
  4082f6:	2807      	cmp	r0, #7
  4082f8:	9211      	str	r2, [sp, #68]	; 0x44
  4082fa:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4082fe:	9010      	str	r0, [sp, #64]	; 0x40
  408300:	ddef      	ble.n	4082e2 <_vfiprintf_r+0x3a2>
  408302:	2a00      	cmp	r2, #0
  408304:	f040 829d 	bne.w	408842 <_vfiprintf_r+0x902>
  408308:	3e10      	subs	r6, #16
  40830a:	2e10      	cmp	r6, #16
  40830c:	f04f 0e01 	mov.w	lr, #1
  408310:	4611      	mov	r1, r2
  408312:	46cc      	mov	ip, r9
  408314:	dced      	bgt.n	4082f2 <_vfiprintf_r+0x3b2>
  408316:	4654      	mov	r4, sl
  408318:	46e2      	mov	sl, ip
  40831a:	4432      	add	r2, r6
  40831c:	f1be 0f07 	cmp.w	lr, #7
  408320:	9211      	str	r2, [sp, #68]	; 0x44
  408322:	e88a 0060 	stmia.w	sl, {r5, r6}
  408326:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40832a:	f300 8369 	bgt.w	408a00 <_vfiprintf_r+0xac0>
  40832e:	f10a 0a08 	add.w	sl, sl, #8
  408332:	f10e 0001 	add.w	r0, lr, #1
  408336:	4671      	mov	r1, lr
  408338:	e1ab      	b.n	408692 <_vfiprintf_r+0x752>
  40833a:	9608      	str	r6, [sp, #32]
  40833c:	f013 0220 	ands.w	r2, r3, #32
  408340:	f040 838c 	bne.w	408a5c <_vfiprintf_r+0xb1c>
  408344:	f013 0110 	ands.w	r1, r3, #16
  408348:	f040 831a 	bne.w	408980 <_vfiprintf_r+0xa40>
  40834c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  408350:	f000 8316 	beq.w	408980 <_vfiprintf_r+0xa40>
  408354:	9807      	ldr	r0, [sp, #28]
  408356:	460a      	mov	r2, r1
  408358:	4601      	mov	r1, r0
  40835a:	3104      	adds	r1, #4
  40835c:	8806      	ldrh	r6, [r0, #0]
  40835e:	9107      	str	r1, [sp, #28]
  408360:	2700      	movs	r7, #0
  408362:	e720      	b.n	4081a6 <_vfiprintf_r+0x266>
  408364:	9608      	str	r6, [sp, #32]
  408366:	f043 0310 	orr.w	r3, r3, #16
  40836a:	e7e7      	b.n	40833c <_vfiprintf_r+0x3fc>
  40836c:	9608      	str	r6, [sp, #32]
  40836e:	f043 0310 	orr.w	r3, r3, #16
  408372:	e708      	b.n	408186 <_vfiprintf_r+0x246>
  408374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408378:	f898 2000 	ldrb.w	r2, [r8]
  40837c:	e652      	b.n	408024 <_vfiprintf_r+0xe4>
  40837e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408382:	2600      	movs	r6, #0
  408384:	f818 2b01 	ldrb.w	r2, [r8], #1
  408388:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40838c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  408390:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408394:	2909      	cmp	r1, #9
  408396:	d9f5      	bls.n	408384 <_vfiprintf_r+0x444>
  408398:	e646      	b.n	408028 <_vfiprintf_r+0xe8>
  40839a:	9608      	str	r6, [sp, #32]
  40839c:	2800      	cmp	r0, #0
  40839e:	f040 8408 	bne.w	408bb2 <_vfiprintf_r+0xc72>
  4083a2:	f043 0310 	orr.w	r3, r3, #16
  4083a6:	069e      	lsls	r6, r3, #26
  4083a8:	f100 834c 	bmi.w	408a44 <_vfiprintf_r+0xb04>
  4083ac:	06dd      	lsls	r5, r3, #27
  4083ae:	f100 82f3 	bmi.w	408998 <_vfiprintf_r+0xa58>
  4083b2:	0658      	lsls	r0, r3, #25
  4083b4:	f140 82f0 	bpl.w	408998 <_vfiprintf_r+0xa58>
  4083b8:	9d07      	ldr	r5, [sp, #28]
  4083ba:	f9b5 6000 	ldrsh.w	r6, [r5]
  4083be:	462a      	mov	r2, r5
  4083c0:	17f7      	asrs	r7, r6, #31
  4083c2:	3204      	adds	r2, #4
  4083c4:	4630      	mov	r0, r6
  4083c6:	4639      	mov	r1, r7
  4083c8:	9207      	str	r2, [sp, #28]
  4083ca:	2800      	cmp	r0, #0
  4083cc:	f171 0200 	sbcs.w	r2, r1, #0
  4083d0:	f2c0 835d 	blt.w	408a8e <_vfiprintf_r+0xb4e>
  4083d4:	1c61      	adds	r1, r4, #1
  4083d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4083da:	f04f 0201 	mov.w	r2, #1
  4083de:	f47f aeea 	bne.w	4081b6 <_vfiprintf_r+0x276>
  4083e2:	ea56 0107 	orrs.w	r1, r6, r7
  4083e6:	f000 824d 	beq.w	408884 <_vfiprintf_r+0x944>
  4083ea:	9302      	str	r3, [sp, #8]
  4083ec:	2a01      	cmp	r2, #1
  4083ee:	f000 828c 	beq.w	40890a <_vfiprintf_r+0x9ca>
  4083f2:	2a02      	cmp	r2, #2
  4083f4:	f040 825c 	bne.w	4088b0 <_vfiprintf_r+0x970>
  4083f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4083fa:	46cb      	mov	fp, r9
  4083fc:	0933      	lsrs	r3, r6, #4
  4083fe:	f006 010f 	and.w	r1, r6, #15
  408402:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  408406:	093a      	lsrs	r2, r7, #4
  408408:	461e      	mov	r6, r3
  40840a:	4617      	mov	r7, r2
  40840c:	5c43      	ldrb	r3, [r0, r1]
  40840e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  408412:	ea56 0307 	orrs.w	r3, r6, r7
  408416:	d1f1      	bne.n	4083fc <_vfiprintf_r+0x4bc>
  408418:	eba9 030b 	sub.w	r3, r9, fp
  40841c:	9305      	str	r3, [sp, #20]
  40841e:	e6e1      	b.n	4081e4 <_vfiprintf_r+0x2a4>
  408420:	2800      	cmp	r0, #0
  408422:	f040 83c0 	bne.w	408ba6 <_vfiprintf_r+0xc66>
  408426:	0699      	lsls	r1, r3, #26
  408428:	f100 8367 	bmi.w	408afa <_vfiprintf_r+0xbba>
  40842c:	06da      	lsls	r2, r3, #27
  40842e:	f100 80f1 	bmi.w	408614 <_vfiprintf_r+0x6d4>
  408432:	065b      	lsls	r3, r3, #25
  408434:	f140 80ee 	bpl.w	408614 <_vfiprintf_r+0x6d4>
  408438:	9a07      	ldr	r2, [sp, #28]
  40843a:	6813      	ldr	r3, [r2, #0]
  40843c:	3204      	adds	r2, #4
  40843e:	9207      	str	r2, [sp, #28]
  408440:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  408444:	801a      	strh	r2, [r3, #0]
  408446:	e5b8      	b.n	407fba <_vfiprintf_r+0x7a>
  408448:	9807      	ldr	r0, [sp, #28]
  40844a:	4a3d      	ldr	r2, [pc, #244]	; (408540 <_vfiprintf_r+0x600>)
  40844c:	9608      	str	r6, [sp, #32]
  40844e:	920b      	str	r2, [sp, #44]	; 0x2c
  408450:	6806      	ldr	r6, [r0, #0]
  408452:	2278      	movs	r2, #120	; 0x78
  408454:	2130      	movs	r1, #48	; 0x30
  408456:	3004      	adds	r0, #4
  408458:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40845c:	f043 0302 	orr.w	r3, r3, #2
  408460:	9007      	str	r0, [sp, #28]
  408462:	2700      	movs	r7, #0
  408464:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408468:	2202      	movs	r2, #2
  40846a:	e69c      	b.n	4081a6 <_vfiprintf_r+0x266>
  40846c:	9608      	str	r6, [sp, #32]
  40846e:	2800      	cmp	r0, #0
  408470:	d099      	beq.n	4083a6 <_vfiprintf_r+0x466>
  408472:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408476:	e796      	b.n	4083a6 <_vfiprintf_r+0x466>
  408478:	f898 2000 	ldrb.w	r2, [r8]
  40847c:	2d00      	cmp	r5, #0
  40847e:	f47f add1 	bne.w	408024 <_vfiprintf_r+0xe4>
  408482:	2001      	movs	r0, #1
  408484:	2520      	movs	r5, #32
  408486:	e5cd      	b.n	408024 <_vfiprintf_r+0xe4>
  408488:	f043 0301 	orr.w	r3, r3, #1
  40848c:	f898 2000 	ldrb.w	r2, [r8]
  408490:	e5c8      	b.n	408024 <_vfiprintf_r+0xe4>
  408492:	9608      	str	r6, [sp, #32]
  408494:	2800      	cmp	r0, #0
  408496:	f040 8393 	bne.w	408bc0 <_vfiprintf_r+0xc80>
  40849a:	4929      	ldr	r1, [pc, #164]	; (408540 <_vfiprintf_r+0x600>)
  40849c:	910b      	str	r1, [sp, #44]	; 0x2c
  40849e:	069f      	lsls	r7, r3, #26
  4084a0:	f100 82e8 	bmi.w	408a74 <_vfiprintf_r+0xb34>
  4084a4:	9807      	ldr	r0, [sp, #28]
  4084a6:	06de      	lsls	r6, r3, #27
  4084a8:	4601      	mov	r1, r0
  4084aa:	f100 8270 	bmi.w	40898e <_vfiprintf_r+0xa4e>
  4084ae:	065d      	lsls	r5, r3, #25
  4084b0:	f140 826d 	bpl.w	40898e <_vfiprintf_r+0xa4e>
  4084b4:	3104      	adds	r1, #4
  4084b6:	8806      	ldrh	r6, [r0, #0]
  4084b8:	9107      	str	r1, [sp, #28]
  4084ba:	2700      	movs	r7, #0
  4084bc:	07d8      	lsls	r0, r3, #31
  4084be:	f140 8222 	bpl.w	408906 <_vfiprintf_r+0x9c6>
  4084c2:	ea56 0107 	orrs.w	r1, r6, r7
  4084c6:	f000 821e 	beq.w	408906 <_vfiprintf_r+0x9c6>
  4084ca:	2130      	movs	r1, #48	; 0x30
  4084cc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4084d0:	f043 0302 	orr.w	r3, r3, #2
  4084d4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4084d8:	2202      	movs	r2, #2
  4084da:	e664      	b.n	4081a6 <_vfiprintf_r+0x266>
  4084dc:	9608      	str	r6, [sp, #32]
  4084de:	2800      	cmp	r0, #0
  4084e0:	f040 836b 	bne.w	408bba <_vfiprintf_r+0xc7a>
  4084e4:	4917      	ldr	r1, [pc, #92]	; (408544 <_vfiprintf_r+0x604>)
  4084e6:	910b      	str	r1, [sp, #44]	; 0x2c
  4084e8:	e7d9      	b.n	40849e <_vfiprintf_r+0x55e>
  4084ea:	9907      	ldr	r1, [sp, #28]
  4084ec:	9608      	str	r6, [sp, #32]
  4084ee:	680a      	ldr	r2, [r1, #0]
  4084f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4084f4:	f04f 0000 	mov.w	r0, #0
  4084f8:	460a      	mov	r2, r1
  4084fa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4084fe:	3204      	adds	r2, #4
  408500:	2001      	movs	r0, #1
  408502:	9001      	str	r0, [sp, #4]
  408504:	9207      	str	r2, [sp, #28]
  408506:	9005      	str	r0, [sp, #20]
  408508:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40850c:	9302      	str	r3, [sp, #8]
  40850e:	2400      	movs	r4, #0
  408510:	e670      	b.n	4081f4 <_vfiprintf_r+0x2b4>
  408512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408516:	f898 2000 	ldrb.w	r2, [r8]
  40851a:	e583      	b.n	408024 <_vfiprintf_r+0xe4>
  40851c:	f898 2000 	ldrb.w	r2, [r8]
  408520:	2a6c      	cmp	r2, #108	; 0x6c
  408522:	bf03      	ittte	eq
  408524:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  408528:	f043 0320 	orreq.w	r3, r3, #32
  40852c:	f108 0801 	addeq.w	r8, r8, #1
  408530:	f043 0310 	orrne.w	r3, r3, #16
  408534:	e576      	b.n	408024 <_vfiprintf_r+0xe4>
  408536:	bf00      	nop
  408538:	0040db24 	.word	0x0040db24
  40853c:	0040db34 	.word	0x0040db34
  408540:	0040dae4 	.word	0x0040dae4
  408544:	0040dad0 	.word	0x0040dad0
  408548:	9907      	ldr	r1, [sp, #28]
  40854a:	680e      	ldr	r6, [r1, #0]
  40854c:	460a      	mov	r2, r1
  40854e:	2e00      	cmp	r6, #0
  408550:	f102 0204 	add.w	r2, r2, #4
  408554:	f6ff ae0f 	blt.w	408176 <_vfiprintf_r+0x236>
  408558:	9207      	str	r2, [sp, #28]
  40855a:	f898 2000 	ldrb.w	r2, [r8]
  40855e:	e561      	b.n	408024 <_vfiprintf_r+0xe4>
  408560:	f898 2000 	ldrb.w	r2, [r8]
  408564:	2001      	movs	r0, #1
  408566:	252b      	movs	r5, #43	; 0x2b
  408568:	e55c      	b.n	408024 <_vfiprintf_r+0xe4>
  40856a:	9907      	ldr	r1, [sp, #28]
  40856c:	9608      	str	r6, [sp, #32]
  40856e:	f8d1 b000 	ldr.w	fp, [r1]
  408572:	f04f 0200 	mov.w	r2, #0
  408576:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40857a:	1d0e      	adds	r6, r1, #4
  40857c:	f1bb 0f00 	cmp.w	fp, #0
  408580:	f000 82e5 	beq.w	408b4e <_vfiprintf_r+0xc0e>
  408584:	1c67      	adds	r7, r4, #1
  408586:	f000 82c4 	beq.w	408b12 <_vfiprintf_r+0xbd2>
  40858a:	4622      	mov	r2, r4
  40858c:	2100      	movs	r1, #0
  40858e:	4658      	mov	r0, fp
  408590:	9301      	str	r3, [sp, #4]
  408592:	f002 fba5 	bl	40ace0 <memchr>
  408596:	9b01      	ldr	r3, [sp, #4]
  408598:	2800      	cmp	r0, #0
  40859a:	f000 82e5 	beq.w	408b68 <_vfiprintf_r+0xc28>
  40859e:	eba0 020b 	sub.w	r2, r0, fp
  4085a2:	9205      	str	r2, [sp, #20]
  4085a4:	9607      	str	r6, [sp, #28]
  4085a6:	9302      	str	r3, [sp, #8]
  4085a8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4085ac:	2400      	movs	r4, #0
  4085ae:	e619      	b.n	4081e4 <_vfiprintf_r+0x2a4>
  4085b0:	f898 2000 	ldrb.w	r2, [r8]
  4085b4:	2a2a      	cmp	r2, #42	; 0x2a
  4085b6:	f108 0701 	add.w	r7, r8, #1
  4085ba:	f000 82e9 	beq.w	408b90 <_vfiprintf_r+0xc50>
  4085be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4085c2:	2909      	cmp	r1, #9
  4085c4:	46b8      	mov	r8, r7
  4085c6:	f04f 0400 	mov.w	r4, #0
  4085ca:	f63f ad2d 	bhi.w	408028 <_vfiprintf_r+0xe8>
  4085ce:	f818 2b01 	ldrb.w	r2, [r8], #1
  4085d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4085d6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4085da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4085de:	2909      	cmp	r1, #9
  4085e0:	d9f5      	bls.n	4085ce <_vfiprintf_r+0x68e>
  4085e2:	e521      	b.n	408028 <_vfiprintf_r+0xe8>
  4085e4:	f043 0320 	orr.w	r3, r3, #32
  4085e8:	f898 2000 	ldrb.w	r2, [r8]
  4085ec:	e51a      	b.n	408024 <_vfiprintf_r+0xe4>
  4085ee:	9608      	str	r6, [sp, #32]
  4085f0:	2800      	cmp	r0, #0
  4085f2:	f040 82db 	bne.w	408bac <_vfiprintf_r+0xc6c>
  4085f6:	2a00      	cmp	r2, #0
  4085f8:	f000 80e7 	beq.w	4087ca <_vfiprintf_r+0x88a>
  4085fc:	2101      	movs	r1, #1
  4085fe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  408602:	f04f 0200 	mov.w	r2, #0
  408606:	9101      	str	r1, [sp, #4]
  408608:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40860c:	9105      	str	r1, [sp, #20]
  40860e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408612:	e77b      	b.n	40850c <_vfiprintf_r+0x5cc>
  408614:	9a07      	ldr	r2, [sp, #28]
  408616:	6813      	ldr	r3, [r2, #0]
  408618:	3204      	adds	r2, #4
  40861a:	9207      	str	r2, [sp, #28]
  40861c:	9a03      	ldr	r2, [sp, #12]
  40861e:	601a      	str	r2, [r3, #0]
  408620:	e4cb      	b.n	407fba <_vfiprintf_r+0x7a>
  408622:	aa0f      	add	r2, sp, #60	; 0x3c
  408624:	9904      	ldr	r1, [sp, #16]
  408626:	4620      	mov	r0, r4
  408628:	f7ff fc4a 	bl	407ec0 <__sprint_r.part.0>
  40862c:	2800      	cmp	r0, #0
  40862e:	f040 8139 	bne.w	4088a4 <_vfiprintf_r+0x964>
  408632:	9910      	ldr	r1, [sp, #64]	; 0x40
  408634:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408636:	f101 0c01 	add.w	ip, r1, #1
  40863a:	46ce      	mov	lr, r9
  40863c:	e5ff      	b.n	40823e <_vfiprintf_r+0x2fe>
  40863e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408640:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408642:	1c48      	adds	r0, r1, #1
  408644:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408648:	2d00      	cmp	r5, #0
  40864a:	f43f ae22 	beq.w	408292 <_vfiprintf_r+0x352>
  40864e:	3201      	adds	r2, #1
  408650:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  408654:	2101      	movs	r1, #1
  408656:	2807      	cmp	r0, #7
  408658:	9211      	str	r2, [sp, #68]	; 0x44
  40865a:	9010      	str	r0, [sp, #64]	; 0x40
  40865c:	f8ca 5000 	str.w	r5, [sl]
  408660:	f8ca 1004 	str.w	r1, [sl, #4]
  408664:	f340 8108 	ble.w	408878 <_vfiprintf_r+0x938>
  408668:	2a00      	cmp	r2, #0
  40866a:	f040 81bc 	bne.w	4089e6 <_vfiprintf_r+0xaa6>
  40866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408670:	2b00      	cmp	r3, #0
  408672:	f43f ae1f 	beq.w	4082b4 <_vfiprintf_r+0x374>
  408676:	ab0e      	add	r3, sp, #56	; 0x38
  408678:	2202      	movs	r2, #2
  40867a:	4608      	mov	r0, r1
  40867c:	931c      	str	r3, [sp, #112]	; 0x70
  40867e:	921d      	str	r2, [sp, #116]	; 0x74
  408680:	46ca      	mov	sl, r9
  408682:	4601      	mov	r1, r0
  408684:	f10a 0a08 	add.w	sl, sl, #8
  408688:	3001      	adds	r0, #1
  40868a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40868c:	2b80      	cmp	r3, #128	; 0x80
  40868e:	f43f ae19 	beq.w	4082c4 <_vfiprintf_r+0x384>
  408692:	9b05      	ldr	r3, [sp, #20]
  408694:	1ae4      	subs	r4, r4, r3
  408696:	2c00      	cmp	r4, #0
  408698:	dd2e      	ble.n	4086f8 <_vfiprintf_r+0x7b8>
  40869a:	2c10      	cmp	r4, #16
  40869c:	4db3      	ldr	r5, [pc, #716]	; (40896c <_vfiprintf_r+0xa2c>)
  40869e:	dd1e      	ble.n	4086de <_vfiprintf_r+0x79e>
  4086a0:	46d6      	mov	lr, sl
  4086a2:	2610      	movs	r6, #16
  4086a4:	9f06      	ldr	r7, [sp, #24]
  4086a6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4086aa:	e006      	b.n	4086ba <_vfiprintf_r+0x77a>
  4086ac:	1c88      	adds	r0, r1, #2
  4086ae:	f10e 0e08 	add.w	lr, lr, #8
  4086b2:	4619      	mov	r1, r3
  4086b4:	3c10      	subs	r4, #16
  4086b6:	2c10      	cmp	r4, #16
  4086b8:	dd10      	ble.n	4086dc <_vfiprintf_r+0x79c>
  4086ba:	1c4b      	adds	r3, r1, #1
  4086bc:	3210      	adds	r2, #16
  4086be:	2b07      	cmp	r3, #7
  4086c0:	9211      	str	r2, [sp, #68]	; 0x44
  4086c2:	e88e 0060 	stmia.w	lr, {r5, r6}
  4086c6:	9310      	str	r3, [sp, #64]	; 0x40
  4086c8:	ddf0      	ble.n	4086ac <_vfiprintf_r+0x76c>
  4086ca:	2a00      	cmp	r2, #0
  4086cc:	d165      	bne.n	40879a <_vfiprintf_r+0x85a>
  4086ce:	3c10      	subs	r4, #16
  4086d0:	2c10      	cmp	r4, #16
  4086d2:	f04f 0001 	mov.w	r0, #1
  4086d6:	4611      	mov	r1, r2
  4086d8:	46ce      	mov	lr, r9
  4086da:	dcee      	bgt.n	4086ba <_vfiprintf_r+0x77a>
  4086dc:	46f2      	mov	sl, lr
  4086de:	4422      	add	r2, r4
  4086e0:	2807      	cmp	r0, #7
  4086e2:	9211      	str	r2, [sp, #68]	; 0x44
  4086e4:	f8ca 5000 	str.w	r5, [sl]
  4086e8:	f8ca 4004 	str.w	r4, [sl, #4]
  4086ec:	9010      	str	r0, [sp, #64]	; 0x40
  4086ee:	f300 8085 	bgt.w	4087fc <_vfiprintf_r+0x8bc>
  4086f2:	f10a 0a08 	add.w	sl, sl, #8
  4086f6:	3001      	adds	r0, #1
  4086f8:	9905      	ldr	r1, [sp, #20]
  4086fa:	f8ca b000 	str.w	fp, [sl]
  4086fe:	440a      	add	r2, r1
  408700:	2807      	cmp	r0, #7
  408702:	9211      	str	r2, [sp, #68]	; 0x44
  408704:	f8ca 1004 	str.w	r1, [sl, #4]
  408708:	9010      	str	r0, [sp, #64]	; 0x40
  40870a:	f340 8082 	ble.w	408812 <_vfiprintf_r+0x8d2>
  40870e:	2a00      	cmp	r2, #0
  408710:	f040 8118 	bne.w	408944 <_vfiprintf_r+0xa04>
  408714:	9b02      	ldr	r3, [sp, #8]
  408716:	9210      	str	r2, [sp, #64]	; 0x40
  408718:	0758      	lsls	r0, r3, #29
  40871a:	d535      	bpl.n	408788 <_vfiprintf_r+0x848>
  40871c:	9b08      	ldr	r3, [sp, #32]
  40871e:	9901      	ldr	r1, [sp, #4]
  408720:	1a5c      	subs	r4, r3, r1
  408722:	2c00      	cmp	r4, #0
  408724:	f340 80e7 	ble.w	4088f6 <_vfiprintf_r+0x9b6>
  408728:	46ca      	mov	sl, r9
  40872a:	2c10      	cmp	r4, #16
  40872c:	f340 8218 	ble.w	408b60 <_vfiprintf_r+0xc20>
  408730:	9910      	ldr	r1, [sp, #64]	; 0x40
  408732:	4e8f      	ldr	r6, [pc, #572]	; (408970 <_vfiprintf_r+0xa30>)
  408734:	9f06      	ldr	r7, [sp, #24]
  408736:	f8dd b010 	ldr.w	fp, [sp, #16]
  40873a:	2510      	movs	r5, #16
  40873c:	e006      	b.n	40874c <_vfiprintf_r+0x80c>
  40873e:	1c88      	adds	r0, r1, #2
  408740:	f10a 0a08 	add.w	sl, sl, #8
  408744:	4619      	mov	r1, r3
  408746:	3c10      	subs	r4, #16
  408748:	2c10      	cmp	r4, #16
  40874a:	dd11      	ble.n	408770 <_vfiprintf_r+0x830>
  40874c:	1c4b      	adds	r3, r1, #1
  40874e:	3210      	adds	r2, #16
  408750:	2b07      	cmp	r3, #7
  408752:	9211      	str	r2, [sp, #68]	; 0x44
  408754:	f8ca 6000 	str.w	r6, [sl]
  408758:	f8ca 5004 	str.w	r5, [sl, #4]
  40875c:	9310      	str	r3, [sp, #64]	; 0x40
  40875e:	ddee      	ble.n	40873e <_vfiprintf_r+0x7fe>
  408760:	bb42      	cbnz	r2, 4087b4 <_vfiprintf_r+0x874>
  408762:	3c10      	subs	r4, #16
  408764:	2c10      	cmp	r4, #16
  408766:	f04f 0001 	mov.w	r0, #1
  40876a:	4611      	mov	r1, r2
  40876c:	46ca      	mov	sl, r9
  40876e:	dced      	bgt.n	40874c <_vfiprintf_r+0x80c>
  408770:	4422      	add	r2, r4
  408772:	2807      	cmp	r0, #7
  408774:	9211      	str	r2, [sp, #68]	; 0x44
  408776:	f8ca 6000 	str.w	r6, [sl]
  40877a:	f8ca 4004 	str.w	r4, [sl, #4]
  40877e:	9010      	str	r0, [sp, #64]	; 0x40
  408780:	dd51      	ble.n	408826 <_vfiprintf_r+0x8e6>
  408782:	2a00      	cmp	r2, #0
  408784:	f040 819b 	bne.w	408abe <_vfiprintf_r+0xb7e>
  408788:	9b03      	ldr	r3, [sp, #12]
  40878a:	9a08      	ldr	r2, [sp, #32]
  40878c:	9901      	ldr	r1, [sp, #4]
  40878e:	428a      	cmp	r2, r1
  408790:	bfac      	ite	ge
  408792:	189b      	addge	r3, r3, r2
  408794:	185b      	addlt	r3, r3, r1
  408796:	9303      	str	r3, [sp, #12]
  408798:	e04e      	b.n	408838 <_vfiprintf_r+0x8f8>
  40879a:	aa0f      	add	r2, sp, #60	; 0x3c
  40879c:	4651      	mov	r1, sl
  40879e:	4638      	mov	r0, r7
  4087a0:	f7ff fb8e 	bl	407ec0 <__sprint_r.part.0>
  4087a4:	2800      	cmp	r0, #0
  4087a6:	f040 813f 	bne.w	408a28 <_vfiprintf_r+0xae8>
  4087aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4087ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087ae:	1c48      	adds	r0, r1, #1
  4087b0:	46ce      	mov	lr, r9
  4087b2:	e77f      	b.n	4086b4 <_vfiprintf_r+0x774>
  4087b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4087b6:	4659      	mov	r1, fp
  4087b8:	4638      	mov	r0, r7
  4087ba:	f7ff fb81 	bl	407ec0 <__sprint_r.part.0>
  4087be:	b960      	cbnz	r0, 4087da <_vfiprintf_r+0x89a>
  4087c0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4087c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087c4:	1c48      	adds	r0, r1, #1
  4087c6:	46ca      	mov	sl, r9
  4087c8:	e7bd      	b.n	408746 <_vfiprintf_r+0x806>
  4087ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4087cc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4087d0:	2b00      	cmp	r3, #0
  4087d2:	f040 81d4 	bne.w	408b7e <_vfiprintf_r+0xc3e>
  4087d6:	2300      	movs	r3, #0
  4087d8:	9310      	str	r3, [sp, #64]	; 0x40
  4087da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4087de:	f013 0f01 	tst.w	r3, #1
  4087e2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4087e6:	d102      	bne.n	4087ee <_vfiprintf_r+0x8ae>
  4087e8:	059a      	lsls	r2, r3, #22
  4087ea:	f140 80de 	bpl.w	4089aa <_vfiprintf_r+0xa6a>
  4087ee:	065b      	lsls	r3, r3, #25
  4087f0:	f53f acb2 	bmi.w	408158 <_vfiprintf_r+0x218>
  4087f4:	9803      	ldr	r0, [sp, #12]
  4087f6:	b02d      	add	sp, #180	; 0xb4
  4087f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087fc:	2a00      	cmp	r2, #0
  4087fe:	f040 8106 	bne.w	408a0e <_vfiprintf_r+0xace>
  408802:	9a05      	ldr	r2, [sp, #20]
  408804:	921d      	str	r2, [sp, #116]	; 0x74
  408806:	2301      	movs	r3, #1
  408808:	9211      	str	r2, [sp, #68]	; 0x44
  40880a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40880e:	9310      	str	r3, [sp, #64]	; 0x40
  408810:	46ca      	mov	sl, r9
  408812:	f10a 0a08 	add.w	sl, sl, #8
  408816:	9b02      	ldr	r3, [sp, #8]
  408818:	0759      	lsls	r1, r3, #29
  40881a:	d504      	bpl.n	408826 <_vfiprintf_r+0x8e6>
  40881c:	9b08      	ldr	r3, [sp, #32]
  40881e:	9901      	ldr	r1, [sp, #4]
  408820:	1a5c      	subs	r4, r3, r1
  408822:	2c00      	cmp	r4, #0
  408824:	dc81      	bgt.n	40872a <_vfiprintf_r+0x7ea>
  408826:	9b03      	ldr	r3, [sp, #12]
  408828:	9908      	ldr	r1, [sp, #32]
  40882a:	9801      	ldr	r0, [sp, #4]
  40882c:	4281      	cmp	r1, r0
  40882e:	bfac      	ite	ge
  408830:	185b      	addge	r3, r3, r1
  408832:	181b      	addlt	r3, r3, r0
  408834:	9303      	str	r3, [sp, #12]
  408836:	bb72      	cbnz	r2, 408896 <_vfiprintf_r+0x956>
  408838:	2300      	movs	r3, #0
  40883a:	9310      	str	r3, [sp, #64]	; 0x40
  40883c:	46ca      	mov	sl, r9
  40883e:	f7ff bbbc 	b.w	407fba <_vfiprintf_r+0x7a>
  408842:	aa0f      	add	r2, sp, #60	; 0x3c
  408844:	9904      	ldr	r1, [sp, #16]
  408846:	4620      	mov	r0, r4
  408848:	f7ff fb3a 	bl	407ec0 <__sprint_r.part.0>
  40884c:	bb50      	cbnz	r0, 4088a4 <_vfiprintf_r+0x964>
  40884e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408850:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408852:	f101 0e01 	add.w	lr, r1, #1
  408856:	46cc      	mov	ip, r9
  408858:	e548      	b.n	4082ec <_vfiprintf_r+0x3ac>
  40885a:	2a00      	cmp	r2, #0
  40885c:	f040 8140 	bne.w	408ae0 <_vfiprintf_r+0xba0>
  408860:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  408864:	2900      	cmp	r1, #0
  408866:	f000 811b 	beq.w	408aa0 <_vfiprintf_r+0xb60>
  40886a:	2201      	movs	r2, #1
  40886c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  408870:	4610      	mov	r0, r2
  408872:	921d      	str	r2, [sp, #116]	; 0x74
  408874:	911c      	str	r1, [sp, #112]	; 0x70
  408876:	46ca      	mov	sl, r9
  408878:	4601      	mov	r1, r0
  40887a:	f10a 0a08 	add.w	sl, sl, #8
  40887e:	3001      	adds	r0, #1
  408880:	e507      	b.n	408292 <_vfiprintf_r+0x352>
  408882:	9b02      	ldr	r3, [sp, #8]
  408884:	2a01      	cmp	r2, #1
  408886:	f000 8098 	beq.w	4089ba <_vfiprintf_r+0xa7a>
  40888a:	2a02      	cmp	r2, #2
  40888c:	d10d      	bne.n	4088aa <_vfiprintf_r+0x96a>
  40888e:	9302      	str	r3, [sp, #8]
  408890:	2600      	movs	r6, #0
  408892:	2700      	movs	r7, #0
  408894:	e5b0      	b.n	4083f8 <_vfiprintf_r+0x4b8>
  408896:	aa0f      	add	r2, sp, #60	; 0x3c
  408898:	9904      	ldr	r1, [sp, #16]
  40889a:	9806      	ldr	r0, [sp, #24]
  40889c:	f7ff fb10 	bl	407ec0 <__sprint_r.part.0>
  4088a0:	2800      	cmp	r0, #0
  4088a2:	d0c9      	beq.n	408838 <_vfiprintf_r+0x8f8>
  4088a4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4088a8:	e797      	b.n	4087da <_vfiprintf_r+0x89a>
  4088aa:	9302      	str	r3, [sp, #8]
  4088ac:	2600      	movs	r6, #0
  4088ae:	2700      	movs	r7, #0
  4088b0:	4649      	mov	r1, r9
  4088b2:	e000      	b.n	4088b6 <_vfiprintf_r+0x976>
  4088b4:	4659      	mov	r1, fp
  4088b6:	08f2      	lsrs	r2, r6, #3
  4088b8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4088bc:	08f8      	lsrs	r0, r7, #3
  4088be:	f006 0307 	and.w	r3, r6, #7
  4088c2:	4607      	mov	r7, r0
  4088c4:	4616      	mov	r6, r2
  4088c6:	3330      	adds	r3, #48	; 0x30
  4088c8:	ea56 0207 	orrs.w	r2, r6, r7
  4088cc:	f801 3c01 	strb.w	r3, [r1, #-1]
  4088d0:	f101 3bff 	add.w	fp, r1, #4294967295
  4088d4:	d1ee      	bne.n	4088b4 <_vfiprintf_r+0x974>
  4088d6:	9a02      	ldr	r2, [sp, #8]
  4088d8:	07d6      	lsls	r6, r2, #31
  4088da:	f57f ad9d 	bpl.w	408418 <_vfiprintf_r+0x4d8>
  4088de:	2b30      	cmp	r3, #48	; 0x30
  4088e0:	f43f ad9a 	beq.w	408418 <_vfiprintf_r+0x4d8>
  4088e4:	3902      	subs	r1, #2
  4088e6:	2330      	movs	r3, #48	; 0x30
  4088e8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4088ec:	eba9 0301 	sub.w	r3, r9, r1
  4088f0:	9305      	str	r3, [sp, #20]
  4088f2:	468b      	mov	fp, r1
  4088f4:	e476      	b.n	4081e4 <_vfiprintf_r+0x2a4>
  4088f6:	9b03      	ldr	r3, [sp, #12]
  4088f8:	9a08      	ldr	r2, [sp, #32]
  4088fa:	428a      	cmp	r2, r1
  4088fc:	bfac      	ite	ge
  4088fe:	189b      	addge	r3, r3, r2
  408900:	185b      	addlt	r3, r3, r1
  408902:	9303      	str	r3, [sp, #12]
  408904:	e798      	b.n	408838 <_vfiprintf_r+0x8f8>
  408906:	2202      	movs	r2, #2
  408908:	e44d      	b.n	4081a6 <_vfiprintf_r+0x266>
  40890a:	2f00      	cmp	r7, #0
  40890c:	bf08      	it	eq
  40890e:	2e0a      	cmpeq	r6, #10
  408910:	d352      	bcc.n	4089b8 <_vfiprintf_r+0xa78>
  408912:	46cb      	mov	fp, r9
  408914:	4630      	mov	r0, r6
  408916:	4639      	mov	r1, r7
  408918:	220a      	movs	r2, #10
  40891a:	2300      	movs	r3, #0
  40891c:	f003 ff46 	bl	40c7ac <__aeabi_uldivmod>
  408920:	3230      	adds	r2, #48	; 0x30
  408922:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  408926:	4630      	mov	r0, r6
  408928:	4639      	mov	r1, r7
  40892a:	2300      	movs	r3, #0
  40892c:	220a      	movs	r2, #10
  40892e:	f003 ff3d 	bl	40c7ac <__aeabi_uldivmod>
  408932:	4606      	mov	r6, r0
  408934:	460f      	mov	r7, r1
  408936:	ea56 0307 	orrs.w	r3, r6, r7
  40893a:	d1eb      	bne.n	408914 <_vfiprintf_r+0x9d4>
  40893c:	e56c      	b.n	408418 <_vfiprintf_r+0x4d8>
  40893e:	9405      	str	r4, [sp, #20]
  408940:	46cb      	mov	fp, r9
  408942:	e44f      	b.n	4081e4 <_vfiprintf_r+0x2a4>
  408944:	aa0f      	add	r2, sp, #60	; 0x3c
  408946:	9904      	ldr	r1, [sp, #16]
  408948:	9806      	ldr	r0, [sp, #24]
  40894a:	f7ff fab9 	bl	407ec0 <__sprint_r.part.0>
  40894e:	2800      	cmp	r0, #0
  408950:	d1a8      	bne.n	4088a4 <_vfiprintf_r+0x964>
  408952:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408954:	46ca      	mov	sl, r9
  408956:	e75e      	b.n	408816 <_vfiprintf_r+0x8d6>
  408958:	aa0f      	add	r2, sp, #60	; 0x3c
  40895a:	9904      	ldr	r1, [sp, #16]
  40895c:	9806      	ldr	r0, [sp, #24]
  40895e:	f7ff faaf 	bl	407ec0 <__sprint_r.part.0>
  408962:	2800      	cmp	r0, #0
  408964:	d19e      	bne.n	4088a4 <_vfiprintf_r+0x964>
  408966:	46ca      	mov	sl, r9
  408968:	f7ff bbc0 	b.w	4080ec <_vfiprintf_r+0x1ac>
  40896c:	0040db34 	.word	0x0040db34
  408970:	0040db24 	.word	0x0040db24
  408974:	3104      	adds	r1, #4
  408976:	6816      	ldr	r6, [r2, #0]
  408978:	9107      	str	r1, [sp, #28]
  40897a:	2201      	movs	r2, #1
  40897c:	2700      	movs	r7, #0
  40897e:	e412      	b.n	4081a6 <_vfiprintf_r+0x266>
  408980:	9807      	ldr	r0, [sp, #28]
  408982:	4601      	mov	r1, r0
  408984:	3104      	adds	r1, #4
  408986:	6806      	ldr	r6, [r0, #0]
  408988:	9107      	str	r1, [sp, #28]
  40898a:	2700      	movs	r7, #0
  40898c:	e40b      	b.n	4081a6 <_vfiprintf_r+0x266>
  40898e:	680e      	ldr	r6, [r1, #0]
  408990:	3104      	adds	r1, #4
  408992:	9107      	str	r1, [sp, #28]
  408994:	2700      	movs	r7, #0
  408996:	e591      	b.n	4084bc <_vfiprintf_r+0x57c>
  408998:	9907      	ldr	r1, [sp, #28]
  40899a:	680e      	ldr	r6, [r1, #0]
  40899c:	460a      	mov	r2, r1
  40899e:	17f7      	asrs	r7, r6, #31
  4089a0:	3204      	adds	r2, #4
  4089a2:	9207      	str	r2, [sp, #28]
  4089a4:	4630      	mov	r0, r6
  4089a6:	4639      	mov	r1, r7
  4089a8:	e50f      	b.n	4083ca <_vfiprintf_r+0x48a>
  4089aa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4089ae:	f001 fe4d 	bl	40a64c <__retarget_lock_release_recursive>
  4089b2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4089b6:	e71a      	b.n	4087ee <_vfiprintf_r+0x8ae>
  4089b8:	9b02      	ldr	r3, [sp, #8]
  4089ba:	9302      	str	r3, [sp, #8]
  4089bc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4089c0:	3630      	adds	r6, #48	; 0x30
  4089c2:	2301      	movs	r3, #1
  4089c4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4089c8:	9305      	str	r3, [sp, #20]
  4089ca:	e40b      	b.n	4081e4 <_vfiprintf_r+0x2a4>
  4089cc:	aa0f      	add	r2, sp, #60	; 0x3c
  4089ce:	9904      	ldr	r1, [sp, #16]
  4089d0:	9806      	ldr	r0, [sp, #24]
  4089d2:	f7ff fa75 	bl	407ec0 <__sprint_r.part.0>
  4089d6:	2800      	cmp	r0, #0
  4089d8:	f47f af64 	bne.w	4088a4 <_vfiprintf_r+0x964>
  4089dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4089de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4089e0:	1c48      	adds	r0, r1, #1
  4089e2:	46ca      	mov	sl, r9
  4089e4:	e651      	b.n	40868a <_vfiprintf_r+0x74a>
  4089e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4089e8:	9904      	ldr	r1, [sp, #16]
  4089ea:	9806      	ldr	r0, [sp, #24]
  4089ec:	f7ff fa68 	bl	407ec0 <__sprint_r.part.0>
  4089f0:	2800      	cmp	r0, #0
  4089f2:	f47f af57 	bne.w	4088a4 <_vfiprintf_r+0x964>
  4089f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4089f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4089fa:	1c48      	adds	r0, r1, #1
  4089fc:	46ca      	mov	sl, r9
  4089fe:	e448      	b.n	408292 <_vfiprintf_r+0x352>
  408a00:	2a00      	cmp	r2, #0
  408a02:	f040 8091 	bne.w	408b28 <_vfiprintf_r+0xbe8>
  408a06:	2001      	movs	r0, #1
  408a08:	4611      	mov	r1, r2
  408a0a:	46ca      	mov	sl, r9
  408a0c:	e641      	b.n	408692 <_vfiprintf_r+0x752>
  408a0e:	aa0f      	add	r2, sp, #60	; 0x3c
  408a10:	9904      	ldr	r1, [sp, #16]
  408a12:	9806      	ldr	r0, [sp, #24]
  408a14:	f7ff fa54 	bl	407ec0 <__sprint_r.part.0>
  408a18:	2800      	cmp	r0, #0
  408a1a:	f47f af43 	bne.w	4088a4 <_vfiprintf_r+0x964>
  408a1e:	9810      	ldr	r0, [sp, #64]	; 0x40
  408a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a22:	3001      	adds	r0, #1
  408a24:	46ca      	mov	sl, r9
  408a26:	e667      	b.n	4086f8 <_vfiprintf_r+0x7b8>
  408a28:	46d3      	mov	fp, sl
  408a2a:	e6d6      	b.n	4087da <_vfiprintf_r+0x89a>
  408a2c:	9e07      	ldr	r6, [sp, #28]
  408a2e:	3607      	adds	r6, #7
  408a30:	f026 0207 	bic.w	r2, r6, #7
  408a34:	f102 0108 	add.w	r1, r2, #8
  408a38:	e9d2 6700 	ldrd	r6, r7, [r2]
  408a3c:	9107      	str	r1, [sp, #28]
  408a3e:	2201      	movs	r2, #1
  408a40:	f7ff bbb1 	b.w	4081a6 <_vfiprintf_r+0x266>
  408a44:	9e07      	ldr	r6, [sp, #28]
  408a46:	3607      	adds	r6, #7
  408a48:	f026 0607 	bic.w	r6, r6, #7
  408a4c:	e9d6 0100 	ldrd	r0, r1, [r6]
  408a50:	f106 0208 	add.w	r2, r6, #8
  408a54:	9207      	str	r2, [sp, #28]
  408a56:	4606      	mov	r6, r0
  408a58:	460f      	mov	r7, r1
  408a5a:	e4b6      	b.n	4083ca <_vfiprintf_r+0x48a>
  408a5c:	9e07      	ldr	r6, [sp, #28]
  408a5e:	3607      	adds	r6, #7
  408a60:	f026 0207 	bic.w	r2, r6, #7
  408a64:	f102 0108 	add.w	r1, r2, #8
  408a68:	e9d2 6700 	ldrd	r6, r7, [r2]
  408a6c:	9107      	str	r1, [sp, #28]
  408a6e:	2200      	movs	r2, #0
  408a70:	f7ff bb99 	b.w	4081a6 <_vfiprintf_r+0x266>
  408a74:	9e07      	ldr	r6, [sp, #28]
  408a76:	3607      	adds	r6, #7
  408a78:	f026 0107 	bic.w	r1, r6, #7
  408a7c:	f101 0008 	add.w	r0, r1, #8
  408a80:	9007      	str	r0, [sp, #28]
  408a82:	e9d1 6700 	ldrd	r6, r7, [r1]
  408a86:	e519      	b.n	4084bc <_vfiprintf_r+0x57c>
  408a88:	46cb      	mov	fp, r9
  408a8a:	f7ff bbab 	b.w	4081e4 <_vfiprintf_r+0x2a4>
  408a8e:	252d      	movs	r5, #45	; 0x2d
  408a90:	4276      	negs	r6, r6
  408a92:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  408a96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408a9a:	2201      	movs	r2, #1
  408a9c:	f7ff bb88 	b.w	4081b0 <_vfiprintf_r+0x270>
  408aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408aa2:	b9b3      	cbnz	r3, 408ad2 <_vfiprintf_r+0xb92>
  408aa4:	4611      	mov	r1, r2
  408aa6:	2001      	movs	r0, #1
  408aa8:	46ca      	mov	sl, r9
  408aaa:	e5f2      	b.n	408692 <_vfiprintf_r+0x752>
  408aac:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408ab0:	f001 fdcc 	bl	40a64c <__retarget_lock_release_recursive>
  408ab4:	f04f 33ff 	mov.w	r3, #4294967295
  408ab8:	9303      	str	r3, [sp, #12]
  408aba:	f7ff bb50 	b.w	40815e <_vfiprintf_r+0x21e>
  408abe:	aa0f      	add	r2, sp, #60	; 0x3c
  408ac0:	9904      	ldr	r1, [sp, #16]
  408ac2:	9806      	ldr	r0, [sp, #24]
  408ac4:	f7ff f9fc 	bl	407ec0 <__sprint_r.part.0>
  408ac8:	2800      	cmp	r0, #0
  408aca:	f47f aeeb 	bne.w	4088a4 <_vfiprintf_r+0x964>
  408ace:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408ad0:	e6a9      	b.n	408826 <_vfiprintf_r+0x8e6>
  408ad2:	ab0e      	add	r3, sp, #56	; 0x38
  408ad4:	2202      	movs	r2, #2
  408ad6:	931c      	str	r3, [sp, #112]	; 0x70
  408ad8:	921d      	str	r2, [sp, #116]	; 0x74
  408ada:	2001      	movs	r0, #1
  408adc:	46ca      	mov	sl, r9
  408ade:	e5d0      	b.n	408682 <_vfiprintf_r+0x742>
  408ae0:	aa0f      	add	r2, sp, #60	; 0x3c
  408ae2:	9904      	ldr	r1, [sp, #16]
  408ae4:	9806      	ldr	r0, [sp, #24]
  408ae6:	f7ff f9eb 	bl	407ec0 <__sprint_r.part.0>
  408aea:	2800      	cmp	r0, #0
  408aec:	f47f aeda 	bne.w	4088a4 <_vfiprintf_r+0x964>
  408af0:	9910      	ldr	r1, [sp, #64]	; 0x40
  408af2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408af4:	1c48      	adds	r0, r1, #1
  408af6:	46ca      	mov	sl, r9
  408af8:	e5a4      	b.n	408644 <_vfiprintf_r+0x704>
  408afa:	9a07      	ldr	r2, [sp, #28]
  408afc:	9903      	ldr	r1, [sp, #12]
  408afe:	6813      	ldr	r3, [r2, #0]
  408b00:	17cd      	asrs	r5, r1, #31
  408b02:	4608      	mov	r0, r1
  408b04:	3204      	adds	r2, #4
  408b06:	4629      	mov	r1, r5
  408b08:	9207      	str	r2, [sp, #28]
  408b0a:	e9c3 0100 	strd	r0, r1, [r3]
  408b0e:	f7ff ba54 	b.w	407fba <_vfiprintf_r+0x7a>
  408b12:	4658      	mov	r0, fp
  408b14:	9607      	str	r6, [sp, #28]
  408b16:	9302      	str	r3, [sp, #8]
  408b18:	f7fd fcd2 	bl	4064c0 <strlen>
  408b1c:	2400      	movs	r4, #0
  408b1e:	9005      	str	r0, [sp, #20]
  408b20:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408b24:	f7ff bb5e 	b.w	4081e4 <_vfiprintf_r+0x2a4>
  408b28:	aa0f      	add	r2, sp, #60	; 0x3c
  408b2a:	9904      	ldr	r1, [sp, #16]
  408b2c:	9806      	ldr	r0, [sp, #24]
  408b2e:	f7ff f9c7 	bl	407ec0 <__sprint_r.part.0>
  408b32:	2800      	cmp	r0, #0
  408b34:	f47f aeb6 	bne.w	4088a4 <_vfiprintf_r+0x964>
  408b38:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b3c:	1c48      	adds	r0, r1, #1
  408b3e:	46ca      	mov	sl, r9
  408b40:	e5a7      	b.n	408692 <_vfiprintf_r+0x752>
  408b42:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b44:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b46:	4e20      	ldr	r6, [pc, #128]	; (408bc8 <_vfiprintf_r+0xc88>)
  408b48:	3101      	adds	r1, #1
  408b4a:	f7ff bb90 	b.w	40826e <_vfiprintf_r+0x32e>
  408b4e:	2c06      	cmp	r4, #6
  408b50:	bf28      	it	cs
  408b52:	2406      	movcs	r4, #6
  408b54:	9405      	str	r4, [sp, #20]
  408b56:	9607      	str	r6, [sp, #28]
  408b58:	9401      	str	r4, [sp, #4]
  408b5a:	f8df b070 	ldr.w	fp, [pc, #112]	; 408bcc <_vfiprintf_r+0xc8c>
  408b5e:	e4d5      	b.n	40850c <_vfiprintf_r+0x5cc>
  408b60:	9810      	ldr	r0, [sp, #64]	; 0x40
  408b62:	4e19      	ldr	r6, [pc, #100]	; (408bc8 <_vfiprintf_r+0xc88>)
  408b64:	3001      	adds	r0, #1
  408b66:	e603      	b.n	408770 <_vfiprintf_r+0x830>
  408b68:	9405      	str	r4, [sp, #20]
  408b6a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408b6e:	9607      	str	r6, [sp, #28]
  408b70:	9302      	str	r3, [sp, #8]
  408b72:	4604      	mov	r4, r0
  408b74:	f7ff bb36 	b.w	4081e4 <_vfiprintf_r+0x2a4>
  408b78:	4686      	mov	lr, r0
  408b7a:	f7ff bbce 	b.w	40831a <_vfiprintf_r+0x3da>
  408b7e:	9806      	ldr	r0, [sp, #24]
  408b80:	aa0f      	add	r2, sp, #60	; 0x3c
  408b82:	4659      	mov	r1, fp
  408b84:	f7ff f99c 	bl	407ec0 <__sprint_r.part.0>
  408b88:	2800      	cmp	r0, #0
  408b8a:	f43f ae24 	beq.w	4087d6 <_vfiprintf_r+0x896>
  408b8e:	e624      	b.n	4087da <_vfiprintf_r+0x89a>
  408b90:	9907      	ldr	r1, [sp, #28]
  408b92:	f898 2001 	ldrb.w	r2, [r8, #1]
  408b96:	680c      	ldr	r4, [r1, #0]
  408b98:	3104      	adds	r1, #4
  408b9a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  408b9e:	46b8      	mov	r8, r7
  408ba0:	9107      	str	r1, [sp, #28]
  408ba2:	f7ff ba3f 	b.w	408024 <_vfiprintf_r+0xe4>
  408ba6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408baa:	e43c      	b.n	408426 <_vfiprintf_r+0x4e6>
  408bac:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bb0:	e521      	b.n	4085f6 <_vfiprintf_r+0x6b6>
  408bb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bb6:	f7ff bbf4 	b.w	4083a2 <_vfiprintf_r+0x462>
  408bba:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bbe:	e491      	b.n	4084e4 <_vfiprintf_r+0x5a4>
  408bc0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bc4:	e469      	b.n	40849a <_vfiprintf_r+0x55a>
  408bc6:	bf00      	nop
  408bc8:	0040db24 	.word	0x0040db24
  408bcc:	0040daf8 	.word	0x0040daf8

00408bd0 <__sbprintf>:
  408bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408bd4:	460c      	mov	r4, r1
  408bd6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408bda:	8989      	ldrh	r1, [r1, #12]
  408bdc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408bde:	89e5      	ldrh	r5, [r4, #14]
  408be0:	9619      	str	r6, [sp, #100]	; 0x64
  408be2:	f021 0102 	bic.w	r1, r1, #2
  408be6:	4606      	mov	r6, r0
  408be8:	69e0      	ldr	r0, [r4, #28]
  408bea:	f8ad 100c 	strh.w	r1, [sp, #12]
  408bee:	4617      	mov	r7, r2
  408bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408bf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408bf6:	f8ad 500e 	strh.w	r5, [sp, #14]
  408bfa:	4698      	mov	r8, r3
  408bfc:	ad1a      	add	r5, sp, #104	; 0x68
  408bfe:	2300      	movs	r3, #0
  408c00:	9007      	str	r0, [sp, #28]
  408c02:	a816      	add	r0, sp, #88	; 0x58
  408c04:	9209      	str	r2, [sp, #36]	; 0x24
  408c06:	9306      	str	r3, [sp, #24]
  408c08:	9500      	str	r5, [sp, #0]
  408c0a:	9504      	str	r5, [sp, #16]
  408c0c:	9102      	str	r1, [sp, #8]
  408c0e:	9105      	str	r1, [sp, #20]
  408c10:	f001 fd16 	bl	40a640 <__retarget_lock_init_recursive>
  408c14:	4643      	mov	r3, r8
  408c16:	463a      	mov	r2, r7
  408c18:	4669      	mov	r1, sp
  408c1a:	4630      	mov	r0, r6
  408c1c:	f7ff f990 	bl	407f40 <_vfiprintf_r>
  408c20:	1e05      	subs	r5, r0, #0
  408c22:	db07      	blt.n	408c34 <__sbprintf+0x64>
  408c24:	4630      	mov	r0, r6
  408c26:	4669      	mov	r1, sp
  408c28:	f001 f8e8 	bl	409dfc <_fflush_r>
  408c2c:	2800      	cmp	r0, #0
  408c2e:	bf18      	it	ne
  408c30:	f04f 35ff 	movne.w	r5, #4294967295
  408c34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408c38:	065b      	lsls	r3, r3, #25
  408c3a:	d503      	bpl.n	408c44 <__sbprintf+0x74>
  408c3c:	89a3      	ldrh	r3, [r4, #12]
  408c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c42:	81a3      	strh	r3, [r4, #12]
  408c44:	9816      	ldr	r0, [sp, #88]	; 0x58
  408c46:	f001 fcfd 	bl	40a644 <__retarget_lock_close_recursive>
  408c4a:	4628      	mov	r0, r5
  408c4c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408c54 <__swsetup_r>:
  408c54:	b538      	push	{r3, r4, r5, lr}
  408c56:	4b30      	ldr	r3, [pc, #192]	; (408d18 <__swsetup_r+0xc4>)
  408c58:	681b      	ldr	r3, [r3, #0]
  408c5a:	4605      	mov	r5, r0
  408c5c:	460c      	mov	r4, r1
  408c5e:	b113      	cbz	r3, 408c66 <__swsetup_r+0x12>
  408c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408c62:	2a00      	cmp	r2, #0
  408c64:	d038      	beq.n	408cd8 <__swsetup_r+0x84>
  408c66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408c6a:	b293      	uxth	r3, r2
  408c6c:	0718      	lsls	r0, r3, #28
  408c6e:	d50c      	bpl.n	408c8a <__swsetup_r+0x36>
  408c70:	6920      	ldr	r0, [r4, #16]
  408c72:	b1a8      	cbz	r0, 408ca0 <__swsetup_r+0x4c>
  408c74:	f013 0201 	ands.w	r2, r3, #1
  408c78:	d01e      	beq.n	408cb8 <__swsetup_r+0x64>
  408c7a:	6963      	ldr	r3, [r4, #20]
  408c7c:	2200      	movs	r2, #0
  408c7e:	425b      	negs	r3, r3
  408c80:	61a3      	str	r3, [r4, #24]
  408c82:	60a2      	str	r2, [r4, #8]
  408c84:	b1f0      	cbz	r0, 408cc4 <__swsetup_r+0x70>
  408c86:	2000      	movs	r0, #0
  408c88:	bd38      	pop	{r3, r4, r5, pc}
  408c8a:	06d9      	lsls	r1, r3, #27
  408c8c:	d53c      	bpl.n	408d08 <__swsetup_r+0xb4>
  408c8e:	0758      	lsls	r0, r3, #29
  408c90:	d426      	bmi.n	408ce0 <__swsetup_r+0x8c>
  408c92:	6920      	ldr	r0, [r4, #16]
  408c94:	f042 0308 	orr.w	r3, r2, #8
  408c98:	81a3      	strh	r3, [r4, #12]
  408c9a:	b29b      	uxth	r3, r3
  408c9c:	2800      	cmp	r0, #0
  408c9e:	d1e9      	bne.n	408c74 <__swsetup_r+0x20>
  408ca0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408ca4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408ca8:	d0e4      	beq.n	408c74 <__swsetup_r+0x20>
  408caa:	4628      	mov	r0, r5
  408cac:	4621      	mov	r1, r4
  408cae:	f001 fcfd 	bl	40a6ac <__smakebuf_r>
  408cb2:	89a3      	ldrh	r3, [r4, #12]
  408cb4:	6920      	ldr	r0, [r4, #16]
  408cb6:	e7dd      	b.n	408c74 <__swsetup_r+0x20>
  408cb8:	0799      	lsls	r1, r3, #30
  408cba:	bf58      	it	pl
  408cbc:	6962      	ldrpl	r2, [r4, #20]
  408cbe:	60a2      	str	r2, [r4, #8]
  408cc0:	2800      	cmp	r0, #0
  408cc2:	d1e0      	bne.n	408c86 <__swsetup_r+0x32>
  408cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408cc8:	061a      	lsls	r2, r3, #24
  408cca:	d5dd      	bpl.n	408c88 <__swsetup_r+0x34>
  408ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408cd0:	81a3      	strh	r3, [r4, #12]
  408cd2:	f04f 30ff 	mov.w	r0, #4294967295
  408cd6:	bd38      	pop	{r3, r4, r5, pc}
  408cd8:	4618      	mov	r0, r3
  408cda:	f001 f8e7 	bl	409eac <__sinit>
  408cde:	e7c2      	b.n	408c66 <__swsetup_r+0x12>
  408ce0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408ce2:	b151      	cbz	r1, 408cfa <__swsetup_r+0xa6>
  408ce4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408ce8:	4299      	cmp	r1, r3
  408cea:	d004      	beq.n	408cf6 <__swsetup_r+0xa2>
  408cec:	4628      	mov	r0, r5
  408cee:	f001 fa03 	bl	40a0f8 <_free_r>
  408cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408cf6:	2300      	movs	r3, #0
  408cf8:	6323      	str	r3, [r4, #48]	; 0x30
  408cfa:	2300      	movs	r3, #0
  408cfc:	6920      	ldr	r0, [r4, #16]
  408cfe:	6063      	str	r3, [r4, #4]
  408d00:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408d04:	6020      	str	r0, [r4, #0]
  408d06:	e7c5      	b.n	408c94 <__swsetup_r+0x40>
  408d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408d0c:	2309      	movs	r3, #9
  408d0e:	602b      	str	r3, [r5, #0]
  408d10:	f04f 30ff 	mov.w	r0, #4294967295
  408d14:	81a2      	strh	r2, [r4, #12]
  408d16:	bd38      	pop	{r3, r4, r5, pc}
  408d18:	20400024 	.word	0x20400024

00408d1c <register_fini>:
  408d1c:	4b02      	ldr	r3, [pc, #8]	; (408d28 <register_fini+0xc>)
  408d1e:	b113      	cbz	r3, 408d26 <register_fini+0xa>
  408d20:	4802      	ldr	r0, [pc, #8]	; (408d2c <register_fini+0x10>)
  408d22:	f000 b805 	b.w	408d30 <atexit>
  408d26:	4770      	bx	lr
  408d28:	00000000 	.word	0x00000000
  408d2c:	00409f1d 	.word	0x00409f1d

00408d30 <atexit>:
  408d30:	2300      	movs	r3, #0
  408d32:	4601      	mov	r1, r0
  408d34:	461a      	mov	r2, r3
  408d36:	4618      	mov	r0, r3
  408d38:	f002 bf50 	b.w	40bbdc <__register_exitproc>

00408d3c <quorem>:
  408d3c:	6902      	ldr	r2, [r0, #16]
  408d3e:	690b      	ldr	r3, [r1, #16]
  408d40:	4293      	cmp	r3, r2
  408d42:	f300 808d 	bgt.w	408e60 <quorem+0x124>
  408d46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d4a:	f103 38ff 	add.w	r8, r3, #4294967295
  408d4e:	f101 0714 	add.w	r7, r1, #20
  408d52:	f100 0b14 	add.w	fp, r0, #20
  408d56:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408d5a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408d5e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408d62:	b083      	sub	sp, #12
  408d64:	3201      	adds	r2, #1
  408d66:	fbb3 f9f2 	udiv	r9, r3, r2
  408d6a:	eb0b 0304 	add.w	r3, fp, r4
  408d6e:	9400      	str	r4, [sp, #0]
  408d70:	eb07 0a04 	add.w	sl, r7, r4
  408d74:	9301      	str	r3, [sp, #4]
  408d76:	f1b9 0f00 	cmp.w	r9, #0
  408d7a:	d039      	beq.n	408df0 <quorem+0xb4>
  408d7c:	2500      	movs	r5, #0
  408d7e:	462e      	mov	r6, r5
  408d80:	46bc      	mov	ip, r7
  408d82:	46de      	mov	lr, fp
  408d84:	f85c 4b04 	ldr.w	r4, [ip], #4
  408d88:	f8de 3000 	ldr.w	r3, [lr]
  408d8c:	b2a2      	uxth	r2, r4
  408d8e:	fb09 5502 	mla	r5, r9, r2, r5
  408d92:	0c22      	lsrs	r2, r4, #16
  408d94:	0c2c      	lsrs	r4, r5, #16
  408d96:	fb09 4202 	mla	r2, r9, r2, r4
  408d9a:	b2ad      	uxth	r5, r5
  408d9c:	1b75      	subs	r5, r6, r5
  408d9e:	b296      	uxth	r6, r2
  408da0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408da4:	fa15 f383 	uxtah	r3, r5, r3
  408da8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  408dac:	b29b      	uxth	r3, r3
  408dae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408db2:	45e2      	cmp	sl, ip
  408db4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  408db8:	f84e 3b04 	str.w	r3, [lr], #4
  408dbc:	ea4f 4626 	mov.w	r6, r6, asr #16
  408dc0:	d2e0      	bcs.n	408d84 <quorem+0x48>
  408dc2:	9b00      	ldr	r3, [sp, #0]
  408dc4:	f85b 3003 	ldr.w	r3, [fp, r3]
  408dc8:	b993      	cbnz	r3, 408df0 <quorem+0xb4>
  408dca:	9c01      	ldr	r4, [sp, #4]
  408dcc:	1f23      	subs	r3, r4, #4
  408dce:	459b      	cmp	fp, r3
  408dd0:	d20c      	bcs.n	408dec <quorem+0xb0>
  408dd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408dd6:	b94b      	cbnz	r3, 408dec <quorem+0xb0>
  408dd8:	f1a4 0308 	sub.w	r3, r4, #8
  408ddc:	e002      	b.n	408de4 <quorem+0xa8>
  408dde:	681a      	ldr	r2, [r3, #0]
  408de0:	3b04      	subs	r3, #4
  408de2:	b91a      	cbnz	r2, 408dec <quorem+0xb0>
  408de4:	459b      	cmp	fp, r3
  408de6:	f108 38ff 	add.w	r8, r8, #4294967295
  408dea:	d3f8      	bcc.n	408dde <quorem+0xa2>
  408dec:	f8c0 8010 	str.w	r8, [r0, #16]
  408df0:	4604      	mov	r4, r0
  408df2:	f002 fa63 	bl	40b2bc <__mcmp>
  408df6:	2800      	cmp	r0, #0
  408df8:	db2e      	blt.n	408e58 <quorem+0x11c>
  408dfa:	f109 0901 	add.w	r9, r9, #1
  408dfe:	465d      	mov	r5, fp
  408e00:	2300      	movs	r3, #0
  408e02:	f857 1b04 	ldr.w	r1, [r7], #4
  408e06:	6828      	ldr	r0, [r5, #0]
  408e08:	b28a      	uxth	r2, r1
  408e0a:	1a9a      	subs	r2, r3, r2
  408e0c:	0c0b      	lsrs	r3, r1, #16
  408e0e:	fa12 f280 	uxtah	r2, r2, r0
  408e12:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  408e16:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408e1a:	b292      	uxth	r2, r2
  408e1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408e20:	45ba      	cmp	sl, r7
  408e22:	f845 2b04 	str.w	r2, [r5], #4
  408e26:	ea4f 4323 	mov.w	r3, r3, asr #16
  408e2a:	d2ea      	bcs.n	408e02 <quorem+0xc6>
  408e2c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  408e30:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  408e34:	b982      	cbnz	r2, 408e58 <quorem+0x11c>
  408e36:	1f1a      	subs	r2, r3, #4
  408e38:	4593      	cmp	fp, r2
  408e3a:	d20b      	bcs.n	408e54 <quorem+0x118>
  408e3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408e40:	b942      	cbnz	r2, 408e54 <quorem+0x118>
  408e42:	3b08      	subs	r3, #8
  408e44:	e002      	b.n	408e4c <quorem+0x110>
  408e46:	681a      	ldr	r2, [r3, #0]
  408e48:	3b04      	subs	r3, #4
  408e4a:	b91a      	cbnz	r2, 408e54 <quorem+0x118>
  408e4c:	459b      	cmp	fp, r3
  408e4e:	f108 38ff 	add.w	r8, r8, #4294967295
  408e52:	d3f8      	bcc.n	408e46 <quorem+0x10a>
  408e54:	f8c4 8010 	str.w	r8, [r4, #16]
  408e58:	4648      	mov	r0, r9
  408e5a:	b003      	add	sp, #12
  408e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e60:	2000      	movs	r0, #0
  408e62:	4770      	bx	lr
  408e64:	0000      	movs	r0, r0
	...

00408e68 <_dtoa_r>:
  408e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408e6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  408e6e:	b09b      	sub	sp, #108	; 0x6c
  408e70:	4604      	mov	r4, r0
  408e72:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  408e74:	4692      	mov	sl, r2
  408e76:	469b      	mov	fp, r3
  408e78:	b141      	cbz	r1, 408e8c <_dtoa_r+0x24>
  408e7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  408e7c:	604a      	str	r2, [r1, #4]
  408e7e:	2301      	movs	r3, #1
  408e80:	4093      	lsls	r3, r2
  408e82:	608b      	str	r3, [r1, #8]
  408e84:	f002 f842 	bl	40af0c <_Bfree>
  408e88:	2300      	movs	r3, #0
  408e8a:	6423      	str	r3, [r4, #64]	; 0x40
  408e8c:	f1bb 0f00 	cmp.w	fp, #0
  408e90:	465d      	mov	r5, fp
  408e92:	db35      	blt.n	408f00 <_dtoa_r+0x98>
  408e94:	2300      	movs	r3, #0
  408e96:	6033      	str	r3, [r6, #0]
  408e98:	4b9d      	ldr	r3, [pc, #628]	; (409110 <_dtoa_r+0x2a8>)
  408e9a:	43ab      	bics	r3, r5
  408e9c:	d015      	beq.n	408eca <_dtoa_r+0x62>
  408e9e:	4650      	mov	r0, sl
  408ea0:	4659      	mov	r1, fp
  408ea2:	2200      	movs	r2, #0
  408ea4:	2300      	movs	r3, #0
  408ea6:	f003 fc11 	bl	40c6cc <__aeabi_dcmpeq>
  408eaa:	4680      	mov	r8, r0
  408eac:	2800      	cmp	r0, #0
  408eae:	d02d      	beq.n	408f0c <_dtoa_r+0xa4>
  408eb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408eb2:	2301      	movs	r3, #1
  408eb4:	6013      	str	r3, [r2, #0]
  408eb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408eb8:	2b00      	cmp	r3, #0
  408eba:	f000 80bd 	beq.w	409038 <_dtoa_r+0x1d0>
  408ebe:	4895      	ldr	r0, [pc, #596]	; (409114 <_dtoa_r+0x2ac>)
  408ec0:	6018      	str	r0, [r3, #0]
  408ec2:	3801      	subs	r0, #1
  408ec4:	b01b      	add	sp, #108	; 0x6c
  408ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408eca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408ecc:	f242 730f 	movw	r3, #9999	; 0x270f
  408ed0:	6013      	str	r3, [r2, #0]
  408ed2:	f1ba 0f00 	cmp.w	sl, #0
  408ed6:	d10d      	bne.n	408ef4 <_dtoa_r+0x8c>
  408ed8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  408edc:	b955      	cbnz	r5, 408ef4 <_dtoa_r+0x8c>
  408ede:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408ee0:	488d      	ldr	r0, [pc, #564]	; (409118 <_dtoa_r+0x2b0>)
  408ee2:	2b00      	cmp	r3, #0
  408ee4:	d0ee      	beq.n	408ec4 <_dtoa_r+0x5c>
  408ee6:	f100 0308 	add.w	r3, r0, #8
  408eea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  408eec:	6013      	str	r3, [r2, #0]
  408eee:	b01b      	add	sp, #108	; 0x6c
  408ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ef4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408ef6:	4889      	ldr	r0, [pc, #548]	; (40911c <_dtoa_r+0x2b4>)
  408ef8:	2b00      	cmp	r3, #0
  408efa:	d0e3      	beq.n	408ec4 <_dtoa_r+0x5c>
  408efc:	1cc3      	adds	r3, r0, #3
  408efe:	e7f4      	b.n	408eea <_dtoa_r+0x82>
  408f00:	2301      	movs	r3, #1
  408f02:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  408f06:	6033      	str	r3, [r6, #0]
  408f08:	46ab      	mov	fp, r5
  408f0a:	e7c5      	b.n	408e98 <_dtoa_r+0x30>
  408f0c:	aa18      	add	r2, sp, #96	; 0x60
  408f0e:	ab19      	add	r3, sp, #100	; 0x64
  408f10:	9201      	str	r2, [sp, #4]
  408f12:	9300      	str	r3, [sp, #0]
  408f14:	4652      	mov	r2, sl
  408f16:	465b      	mov	r3, fp
  408f18:	4620      	mov	r0, r4
  408f1a:	f002 fa6f 	bl	40b3fc <__d2b>
  408f1e:	0d2b      	lsrs	r3, r5, #20
  408f20:	4681      	mov	r9, r0
  408f22:	d071      	beq.n	409008 <_dtoa_r+0x1a0>
  408f24:	f3cb 0213 	ubfx	r2, fp, #0, #20
  408f28:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  408f2c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408f2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  408f32:	4650      	mov	r0, sl
  408f34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  408f38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408f3c:	2200      	movs	r2, #0
  408f3e:	4b78      	ldr	r3, [pc, #480]	; (409120 <_dtoa_r+0x2b8>)
  408f40:	f002 ffa8 	bl	40be94 <__aeabi_dsub>
  408f44:	a36c      	add	r3, pc, #432	; (adr r3, 4090f8 <_dtoa_r+0x290>)
  408f46:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f4a:	f003 f957 	bl	40c1fc <__aeabi_dmul>
  408f4e:	a36c      	add	r3, pc, #432	; (adr r3, 409100 <_dtoa_r+0x298>)
  408f50:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f54:	f002 ffa0 	bl	40be98 <__adddf3>
  408f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408f5c:	4630      	mov	r0, r6
  408f5e:	f003 f8e7 	bl	40c130 <__aeabi_i2d>
  408f62:	a369      	add	r3, pc, #420	; (adr r3, 409108 <_dtoa_r+0x2a0>)
  408f64:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f68:	f003 f948 	bl	40c1fc <__aeabi_dmul>
  408f6c:	4602      	mov	r2, r0
  408f6e:	460b      	mov	r3, r1
  408f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408f74:	f002 ff90 	bl	40be98 <__adddf3>
  408f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408f7c:	f003 fbee 	bl	40c75c <__aeabi_d2iz>
  408f80:	2200      	movs	r2, #0
  408f82:	9002      	str	r0, [sp, #8]
  408f84:	2300      	movs	r3, #0
  408f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408f8a:	f003 fba9 	bl	40c6e0 <__aeabi_dcmplt>
  408f8e:	2800      	cmp	r0, #0
  408f90:	f040 8173 	bne.w	40927a <_dtoa_r+0x412>
  408f94:	9d02      	ldr	r5, [sp, #8]
  408f96:	2d16      	cmp	r5, #22
  408f98:	f200 815d 	bhi.w	409256 <_dtoa_r+0x3ee>
  408f9c:	4b61      	ldr	r3, [pc, #388]	; (409124 <_dtoa_r+0x2bc>)
  408f9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
  408fa6:	4652      	mov	r2, sl
  408fa8:	465b      	mov	r3, fp
  408faa:	f003 fbb7 	bl	40c71c <__aeabi_dcmpgt>
  408fae:	2800      	cmp	r0, #0
  408fb0:	f000 81c5 	beq.w	40933e <_dtoa_r+0x4d6>
  408fb4:	1e6b      	subs	r3, r5, #1
  408fb6:	9302      	str	r3, [sp, #8]
  408fb8:	2300      	movs	r3, #0
  408fba:	930e      	str	r3, [sp, #56]	; 0x38
  408fbc:	1bbf      	subs	r7, r7, r6
  408fbe:	1e7b      	subs	r3, r7, #1
  408fc0:	9306      	str	r3, [sp, #24]
  408fc2:	f100 8154 	bmi.w	40926e <_dtoa_r+0x406>
  408fc6:	2300      	movs	r3, #0
  408fc8:	9308      	str	r3, [sp, #32]
  408fca:	9b02      	ldr	r3, [sp, #8]
  408fcc:	2b00      	cmp	r3, #0
  408fce:	f2c0 8145 	blt.w	40925c <_dtoa_r+0x3f4>
  408fd2:	9a06      	ldr	r2, [sp, #24]
  408fd4:	930d      	str	r3, [sp, #52]	; 0x34
  408fd6:	4611      	mov	r1, r2
  408fd8:	4419      	add	r1, r3
  408fda:	2300      	movs	r3, #0
  408fdc:	9106      	str	r1, [sp, #24]
  408fde:	930c      	str	r3, [sp, #48]	; 0x30
  408fe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408fe2:	2b09      	cmp	r3, #9
  408fe4:	d82a      	bhi.n	40903c <_dtoa_r+0x1d4>
  408fe6:	2b05      	cmp	r3, #5
  408fe8:	f340 865b 	ble.w	409ca2 <_dtoa_r+0xe3a>
  408fec:	3b04      	subs	r3, #4
  408fee:	9324      	str	r3, [sp, #144]	; 0x90
  408ff0:	2500      	movs	r5, #0
  408ff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ff4:	3b02      	subs	r3, #2
  408ff6:	2b03      	cmp	r3, #3
  408ff8:	f200 8642 	bhi.w	409c80 <_dtoa_r+0xe18>
  408ffc:	e8df f013 	tbh	[pc, r3, lsl #1]
  409000:	02c903d4 	.word	0x02c903d4
  409004:	046103df 	.word	0x046103df
  409008:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40900a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40900c:	443e      	add	r6, r7
  40900e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  409012:	2b20      	cmp	r3, #32
  409014:	f340 818e 	ble.w	409334 <_dtoa_r+0x4cc>
  409018:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40901c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409020:	409d      	lsls	r5, r3
  409022:	fa2a f000 	lsr.w	r0, sl, r0
  409026:	4328      	orrs	r0, r5
  409028:	f003 f872 	bl	40c110 <__aeabi_ui2d>
  40902c:	2301      	movs	r3, #1
  40902e:	3e01      	subs	r6, #1
  409030:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409034:	9314      	str	r3, [sp, #80]	; 0x50
  409036:	e781      	b.n	408f3c <_dtoa_r+0xd4>
  409038:	483b      	ldr	r0, [pc, #236]	; (409128 <_dtoa_r+0x2c0>)
  40903a:	e743      	b.n	408ec4 <_dtoa_r+0x5c>
  40903c:	2100      	movs	r1, #0
  40903e:	6461      	str	r1, [r4, #68]	; 0x44
  409040:	4620      	mov	r0, r4
  409042:	9125      	str	r1, [sp, #148]	; 0x94
  409044:	f001 ff3c 	bl	40aec0 <_Balloc>
  409048:	f04f 33ff 	mov.w	r3, #4294967295
  40904c:	930a      	str	r3, [sp, #40]	; 0x28
  40904e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409050:	930f      	str	r3, [sp, #60]	; 0x3c
  409052:	2301      	movs	r3, #1
  409054:	9004      	str	r0, [sp, #16]
  409056:	6420      	str	r0, [r4, #64]	; 0x40
  409058:	9224      	str	r2, [sp, #144]	; 0x90
  40905a:	930b      	str	r3, [sp, #44]	; 0x2c
  40905c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40905e:	2b00      	cmp	r3, #0
  409060:	f2c0 80d9 	blt.w	409216 <_dtoa_r+0x3ae>
  409064:	9a02      	ldr	r2, [sp, #8]
  409066:	2a0e      	cmp	r2, #14
  409068:	f300 80d5 	bgt.w	409216 <_dtoa_r+0x3ae>
  40906c:	4b2d      	ldr	r3, [pc, #180]	; (409124 <_dtoa_r+0x2bc>)
  40906e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409072:	e9d3 2300 	ldrd	r2, r3, [r3]
  409076:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40907a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40907c:	2b00      	cmp	r3, #0
  40907e:	f2c0 83ba 	blt.w	4097f6 <_dtoa_r+0x98e>
  409082:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  409086:	4650      	mov	r0, sl
  409088:	462a      	mov	r2, r5
  40908a:	4633      	mov	r3, r6
  40908c:	4659      	mov	r1, fp
  40908e:	f003 f9df 	bl	40c450 <__aeabi_ddiv>
  409092:	f003 fb63 	bl	40c75c <__aeabi_d2iz>
  409096:	4680      	mov	r8, r0
  409098:	f003 f84a 	bl	40c130 <__aeabi_i2d>
  40909c:	462a      	mov	r2, r5
  40909e:	4633      	mov	r3, r6
  4090a0:	f003 f8ac 	bl	40c1fc <__aeabi_dmul>
  4090a4:	460b      	mov	r3, r1
  4090a6:	4602      	mov	r2, r0
  4090a8:	4659      	mov	r1, fp
  4090aa:	4650      	mov	r0, sl
  4090ac:	f002 fef2 	bl	40be94 <__aeabi_dsub>
  4090b0:	9d04      	ldr	r5, [sp, #16]
  4090b2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4090b6:	702b      	strb	r3, [r5, #0]
  4090b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4090ba:	2b01      	cmp	r3, #1
  4090bc:	4606      	mov	r6, r0
  4090be:	460f      	mov	r7, r1
  4090c0:	f105 0501 	add.w	r5, r5, #1
  4090c4:	d068      	beq.n	409198 <_dtoa_r+0x330>
  4090c6:	2200      	movs	r2, #0
  4090c8:	4b18      	ldr	r3, [pc, #96]	; (40912c <_dtoa_r+0x2c4>)
  4090ca:	f003 f897 	bl	40c1fc <__aeabi_dmul>
  4090ce:	2200      	movs	r2, #0
  4090d0:	2300      	movs	r3, #0
  4090d2:	4606      	mov	r6, r0
  4090d4:	460f      	mov	r7, r1
  4090d6:	f003 faf9 	bl	40c6cc <__aeabi_dcmpeq>
  4090da:	2800      	cmp	r0, #0
  4090dc:	f040 8088 	bne.w	4091f0 <_dtoa_r+0x388>
  4090e0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4090e4:	f04f 0a00 	mov.w	sl, #0
  4090e8:	f8df b040 	ldr.w	fp, [pc, #64]	; 40912c <_dtoa_r+0x2c4>
  4090ec:	940c      	str	r4, [sp, #48]	; 0x30
  4090ee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4090f2:	e028      	b.n	409146 <_dtoa_r+0x2de>
  4090f4:	f3af 8000 	nop.w
  4090f8:	636f4361 	.word	0x636f4361
  4090fc:	3fd287a7 	.word	0x3fd287a7
  409100:	8b60c8b3 	.word	0x8b60c8b3
  409104:	3fc68a28 	.word	0x3fc68a28
  409108:	509f79fb 	.word	0x509f79fb
  40910c:	3fd34413 	.word	0x3fd34413
  409110:	7ff00000 	.word	0x7ff00000
  409114:	0040db01 	.word	0x0040db01
  409118:	0040db44 	.word	0x0040db44
  40911c:	0040db50 	.word	0x0040db50
  409120:	3ff80000 	.word	0x3ff80000
  409124:	0040db90 	.word	0x0040db90
  409128:	0040db00 	.word	0x0040db00
  40912c:	40240000 	.word	0x40240000
  409130:	f003 f864 	bl	40c1fc <__aeabi_dmul>
  409134:	2200      	movs	r2, #0
  409136:	2300      	movs	r3, #0
  409138:	4606      	mov	r6, r0
  40913a:	460f      	mov	r7, r1
  40913c:	f003 fac6 	bl	40c6cc <__aeabi_dcmpeq>
  409140:	2800      	cmp	r0, #0
  409142:	f040 83c1 	bne.w	4098c8 <_dtoa_r+0xa60>
  409146:	4642      	mov	r2, r8
  409148:	464b      	mov	r3, r9
  40914a:	4630      	mov	r0, r6
  40914c:	4639      	mov	r1, r7
  40914e:	f003 f97f 	bl	40c450 <__aeabi_ddiv>
  409152:	f003 fb03 	bl	40c75c <__aeabi_d2iz>
  409156:	4604      	mov	r4, r0
  409158:	f002 ffea 	bl	40c130 <__aeabi_i2d>
  40915c:	4642      	mov	r2, r8
  40915e:	464b      	mov	r3, r9
  409160:	f003 f84c 	bl	40c1fc <__aeabi_dmul>
  409164:	4602      	mov	r2, r0
  409166:	460b      	mov	r3, r1
  409168:	4630      	mov	r0, r6
  40916a:	4639      	mov	r1, r7
  40916c:	f002 fe92 	bl	40be94 <__aeabi_dsub>
  409170:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  409174:	9e04      	ldr	r6, [sp, #16]
  409176:	f805 eb01 	strb.w	lr, [r5], #1
  40917a:	eba5 0e06 	sub.w	lr, r5, r6
  40917e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409180:	45b6      	cmp	lr, r6
  409182:	e9cd 0106 	strd	r0, r1, [sp, #24]
  409186:	4652      	mov	r2, sl
  409188:	465b      	mov	r3, fp
  40918a:	d1d1      	bne.n	409130 <_dtoa_r+0x2c8>
  40918c:	46a0      	mov	r8, r4
  40918e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409192:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409194:	4606      	mov	r6, r0
  409196:	460f      	mov	r7, r1
  409198:	4632      	mov	r2, r6
  40919a:	463b      	mov	r3, r7
  40919c:	4630      	mov	r0, r6
  40919e:	4639      	mov	r1, r7
  4091a0:	f002 fe7a 	bl	40be98 <__adddf3>
  4091a4:	4606      	mov	r6, r0
  4091a6:	460f      	mov	r7, r1
  4091a8:	4602      	mov	r2, r0
  4091aa:	460b      	mov	r3, r1
  4091ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4091b0:	f003 fa96 	bl	40c6e0 <__aeabi_dcmplt>
  4091b4:	b948      	cbnz	r0, 4091ca <_dtoa_r+0x362>
  4091b6:	4632      	mov	r2, r6
  4091b8:	463b      	mov	r3, r7
  4091ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4091be:	f003 fa85 	bl	40c6cc <__aeabi_dcmpeq>
  4091c2:	b1a8      	cbz	r0, 4091f0 <_dtoa_r+0x388>
  4091c4:	f018 0f01 	tst.w	r8, #1
  4091c8:	d012      	beq.n	4091f0 <_dtoa_r+0x388>
  4091ca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4091ce:	9a04      	ldr	r2, [sp, #16]
  4091d0:	1e6b      	subs	r3, r5, #1
  4091d2:	e004      	b.n	4091de <_dtoa_r+0x376>
  4091d4:	429a      	cmp	r2, r3
  4091d6:	f000 8401 	beq.w	4099dc <_dtoa_r+0xb74>
  4091da:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4091de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4091e2:	f103 0501 	add.w	r5, r3, #1
  4091e6:	d0f5      	beq.n	4091d4 <_dtoa_r+0x36c>
  4091e8:	f108 0801 	add.w	r8, r8, #1
  4091ec:	f883 8000 	strb.w	r8, [r3]
  4091f0:	4649      	mov	r1, r9
  4091f2:	4620      	mov	r0, r4
  4091f4:	f001 fe8a 	bl	40af0c <_Bfree>
  4091f8:	2200      	movs	r2, #0
  4091fa:	9b02      	ldr	r3, [sp, #8]
  4091fc:	702a      	strb	r2, [r5, #0]
  4091fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409200:	3301      	adds	r3, #1
  409202:	6013      	str	r3, [r2, #0]
  409204:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409206:	2b00      	cmp	r3, #0
  409208:	f000 839e 	beq.w	409948 <_dtoa_r+0xae0>
  40920c:	9804      	ldr	r0, [sp, #16]
  40920e:	601d      	str	r5, [r3, #0]
  409210:	b01b      	add	sp, #108	; 0x6c
  409212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409218:	2a00      	cmp	r2, #0
  40921a:	d03e      	beq.n	40929a <_dtoa_r+0x432>
  40921c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40921e:	2a01      	cmp	r2, #1
  409220:	f340 8311 	ble.w	409846 <_dtoa_r+0x9de>
  409224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409228:	1e5f      	subs	r7, r3, #1
  40922a:	42ba      	cmp	r2, r7
  40922c:	f2c0 838f 	blt.w	40994e <_dtoa_r+0xae6>
  409230:	1bd7      	subs	r7, r2, r7
  409232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409234:	2b00      	cmp	r3, #0
  409236:	f2c0 848b 	blt.w	409b50 <_dtoa_r+0xce8>
  40923a:	9d08      	ldr	r5, [sp, #32]
  40923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40923e:	9a08      	ldr	r2, [sp, #32]
  409240:	441a      	add	r2, r3
  409242:	9208      	str	r2, [sp, #32]
  409244:	9a06      	ldr	r2, [sp, #24]
  409246:	2101      	movs	r1, #1
  409248:	441a      	add	r2, r3
  40924a:	4620      	mov	r0, r4
  40924c:	9206      	str	r2, [sp, #24]
  40924e:	f001 fef7 	bl	40b040 <__i2b>
  409252:	4606      	mov	r6, r0
  409254:	e024      	b.n	4092a0 <_dtoa_r+0x438>
  409256:	2301      	movs	r3, #1
  409258:	930e      	str	r3, [sp, #56]	; 0x38
  40925a:	e6af      	b.n	408fbc <_dtoa_r+0x154>
  40925c:	9a08      	ldr	r2, [sp, #32]
  40925e:	9b02      	ldr	r3, [sp, #8]
  409260:	1ad2      	subs	r2, r2, r3
  409262:	425b      	negs	r3, r3
  409264:	930c      	str	r3, [sp, #48]	; 0x30
  409266:	2300      	movs	r3, #0
  409268:	9208      	str	r2, [sp, #32]
  40926a:	930d      	str	r3, [sp, #52]	; 0x34
  40926c:	e6b8      	b.n	408fe0 <_dtoa_r+0x178>
  40926e:	f1c7 0301 	rsb	r3, r7, #1
  409272:	9308      	str	r3, [sp, #32]
  409274:	2300      	movs	r3, #0
  409276:	9306      	str	r3, [sp, #24]
  409278:	e6a7      	b.n	408fca <_dtoa_r+0x162>
  40927a:	9d02      	ldr	r5, [sp, #8]
  40927c:	4628      	mov	r0, r5
  40927e:	f002 ff57 	bl	40c130 <__aeabi_i2d>
  409282:	4602      	mov	r2, r0
  409284:	460b      	mov	r3, r1
  409286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40928a:	f003 fa1f 	bl	40c6cc <__aeabi_dcmpeq>
  40928e:	2800      	cmp	r0, #0
  409290:	f47f ae80 	bne.w	408f94 <_dtoa_r+0x12c>
  409294:	1e6b      	subs	r3, r5, #1
  409296:	9302      	str	r3, [sp, #8]
  409298:	e67c      	b.n	408f94 <_dtoa_r+0x12c>
  40929a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40929c:	9d08      	ldr	r5, [sp, #32]
  40929e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4092a0:	2d00      	cmp	r5, #0
  4092a2:	dd0c      	ble.n	4092be <_dtoa_r+0x456>
  4092a4:	9906      	ldr	r1, [sp, #24]
  4092a6:	2900      	cmp	r1, #0
  4092a8:	460b      	mov	r3, r1
  4092aa:	dd08      	ble.n	4092be <_dtoa_r+0x456>
  4092ac:	42a9      	cmp	r1, r5
  4092ae:	9a08      	ldr	r2, [sp, #32]
  4092b0:	bfa8      	it	ge
  4092b2:	462b      	movge	r3, r5
  4092b4:	1ad2      	subs	r2, r2, r3
  4092b6:	1aed      	subs	r5, r5, r3
  4092b8:	1acb      	subs	r3, r1, r3
  4092ba:	9208      	str	r2, [sp, #32]
  4092bc:	9306      	str	r3, [sp, #24]
  4092be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4092c0:	b1d3      	cbz	r3, 4092f8 <_dtoa_r+0x490>
  4092c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4092c4:	2b00      	cmp	r3, #0
  4092c6:	f000 82b7 	beq.w	409838 <_dtoa_r+0x9d0>
  4092ca:	2f00      	cmp	r7, #0
  4092cc:	dd10      	ble.n	4092f0 <_dtoa_r+0x488>
  4092ce:	4631      	mov	r1, r6
  4092d0:	463a      	mov	r2, r7
  4092d2:	4620      	mov	r0, r4
  4092d4:	f001 ff50 	bl	40b178 <__pow5mult>
  4092d8:	464a      	mov	r2, r9
  4092da:	4601      	mov	r1, r0
  4092dc:	4606      	mov	r6, r0
  4092de:	4620      	mov	r0, r4
  4092e0:	f001 feb8 	bl	40b054 <__multiply>
  4092e4:	4649      	mov	r1, r9
  4092e6:	4680      	mov	r8, r0
  4092e8:	4620      	mov	r0, r4
  4092ea:	f001 fe0f 	bl	40af0c <_Bfree>
  4092ee:	46c1      	mov	r9, r8
  4092f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4092f2:	1bda      	subs	r2, r3, r7
  4092f4:	f040 82a1 	bne.w	40983a <_dtoa_r+0x9d2>
  4092f8:	2101      	movs	r1, #1
  4092fa:	4620      	mov	r0, r4
  4092fc:	f001 fea0 	bl	40b040 <__i2b>
  409300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409302:	2b00      	cmp	r3, #0
  409304:	4680      	mov	r8, r0
  409306:	dd1c      	ble.n	409342 <_dtoa_r+0x4da>
  409308:	4601      	mov	r1, r0
  40930a:	461a      	mov	r2, r3
  40930c:	4620      	mov	r0, r4
  40930e:	f001 ff33 	bl	40b178 <__pow5mult>
  409312:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409314:	2b01      	cmp	r3, #1
  409316:	4680      	mov	r8, r0
  409318:	f340 8254 	ble.w	4097c4 <_dtoa_r+0x95c>
  40931c:	2300      	movs	r3, #0
  40931e:	930c      	str	r3, [sp, #48]	; 0x30
  409320:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409324:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409328:	6918      	ldr	r0, [r3, #16]
  40932a:	f001 fe39 	bl	40afa0 <__hi0bits>
  40932e:	f1c0 0020 	rsb	r0, r0, #32
  409332:	e010      	b.n	409356 <_dtoa_r+0x4ee>
  409334:	f1c3 0520 	rsb	r5, r3, #32
  409338:	fa0a f005 	lsl.w	r0, sl, r5
  40933c:	e674      	b.n	409028 <_dtoa_r+0x1c0>
  40933e:	900e      	str	r0, [sp, #56]	; 0x38
  409340:	e63c      	b.n	408fbc <_dtoa_r+0x154>
  409342:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409344:	2b01      	cmp	r3, #1
  409346:	f340 8287 	ble.w	409858 <_dtoa_r+0x9f0>
  40934a:	2300      	movs	r3, #0
  40934c:	930c      	str	r3, [sp, #48]	; 0x30
  40934e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409350:	2001      	movs	r0, #1
  409352:	2b00      	cmp	r3, #0
  409354:	d1e4      	bne.n	409320 <_dtoa_r+0x4b8>
  409356:	9a06      	ldr	r2, [sp, #24]
  409358:	4410      	add	r0, r2
  40935a:	f010 001f 	ands.w	r0, r0, #31
  40935e:	f000 80a1 	beq.w	4094a4 <_dtoa_r+0x63c>
  409362:	f1c0 0320 	rsb	r3, r0, #32
  409366:	2b04      	cmp	r3, #4
  409368:	f340 849e 	ble.w	409ca8 <_dtoa_r+0xe40>
  40936c:	9b08      	ldr	r3, [sp, #32]
  40936e:	f1c0 001c 	rsb	r0, r0, #28
  409372:	4403      	add	r3, r0
  409374:	9308      	str	r3, [sp, #32]
  409376:	4613      	mov	r3, r2
  409378:	4403      	add	r3, r0
  40937a:	4405      	add	r5, r0
  40937c:	9306      	str	r3, [sp, #24]
  40937e:	9b08      	ldr	r3, [sp, #32]
  409380:	2b00      	cmp	r3, #0
  409382:	dd05      	ble.n	409390 <_dtoa_r+0x528>
  409384:	4649      	mov	r1, r9
  409386:	461a      	mov	r2, r3
  409388:	4620      	mov	r0, r4
  40938a:	f001 ff45 	bl	40b218 <__lshift>
  40938e:	4681      	mov	r9, r0
  409390:	9b06      	ldr	r3, [sp, #24]
  409392:	2b00      	cmp	r3, #0
  409394:	dd05      	ble.n	4093a2 <_dtoa_r+0x53a>
  409396:	4641      	mov	r1, r8
  409398:	461a      	mov	r2, r3
  40939a:	4620      	mov	r0, r4
  40939c:	f001 ff3c 	bl	40b218 <__lshift>
  4093a0:	4680      	mov	r8, r0
  4093a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4093a4:	2b00      	cmp	r3, #0
  4093a6:	f040 8086 	bne.w	4094b6 <_dtoa_r+0x64e>
  4093aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4093ac:	2b00      	cmp	r3, #0
  4093ae:	f340 8266 	ble.w	40987e <_dtoa_r+0xa16>
  4093b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4093b4:	2b00      	cmp	r3, #0
  4093b6:	f000 8098 	beq.w	4094ea <_dtoa_r+0x682>
  4093ba:	2d00      	cmp	r5, #0
  4093bc:	dd05      	ble.n	4093ca <_dtoa_r+0x562>
  4093be:	4631      	mov	r1, r6
  4093c0:	462a      	mov	r2, r5
  4093c2:	4620      	mov	r0, r4
  4093c4:	f001 ff28 	bl	40b218 <__lshift>
  4093c8:	4606      	mov	r6, r0
  4093ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4093cc:	2b00      	cmp	r3, #0
  4093ce:	f040 8337 	bne.w	409a40 <_dtoa_r+0xbd8>
  4093d2:	9606      	str	r6, [sp, #24]
  4093d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4093d6:	9a04      	ldr	r2, [sp, #16]
  4093d8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4093dc:	3b01      	subs	r3, #1
  4093de:	18d3      	adds	r3, r2, r3
  4093e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4093e2:	f00a 0301 	and.w	r3, sl, #1
  4093e6:	930c      	str	r3, [sp, #48]	; 0x30
  4093e8:	4617      	mov	r7, r2
  4093ea:	46c2      	mov	sl, r8
  4093ec:	4651      	mov	r1, sl
  4093ee:	4648      	mov	r0, r9
  4093f0:	f7ff fca4 	bl	408d3c <quorem>
  4093f4:	4631      	mov	r1, r6
  4093f6:	4605      	mov	r5, r0
  4093f8:	4648      	mov	r0, r9
  4093fa:	f001 ff5f 	bl	40b2bc <__mcmp>
  4093fe:	465a      	mov	r2, fp
  409400:	900a      	str	r0, [sp, #40]	; 0x28
  409402:	4651      	mov	r1, sl
  409404:	4620      	mov	r0, r4
  409406:	f001 ff75 	bl	40b2f4 <__mdiff>
  40940a:	68c2      	ldr	r2, [r0, #12]
  40940c:	4680      	mov	r8, r0
  40940e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  409412:	2a00      	cmp	r2, #0
  409414:	f040 822b 	bne.w	40986e <_dtoa_r+0xa06>
  409418:	4601      	mov	r1, r0
  40941a:	4648      	mov	r0, r9
  40941c:	9308      	str	r3, [sp, #32]
  40941e:	f001 ff4d 	bl	40b2bc <__mcmp>
  409422:	4641      	mov	r1, r8
  409424:	9006      	str	r0, [sp, #24]
  409426:	4620      	mov	r0, r4
  409428:	f001 fd70 	bl	40af0c <_Bfree>
  40942c:	9a06      	ldr	r2, [sp, #24]
  40942e:	9b08      	ldr	r3, [sp, #32]
  409430:	b932      	cbnz	r2, 409440 <_dtoa_r+0x5d8>
  409432:	9924      	ldr	r1, [sp, #144]	; 0x90
  409434:	b921      	cbnz	r1, 409440 <_dtoa_r+0x5d8>
  409436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409438:	2a00      	cmp	r2, #0
  40943a:	f000 83ef 	beq.w	409c1c <_dtoa_r+0xdb4>
  40943e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409440:	990a      	ldr	r1, [sp, #40]	; 0x28
  409442:	2900      	cmp	r1, #0
  409444:	f2c0 829f 	blt.w	409986 <_dtoa_r+0xb1e>
  409448:	d105      	bne.n	409456 <_dtoa_r+0x5ee>
  40944a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40944c:	b919      	cbnz	r1, 409456 <_dtoa_r+0x5ee>
  40944e:	990c      	ldr	r1, [sp, #48]	; 0x30
  409450:	2900      	cmp	r1, #0
  409452:	f000 8298 	beq.w	409986 <_dtoa_r+0xb1e>
  409456:	2a00      	cmp	r2, #0
  409458:	f300 8306 	bgt.w	409a68 <_dtoa_r+0xc00>
  40945c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40945e:	703b      	strb	r3, [r7, #0]
  409460:	f107 0801 	add.w	r8, r7, #1
  409464:	4297      	cmp	r7, r2
  409466:	4645      	mov	r5, r8
  409468:	f000 830c 	beq.w	409a84 <_dtoa_r+0xc1c>
  40946c:	4649      	mov	r1, r9
  40946e:	2300      	movs	r3, #0
  409470:	220a      	movs	r2, #10
  409472:	4620      	mov	r0, r4
  409474:	f001 fd54 	bl	40af20 <__multadd>
  409478:	455e      	cmp	r6, fp
  40947a:	4681      	mov	r9, r0
  40947c:	4631      	mov	r1, r6
  40947e:	f04f 0300 	mov.w	r3, #0
  409482:	f04f 020a 	mov.w	r2, #10
  409486:	4620      	mov	r0, r4
  409488:	f000 81eb 	beq.w	409862 <_dtoa_r+0x9fa>
  40948c:	f001 fd48 	bl	40af20 <__multadd>
  409490:	4659      	mov	r1, fp
  409492:	4606      	mov	r6, r0
  409494:	2300      	movs	r3, #0
  409496:	220a      	movs	r2, #10
  409498:	4620      	mov	r0, r4
  40949a:	f001 fd41 	bl	40af20 <__multadd>
  40949e:	4647      	mov	r7, r8
  4094a0:	4683      	mov	fp, r0
  4094a2:	e7a3      	b.n	4093ec <_dtoa_r+0x584>
  4094a4:	201c      	movs	r0, #28
  4094a6:	9b08      	ldr	r3, [sp, #32]
  4094a8:	4403      	add	r3, r0
  4094aa:	9308      	str	r3, [sp, #32]
  4094ac:	9b06      	ldr	r3, [sp, #24]
  4094ae:	4403      	add	r3, r0
  4094b0:	4405      	add	r5, r0
  4094b2:	9306      	str	r3, [sp, #24]
  4094b4:	e763      	b.n	40937e <_dtoa_r+0x516>
  4094b6:	4641      	mov	r1, r8
  4094b8:	4648      	mov	r0, r9
  4094ba:	f001 feff 	bl	40b2bc <__mcmp>
  4094be:	2800      	cmp	r0, #0
  4094c0:	f6bf af73 	bge.w	4093aa <_dtoa_r+0x542>
  4094c4:	9f02      	ldr	r7, [sp, #8]
  4094c6:	4649      	mov	r1, r9
  4094c8:	2300      	movs	r3, #0
  4094ca:	220a      	movs	r2, #10
  4094cc:	4620      	mov	r0, r4
  4094ce:	3f01      	subs	r7, #1
  4094d0:	9702      	str	r7, [sp, #8]
  4094d2:	f001 fd25 	bl	40af20 <__multadd>
  4094d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4094d8:	4681      	mov	r9, r0
  4094da:	2b00      	cmp	r3, #0
  4094dc:	f040 83b6 	bne.w	409c4c <_dtoa_r+0xde4>
  4094e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4094e2:	2b00      	cmp	r3, #0
  4094e4:	f340 83bf 	ble.w	409c66 <_dtoa_r+0xdfe>
  4094e8:	930a      	str	r3, [sp, #40]	; 0x28
  4094ea:	f8dd b010 	ldr.w	fp, [sp, #16]
  4094ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4094f0:	465d      	mov	r5, fp
  4094f2:	e002      	b.n	4094fa <_dtoa_r+0x692>
  4094f4:	f001 fd14 	bl	40af20 <__multadd>
  4094f8:	4681      	mov	r9, r0
  4094fa:	4641      	mov	r1, r8
  4094fc:	4648      	mov	r0, r9
  4094fe:	f7ff fc1d 	bl	408d3c <quorem>
  409502:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  409506:	f805 ab01 	strb.w	sl, [r5], #1
  40950a:	eba5 030b 	sub.w	r3, r5, fp
  40950e:	42bb      	cmp	r3, r7
  409510:	f04f 020a 	mov.w	r2, #10
  409514:	f04f 0300 	mov.w	r3, #0
  409518:	4649      	mov	r1, r9
  40951a:	4620      	mov	r0, r4
  40951c:	dbea      	blt.n	4094f4 <_dtoa_r+0x68c>
  40951e:	9b04      	ldr	r3, [sp, #16]
  409520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409522:	2a01      	cmp	r2, #1
  409524:	bfac      	ite	ge
  409526:	189b      	addge	r3, r3, r2
  409528:	3301      	addlt	r3, #1
  40952a:	461d      	mov	r5, r3
  40952c:	f04f 0b00 	mov.w	fp, #0
  409530:	4649      	mov	r1, r9
  409532:	2201      	movs	r2, #1
  409534:	4620      	mov	r0, r4
  409536:	f001 fe6f 	bl	40b218 <__lshift>
  40953a:	4641      	mov	r1, r8
  40953c:	4681      	mov	r9, r0
  40953e:	f001 febd 	bl	40b2bc <__mcmp>
  409542:	2800      	cmp	r0, #0
  409544:	f340 823d 	ble.w	4099c2 <_dtoa_r+0xb5a>
  409548:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40954c:	9904      	ldr	r1, [sp, #16]
  40954e:	1e6b      	subs	r3, r5, #1
  409550:	e004      	b.n	40955c <_dtoa_r+0x6f4>
  409552:	428b      	cmp	r3, r1
  409554:	f000 81ae 	beq.w	4098b4 <_dtoa_r+0xa4c>
  409558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40955c:	2a39      	cmp	r2, #57	; 0x39
  40955e:	f103 0501 	add.w	r5, r3, #1
  409562:	d0f6      	beq.n	409552 <_dtoa_r+0x6ea>
  409564:	3201      	adds	r2, #1
  409566:	701a      	strb	r2, [r3, #0]
  409568:	4641      	mov	r1, r8
  40956a:	4620      	mov	r0, r4
  40956c:	f001 fcce 	bl	40af0c <_Bfree>
  409570:	2e00      	cmp	r6, #0
  409572:	f43f ae3d 	beq.w	4091f0 <_dtoa_r+0x388>
  409576:	f1bb 0f00 	cmp.w	fp, #0
  40957a:	d005      	beq.n	409588 <_dtoa_r+0x720>
  40957c:	45b3      	cmp	fp, r6
  40957e:	d003      	beq.n	409588 <_dtoa_r+0x720>
  409580:	4659      	mov	r1, fp
  409582:	4620      	mov	r0, r4
  409584:	f001 fcc2 	bl	40af0c <_Bfree>
  409588:	4631      	mov	r1, r6
  40958a:	4620      	mov	r0, r4
  40958c:	f001 fcbe 	bl	40af0c <_Bfree>
  409590:	e62e      	b.n	4091f0 <_dtoa_r+0x388>
  409592:	2300      	movs	r3, #0
  409594:	930b      	str	r3, [sp, #44]	; 0x2c
  409596:	9b02      	ldr	r3, [sp, #8]
  409598:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40959a:	4413      	add	r3, r2
  40959c:	930f      	str	r3, [sp, #60]	; 0x3c
  40959e:	3301      	adds	r3, #1
  4095a0:	2b01      	cmp	r3, #1
  4095a2:	461f      	mov	r7, r3
  4095a4:	461e      	mov	r6, r3
  4095a6:	930a      	str	r3, [sp, #40]	; 0x28
  4095a8:	bfb8      	it	lt
  4095aa:	2701      	movlt	r7, #1
  4095ac:	2100      	movs	r1, #0
  4095ae:	2f17      	cmp	r7, #23
  4095b0:	6461      	str	r1, [r4, #68]	; 0x44
  4095b2:	d90a      	bls.n	4095ca <_dtoa_r+0x762>
  4095b4:	2201      	movs	r2, #1
  4095b6:	2304      	movs	r3, #4
  4095b8:	005b      	lsls	r3, r3, #1
  4095ba:	f103 0014 	add.w	r0, r3, #20
  4095be:	4287      	cmp	r7, r0
  4095c0:	4611      	mov	r1, r2
  4095c2:	f102 0201 	add.w	r2, r2, #1
  4095c6:	d2f7      	bcs.n	4095b8 <_dtoa_r+0x750>
  4095c8:	6461      	str	r1, [r4, #68]	; 0x44
  4095ca:	4620      	mov	r0, r4
  4095cc:	f001 fc78 	bl	40aec0 <_Balloc>
  4095d0:	2e0e      	cmp	r6, #14
  4095d2:	9004      	str	r0, [sp, #16]
  4095d4:	6420      	str	r0, [r4, #64]	; 0x40
  4095d6:	f63f ad41 	bhi.w	40905c <_dtoa_r+0x1f4>
  4095da:	2d00      	cmp	r5, #0
  4095dc:	f43f ad3e 	beq.w	40905c <_dtoa_r+0x1f4>
  4095e0:	9902      	ldr	r1, [sp, #8]
  4095e2:	2900      	cmp	r1, #0
  4095e4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4095e8:	f340 8202 	ble.w	4099f0 <_dtoa_r+0xb88>
  4095ec:	4bb8      	ldr	r3, [pc, #736]	; (4098d0 <_dtoa_r+0xa68>)
  4095ee:	f001 020f 	and.w	r2, r1, #15
  4095f2:	110d      	asrs	r5, r1, #4
  4095f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4095f8:	06e9      	lsls	r1, r5, #27
  4095fa:	e9d3 6700 	ldrd	r6, r7, [r3]
  4095fe:	f140 81ae 	bpl.w	40995e <_dtoa_r+0xaf6>
  409602:	4bb4      	ldr	r3, [pc, #720]	; (4098d4 <_dtoa_r+0xa6c>)
  409604:	4650      	mov	r0, sl
  409606:	4659      	mov	r1, fp
  409608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40960c:	f002 ff20 	bl	40c450 <__aeabi_ddiv>
  409610:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  409614:	f005 050f 	and.w	r5, r5, #15
  409618:	f04f 0a03 	mov.w	sl, #3
  40961c:	b18d      	cbz	r5, 409642 <_dtoa_r+0x7da>
  40961e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4098d4 <_dtoa_r+0xa6c>
  409622:	07ea      	lsls	r2, r5, #31
  409624:	d509      	bpl.n	40963a <_dtoa_r+0x7d2>
  409626:	4630      	mov	r0, r6
  409628:	4639      	mov	r1, r7
  40962a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40962e:	f002 fde5 	bl	40c1fc <__aeabi_dmul>
  409632:	f10a 0a01 	add.w	sl, sl, #1
  409636:	4606      	mov	r6, r0
  409638:	460f      	mov	r7, r1
  40963a:	106d      	asrs	r5, r5, #1
  40963c:	f108 0808 	add.w	r8, r8, #8
  409640:	d1ef      	bne.n	409622 <_dtoa_r+0x7ba>
  409642:	463b      	mov	r3, r7
  409644:	4632      	mov	r2, r6
  409646:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40964a:	f002 ff01 	bl	40c450 <__aeabi_ddiv>
  40964e:	4607      	mov	r7, r0
  409650:	4688      	mov	r8, r1
  409652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409654:	b143      	cbz	r3, 409668 <_dtoa_r+0x800>
  409656:	2200      	movs	r2, #0
  409658:	4b9f      	ldr	r3, [pc, #636]	; (4098d8 <_dtoa_r+0xa70>)
  40965a:	4638      	mov	r0, r7
  40965c:	4641      	mov	r1, r8
  40965e:	f003 f83f 	bl	40c6e0 <__aeabi_dcmplt>
  409662:	2800      	cmp	r0, #0
  409664:	f040 8286 	bne.w	409b74 <_dtoa_r+0xd0c>
  409668:	4650      	mov	r0, sl
  40966a:	f002 fd61 	bl	40c130 <__aeabi_i2d>
  40966e:	463a      	mov	r2, r7
  409670:	4643      	mov	r3, r8
  409672:	f002 fdc3 	bl	40c1fc <__aeabi_dmul>
  409676:	4b99      	ldr	r3, [pc, #612]	; (4098dc <_dtoa_r+0xa74>)
  409678:	2200      	movs	r2, #0
  40967a:	f002 fc0d 	bl	40be98 <__adddf3>
  40967e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409680:	4605      	mov	r5, r0
  409682:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409686:	2b00      	cmp	r3, #0
  409688:	f000 813e 	beq.w	409908 <_dtoa_r+0xaa0>
  40968c:	9b02      	ldr	r3, [sp, #8]
  40968e:	9315      	str	r3, [sp, #84]	; 0x54
  409690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409692:	9312      	str	r3, [sp, #72]	; 0x48
  409694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409696:	2b00      	cmp	r3, #0
  409698:	f000 81fa 	beq.w	409a90 <_dtoa_r+0xc28>
  40969c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40969e:	4b8c      	ldr	r3, [pc, #560]	; (4098d0 <_dtoa_r+0xa68>)
  4096a0:	498f      	ldr	r1, [pc, #572]	; (4098e0 <_dtoa_r+0xa78>)
  4096a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4096a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4096aa:	2000      	movs	r0, #0
  4096ac:	f002 fed0 	bl	40c450 <__aeabi_ddiv>
  4096b0:	462a      	mov	r2, r5
  4096b2:	4633      	mov	r3, r6
  4096b4:	f002 fbee 	bl	40be94 <__aeabi_dsub>
  4096b8:	4682      	mov	sl, r0
  4096ba:	468b      	mov	fp, r1
  4096bc:	4638      	mov	r0, r7
  4096be:	4641      	mov	r1, r8
  4096c0:	f003 f84c 	bl	40c75c <__aeabi_d2iz>
  4096c4:	4605      	mov	r5, r0
  4096c6:	f002 fd33 	bl	40c130 <__aeabi_i2d>
  4096ca:	4602      	mov	r2, r0
  4096cc:	460b      	mov	r3, r1
  4096ce:	4638      	mov	r0, r7
  4096d0:	4641      	mov	r1, r8
  4096d2:	f002 fbdf 	bl	40be94 <__aeabi_dsub>
  4096d6:	3530      	adds	r5, #48	; 0x30
  4096d8:	fa5f f885 	uxtb.w	r8, r5
  4096dc:	9d04      	ldr	r5, [sp, #16]
  4096de:	4606      	mov	r6, r0
  4096e0:	460f      	mov	r7, r1
  4096e2:	f885 8000 	strb.w	r8, [r5]
  4096e6:	4602      	mov	r2, r0
  4096e8:	460b      	mov	r3, r1
  4096ea:	4650      	mov	r0, sl
  4096ec:	4659      	mov	r1, fp
  4096ee:	3501      	adds	r5, #1
  4096f0:	f003 f814 	bl	40c71c <__aeabi_dcmpgt>
  4096f4:	2800      	cmp	r0, #0
  4096f6:	d154      	bne.n	4097a2 <_dtoa_r+0x93a>
  4096f8:	4632      	mov	r2, r6
  4096fa:	463b      	mov	r3, r7
  4096fc:	2000      	movs	r0, #0
  4096fe:	4976      	ldr	r1, [pc, #472]	; (4098d8 <_dtoa_r+0xa70>)
  409700:	f002 fbc8 	bl	40be94 <__aeabi_dsub>
  409704:	4602      	mov	r2, r0
  409706:	460b      	mov	r3, r1
  409708:	4650      	mov	r0, sl
  40970a:	4659      	mov	r1, fp
  40970c:	f003 f806 	bl	40c71c <__aeabi_dcmpgt>
  409710:	2800      	cmp	r0, #0
  409712:	f040 8270 	bne.w	409bf6 <_dtoa_r+0xd8e>
  409716:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409718:	2a01      	cmp	r2, #1
  40971a:	f000 8111 	beq.w	409940 <_dtoa_r+0xad8>
  40971e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409720:	9a04      	ldr	r2, [sp, #16]
  409722:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409726:	4413      	add	r3, r2
  409728:	4699      	mov	r9, r3
  40972a:	e00d      	b.n	409748 <_dtoa_r+0x8e0>
  40972c:	2000      	movs	r0, #0
  40972e:	496a      	ldr	r1, [pc, #424]	; (4098d8 <_dtoa_r+0xa70>)
  409730:	f002 fbb0 	bl	40be94 <__aeabi_dsub>
  409734:	4652      	mov	r2, sl
  409736:	465b      	mov	r3, fp
  409738:	f002 ffd2 	bl	40c6e0 <__aeabi_dcmplt>
  40973c:	2800      	cmp	r0, #0
  40973e:	f040 8258 	bne.w	409bf2 <_dtoa_r+0xd8a>
  409742:	454d      	cmp	r5, r9
  409744:	f000 80fa 	beq.w	40993c <_dtoa_r+0xad4>
  409748:	4650      	mov	r0, sl
  40974a:	4659      	mov	r1, fp
  40974c:	2200      	movs	r2, #0
  40974e:	4b65      	ldr	r3, [pc, #404]	; (4098e4 <_dtoa_r+0xa7c>)
  409750:	f002 fd54 	bl	40c1fc <__aeabi_dmul>
  409754:	2200      	movs	r2, #0
  409756:	4b63      	ldr	r3, [pc, #396]	; (4098e4 <_dtoa_r+0xa7c>)
  409758:	4682      	mov	sl, r0
  40975a:	468b      	mov	fp, r1
  40975c:	4630      	mov	r0, r6
  40975e:	4639      	mov	r1, r7
  409760:	f002 fd4c 	bl	40c1fc <__aeabi_dmul>
  409764:	460f      	mov	r7, r1
  409766:	4606      	mov	r6, r0
  409768:	f002 fff8 	bl	40c75c <__aeabi_d2iz>
  40976c:	4680      	mov	r8, r0
  40976e:	f002 fcdf 	bl	40c130 <__aeabi_i2d>
  409772:	4602      	mov	r2, r0
  409774:	460b      	mov	r3, r1
  409776:	4630      	mov	r0, r6
  409778:	4639      	mov	r1, r7
  40977a:	f002 fb8b 	bl	40be94 <__aeabi_dsub>
  40977e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409782:	fa5f f888 	uxtb.w	r8, r8
  409786:	4652      	mov	r2, sl
  409788:	465b      	mov	r3, fp
  40978a:	f805 8b01 	strb.w	r8, [r5], #1
  40978e:	4606      	mov	r6, r0
  409790:	460f      	mov	r7, r1
  409792:	f002 ffa5 	bl	40c6e0 <__aeabi_dcmplt>
  409796:	4632      	mov	r2, r6
  409798:	463b      	mov	r3, r7
  40979a:	2800      	cmp	r0, #0
  40979c:	d0c6      	beq.n	40972c <_dtoa_r+0x8c4>
  40979e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4097a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4097a4:	9302      	str	r3, [sp, #8]
  4097a6:	e523      	b.n	4091f0 <_dtoa_r+0x388>
  4097a8:	2300      	movs	r3, #0
  4097aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4097ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4097ae:	2b00      	cmp	r3, #0
  4097b0:	f340 80dc 	ble.w	40996c <_dtoa_r+0xb04>
  4097b4:	461f      	mov	r7, r3
  4097b6:	461e      	mov	r6, r3
  4097b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4097ba:	930a      	str	r3, [sp, #40]	; 0x28
  4097bc:	e6f6      	b.n	4095ac <_dtoa_r+0x744>
  4097be:	2301      	movs	r3, #1
  4097c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4097c2:	e7f3      	b.n	4097ac <_dtoa_r+0x944>
  4097c4:	f1ba 0f00 	cmp.w	sl, #0
  4097c8:	f47f ada8 	bne.w	40931c <_dtoa_r+0x4b4>
  4097cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4097d0:	2b00      	cmp	r3, #0
  4097d2:	f47f adba 	bne.w	40934a <_dtoa_r+0x4e2>
  4097d6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4097da:	0d3f      	lsrs	r7, r7, #20
  4097dc:	053f      	lsls	r7, r7, #20
  4097de:	2f00      	cmp	r7, #0
  4097e0:	f000 820d 	beq.w	409bfe <_dtoa_r+0xd96>
  4097e4:	9b08      	ldr	r3, [sp, #32]
  4097e6:	3301      	adds	r3, #1
  4097e8:	9308      	str	r3, [sp, #32]
  4097ea:	9b06      	ldr	r3, [sp, #24]
  4097ec:	3301      	adds	r3, #1
  4097ee:	9306      	str	r3, [sp, #24]
  4097f0:	2301      	movs	r3, #1
  4097f2:	930c      	str	r3, [sp, #48]	; 0x30
  4097f4:	e5ab      	b.n	40934e <_dtoa_r+0x4e6>
  4097f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4097f8:	2b00      	cmp	r3, #0
  4097fa:	f73f ac42 	bgt.w	409082 <_dtoa_r+0x21a>
  4097fe:	f040 8221 	bne.w	409c44 <_dtoa_r+0xddc>
  409802:	2200      	movs	r2, #0
  409804:	4b38      	ldr	r3, [pc, #224]	; (4098e8 <_dtoa_r+0xa80>)
  409806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40980a:	f002 fcf7 	bl	40c1fc <__aeabi_dmul>
  40980e:	4652      	mov	r2, sl
  409810:	465b      	mov	r3, fp
  409812:	f002 ff79 	bl	40c708 <__aeabi_dcmpge>
  409816:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40981a:	4646      	mov	r6, r8
  40981c:	2800      	cmp	r0, #0
  40981e:	d041      	beq.n	4098a4 <_dtoa_r+0xa3c>
  409820:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409822:	9d04      	ldr	r5, [sp, #16]
  409824:	43db      	mvns	r3, r3
  409826:	9302      	str	r3, [sp, #8]
  409828:	4641      	mov	r1, r8
  40982a:	4620      	mov	r0, r4
  40982c:	f001 fb6e 	bl	40af0c <_Bfree>
  409830:	2e00      	cmp	r6, #0
  409832:	f43f acdd 	beq.w	4091f0 <_dtoa_r+0x388>
  409836:	e6a7      	b.n	409588 <_dtoa_r+0x720>
  409838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40983a:	4649      	mov	r1, r9
  40983c:	4620      	mov	r0, r4
  40983e:	f001 fc9b 	bl	40b178 <__pow5mult>
  409842:	4681      	mov	r9, r0
  409844:	e558      	b.n	4092f8 <_dtoa_r+0x490>
  409846:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409848:	2a00      	cmp	r2, #0
  40984a:	f000 8187 	beq.w	409b5c <_dtoa_r+0xcf4>
  40984e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409852:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409854:	9d08      	ldr	r5, [sp, #32]
  409856:	e4f2      	b.n	40923e <_dtoa_r+0x3d6>
  409858:	f1ba 0f00 	cmp.w	sl, #0
  40985c:	f47f ad75 	bne.w	40934a <_dtoa_r+0x4e2>
  409860:	e7b4      	b.n	4097cc <_dtoa_r+0x964>
  409862:	f001 fb5d 	bl	40af20 <__multadd>
  409866:	4647      	mov	r7, r8
  409868:	4606      	mov	r6, r0
  40986a:	4683      	mov	fp, r0
  40986c:	e5be      	b.n	4093ec <_dtoa_r+0x584>
  40986e:	4601      	mov	r1, r0
  409870:	4620      	mov	r0, r4
  409872:	9306      	str	r3, [sp, #24]
  409874:	f001 fb4a 	bl	40af0c <_Bfree>
  409878:	2201      	movs	r2, #1
  40987a:	9b06      	ldr	r3, [sp, #24]
  40987c:	e5e0      	b.n	409440 <_dtoa_r+0x5d8>
  40987e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409880:	2b02      	cmp	r3, #2
  409882:	f77f ad96 	ble.w	4093b2 <_dtoa_r+0x54a>
  409886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409888:	2b00      	cmp	r3, #0
  40988a:	d1c9      	bne.n	409820 <_dtoa_r+0x9b8>
  40988c:	4641      	mov	r1, r8
  40988e:	2205      	movs	r2, #5
  409890:	4620      	mov	r0, r4
  409892:	f001 fb45 	bl	40af20 <__multadd>
  409896:	4601      	mov	r1, r0
  409898:	4680      	mov	r8, r0
  40989a:	4648      	mov	r0, r9
  40989c:	f001 fd0e 	bl	40b2bc <__mcmp>
  4098a0:	2800      	cmp	r0, #0
  4098a2:	ddbd      	ble.n	409820 <_dtoa_r+0x9b8>
  4098a4:	9a02      	ldr	r2, [sp, #8]
  4098a6:	9904      	ldr	r1, [sp, #16]
  4098a8:	2331      	movs	r3, #49	; 0x31
  4098aa:	3201      	adds	r2, #1
  4098ac:	9202      	str	r2, [sp, #8]
  4098ae:	700b      	strb	r3, [r1, #0]
  4098b0:	1c4d      	adds	r5, r1, #1
  4098b2:	e7b9      	b.n	409828 <_dtoa_r+0x9c0>
  4098b4:	9a02      	ldr	r2, [sp, #8]
  4098b6:	3201      	adds	r2, #1
  4098b8:	9202      	str	r2, [sp, #8]
  4098ba:	9a04      	ldr	r2, [sp, #16]
  4098bc:	2331      	movs	r3, #49	; 0x31
  4098be:	7013      	strb	r3, [r2, #0]
  4098c0:	e652      	b.n	409568 <_dtoa_r+0x700>
  4098c2:	2301      	movs	r3, #1
  4098c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4098c6:	e666      	b.n	409596 <_dtoa_r+0x72e>
  4098c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4098cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4098ce:	e48f      	b.n	4091f0 <_dtoa_r+0x388>
  4098d0:	0040db90 	.word	0x0040db90
  4098d4:	0040db68 	.word	0x0040db68
  4098d8:	3ff00000 	.word	0x3ff00000
  4098dc:	401c0000 	.word	0x401c0000
  4098e0:	3fe00000 	.word	0x3fe00000
  4098e4:	40240000 	.word	0x40240000
  4098e8:	40140000 	.word	0x40140000
  4098ec:	4650      	mov	r0, sl
  4098ee:	f002 fc1f 	bl	40c130 <__aeabi_i2d>
  4098f2:	463a      	mov	r2, r7
  4098f4:	4643      	mov	r3, r8
  4098f6:	f002 fc81 	bl	40c1fc <__aeabi_dmul>
  4098fa:	2200      	movs	r2, #0
  4098fc:	4bc1      	ldr	r3, [pc, #772]	; (409c04 <_dtoa_r+0xd9c>)
  4098fe:	f002 facb 	bl	40be98 <__adddf3>
  409902:	4605      	mov	r5, r0
  409904:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409908:	4641      	mov	r1, r8
  40990a:	2200      	movs	r2, #0
  40990c:	4bbe      	ldr	r3, [pc, #760]	; (409c08 <_dtoa_r+0xda0>)
  40990e:	4638      	mov	r0, r7
  409910:	f002 fac0 	bl	40be94 <__aeabi_dsub>
  409914:	462a      	mov	r2, r5
  409916:	4633      	mov	r3, r6
  409918:	4682      	mov	sl, r0
  40991a:	468b      	mov	fp, r1
  40991c:	f002 fefe 	bl	40c71c <__aeabi_dcmpgt>
  409920:	4680      	mov	r8, r0
  409922:	2800      	cmp	r0, #0
  409924:	f040 8110 	bne.w	409b48 <_dtoa_r+0xce0>
  409928:	462a      	mov	r2, r5
  40992a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40992e:	4650      	mov	r0, sl
  409930:	4659      	mov	r1, fp
  409932:	f002 fed5 	bl	40c6e0 <__aeabi_dcmplt>
  409936:	b118      	cbz	r0, 409940 <_dtoa_r+0xad8>
  409938:	4646      	mov	r6, r8
  40993a:	e771      	b.n	409820 <_dtoa_r+0x9b8>
  40993c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409940:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  409944:	f7ff bb8a 	b.w	40905c <_dtoa_r+0x1f4>
  409948:	9804      	ldr	r0, [sp, #16]
  40994a:	f7ff babb 	b.w	408ec4 <_dtoa_r+0x5c>
  40994e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409952:	970c      	str	r7, [sp, #48]	; 0x30
  409954:	1afb      	subs	r3, r7, r3
  409956:	441a      	add	r2, r3
  409958:	920d      	str	r2, [sp, #52]	; 0x34
  40995a:	2700      	movs	r7, #0
  40995c:	e469      	b.n	409232 <_dtoa_r+0x3ca>
  40995e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409962:	f04f 0a02 	mov.w	sl, #2
  409966:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40996a:	e657      	b.n	40961c <_dtoa_r+0x7b4>
  40996c:	2100      	movs	r1, #0
  40996e:	2301      	movs	r3, #1
  409970:	6461      	str	r1, [r4, #68]	; 0x44
  409972:	4620      	mov	r0, r4
  409974:	9325      	str	r3, [sp, #148]	; 0x94
  409976:	f001 faa3 	bl	40aec0 <_Balloc>
  40997a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40997c:	9004      	str	r0, [sp, #16]
  40997e:	6420      	str	r0, [r4, #64]	; 0x40
  409980:	930a      	str	r3, [sp, #40]	; 0x28
  409982:	930f      	str	r3, [sp, #60]	; 0x3c
  409984:	e629      	b.n	4095da <_dtoa_r+0x772>
  409986:	2a00      	cmp	r2, #0
  409988:	46d0      	mov	r8, sl
  40998a:	f8cd b018 	str.w	fp, [sp, #24]
  40998e:	469a      	mov	sl, r3
  409990:	dd11      	ble.n	4099b6 <_dtoa_r+0xb4e>
  409992:	4649      	mov	r1, r9
  409994:	2201      	movs	r2, #1
  409996:	4620      	mov	r0, r4
  409998:	f001 fc3e 	bl	40b218 <__lshift>
  40999c:	4641      	mov	r1, r8
  40999e:	4681      	mov	r9, r0
  4099a0:	f001 fc8c 	bl	40b2bc <__mcmp>
  4099a4:	2800      	cmp	r0, #0
  4099a6:	f340 8146 	ble.w	409c36 <_dtoa_r+0xdce>
  4099aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4099ae:	f000 8106 	beq.w	409bbe <_dtoa_r+0xd56>
  4099b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4099b6:	46b3      	mov	fp, r6
  4099b8:	f887 a000 	strb.w	sl, [r7]
  4099bc:	1c7d      	adds	r5, r7, #1
  4099be:	9e06      	ldr	r6, [sp, #24]
  4099c0:	e5d2      	b.n	409568 <_dtoa_r+0x700>
  4099c2:	d104      	bne.n	4099ce <_dtoa_r+0xb66>
  4099c4:	f01a 0f01 	tst.w	sl, #1
  4099c8:	d001      	beq.n	4099ce <_dtoa_r+0xb66>
  4099ca:	e5bd      	b.n	409548 <_dtoa_r+0x6e0>
  4099cc:	4615      	mov	r5, r2
  4099ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4099d2:	2b30      	cmp	r3, #48	; 0x30
  4099d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4099d8:	d0f8      	beq.n	4099cc <_dtoa_r+0xb64>
  4099da:	e5c5      	b.n	409568 <_dtoa_r+0x700>
  4099dc:	9904      	ldr	r1, [sp, #16]
  4099de:	2230      	movs	r2, #48	; 0x30
  4099e0:	700a      	strb	r2, [r1, #0]
  4099e2:	9a02      	ldr	r2, [sp, #8]
  4099e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4099e8:	3201      	adds	r2, #1
  4099ea:	9202      	str	r2, [sp, #8]
  4099ec:	f7ff bbfc 	b.w	4091e8 <_dtoa_r+0x380>
  4099f0:	f000 80bb 	beq.w	409b6a <_dtoa_r+0xd02>
  4099f4:	9b02      	ldr	r3, [sp, #8]
  4099f6:	425d      	negs	r5, r3
  4099f8:	4b84      	ldr	r3, [pc, #528]	; (409c0c <_dtoa_r+0xda4>)
  4099fa:	f005 020f 	and.w	r2, r5, #15
  4099fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409a02:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409a0a:	f002 fbf7 	bl	40c1fc <__aeabi_dmul>
  409a0e:	112d      	asrs	r5, r5, #4
  409a10:	4607      	mov	r7, r0
  409a12:	4688      	mov	r8, r1
  409a14:	f000 812c 	beq.w	409c70 <_dtoa_r+0xe08>
  409a18:	4e7d      	ldr	r6, [pc, #500]	; (409c10 <_dtoa_r+0xda8>)
  409a1a:	f04f 0a02 	mov.w	sl, #2
  409a1e:	07eb      	lsls	r3, r5, #31
  409a20:	d509      	bpl.n	409a36 <_dtoa_r+0xbce>
  409a22:	4638      	mov	r0, r7
  409a24:	4641      	mov	r1, r8
  409a26:	e9d6 2300 	ldrd	r2, r3, [r6]
  409a2a:	f002 fbe7 	bl	40c1fc <__aeabi_dmul>
  409a2e:	f10a 0a01 	add.w	sl, sl, #1
  409a32:	4607      	mov	r7, r0
  409a34:	4688      	mov	r8, r1
  409a36:	106d      	asrs	r5, r5, #1
  409a38:	f106 0608 	add.w	r6, r6, #8
  409a3c:	d1ef      	bne.n	409a1e <_dtoa_r+0xbb6>
  409a3e:	e608      	b.n	409652 <_dtoa_r+0x7ea>
  409a40:	6871      	ldr	r1, [r6, #4]
  409a42:	4620      	mov	r0, r4
  409a44:	f001 fa3c 	bl	40aec0 <_Balloc>
  409a48:	6933      	ldr	r3, [r6, #16]
  409a4a:	3302      	adds	r3, #2
  409a4c:	009a      	lsls	r2, r3, #2
  409a4e:	4605      	mov	r5, r0
  409a50:	f106 010c 	add.w	r1, r6, #12
  409a54:	300c      	adds	r0, #12
  409a56:	f7fc fb43 	bl	4060e0 <memcpy>
  409a5a:	4629      	mov	r1, r5
  409a5c:	2201      	movs	r2, #1
  409a5e:	4620      	mov	r0, r4
  409a60:	f001 fbda 	bl	40b218 <__lshift>
  409a64:	9006      	str	r0, [sp, #24]
  409a66:	e4b5      	b.n	4093d4 <_dtoa_r+0x56c>
  409a68:	2b39      	cmp	r3, #57	; 0x39
  409a6a:	f8cd b018 	str.w	fp, [sp, #24]
  409a6e:	46d0      	mov	r8, sl
  409a70:	f000 80a5 	beq.w	409bbe <_dtoa_r+0xd56>
  409a74:	f103 0a01 	add.w	sl, r3, #1
  409a78:	46b3      	mov	fp, r6
  409a7a:	f887 a000 	strb.w	sl, [r7]
  409a7e:	1c7d      	adds	r5, r7, #1
  409a80:	9e06      	ldr	r6, [sp, #24]
  409a82:	e571      	b.n	409568 <_dtoa_r+0x700>
  409a84:	465a      	mov	r2, fp
  409a86:	46d0      	mov	r8, sl
  409a88:	46b3      	mov	fp, r6
  409a8a:	469a      	mov	sl, r3
  409a8c:	4616      	mov	r6, r2
  409a8e:	e54f      	b.n	409530 <_dtoa_r+0x6c8>
  409a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409a92:	495e      	ldr	r1, [pc, #376]	; (409c0c <_dtoa_r+0xda4>)
  409a94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409a98:	462a      	mov	r2, r5
  409a9a:	4633      	mov	r3, r6
  409a9c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409aa0:	f002 fbac 	bl	40c1fc <__aeabi_dmul>
  409aa4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409aa8:	4638      	mov	r0, r7
  409aaa:	4641      	mov	r1, r8
  409aac:	f002 fe56 	bl	40c75c <__aeabi_d2iz>
  409ab0:	4605      	mov	r5, r0
  409ab2:	f002 fb3d 	bl	40c130 <__aeabi_i2d>
  409ab6:	460b      	mov	r3, r1
  409ab8:	4602      	mov	r2, r0
  409aba:	4641      	mov	r1, r8
  409abc:	4638      	mov	r0, r7
  409abe:	f002 f9e9 	bl	40be94 <__aeabi_dsub>
  409ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409ac4:	460f      	mov	r7, r1
  409ac6:	9904      	ldr	r1, [sp, #16]
  409ac8:	3530      	adds	r5, #48	; 0x30
  409aca:	2b01      	cmp	r3, #1
  409acc:	700d      	strb	r5, [r1, #0]
  409ace:	4606      	mov	r6, r0
  409ad0:	f101 0501 	add.w	r5, r1, #1
  409ad4:	d026      	beq.n	409b24 <_dtoa_r+0xcbc>
  409ad6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409ad8:	9a04      	ldr	r2, [sp, #16]
  409ada:	f8df b13c 	ldr.w	fp, [pc, #316]	; 409c18 <_dtoa_r+0xdb0>
  409ade:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409ae2:	4413      	add	r3, r2
  409ae4:	f04f 0a00 	mov.w	sl, #0
  409ae8:	4699      	mov	r9, r3
  409aea:	4652      	mov	r2, sl
  409aec:	465b      	mov	r3, fp
  409aee:	4630      	mov	r0, r6
  409af0:	4639      	mov	r1, r7
  409af2:	f002 fb83 	bl	40c1fc <__aeabi_dmul>
  409af6:	460f      	mov	r7, r1
  409af8:	4606      	mov	r6, r0
  409afa:	f002 fe2f 	bl	40c75c <__aeabi_d2iz>
  409afe:	4680      	mov	r8, r0
  409b00:	f002 fb16 	bl	40c130 <__aeabi_i2d>
  409b04:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409b08:	4602      	mov	r2, r0
  409b0a:	460b      	mov	r3, r1
  409b0c:	4630      	mov	r0, r6
  409b0e:	4639      	mov	r1, r7
  409b10:	f002 f9c0 	bl	40be94 <__aeabi_dsub>
  409b14:	f805 8b01 	strb.w	r8, [r5], #1
  409b18:	454d      	cmp	r5, r9
  409b1a:	4606      	mov	r6, r0
  409b1c:	460f      	mov	r7, r1
  409b1e:	d1e4      	bne.n	409aea <_dtoa_r+0xc82>
  409b20:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409b24:	4b3b      	ldr	r3, [pc, #236]	; (409c14 <_dtoa_r+0xdac>)
  409b26:	2200      	movs	r2, #0
  409b28:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  409b2c:	f002 f9b4 	bl	40be98 <__adddf3>
  409b30:	4632      	mov	r2, r6
  409b32:	463b      	mov	r3, r7
  409b34:	f002 fdd4 	bl	40c6e0 <__aeabi_dcmplt>
  409b38:	2800      	cmp	r0, #0
  409b3a:	d046      	beq.n	409bca <_dtoa_r+0xd62>
  409b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409b3e:	9302      	str	r3, [sp, #8]
  409b40:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409b44:	f7ff bb43 	b.w	4091ce <_dtoa_r+0x366>
  409b48:	f04f 0800 	mov.w	r8, #0
  409b4c:	4646      	mov	r6, r8
  409b4e:	e6a9      	b.n	4098a4 <_dtoa_r+0xa3c>
  409b50:	9b08      	ldr	r3, [sp, #32]
  409b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b54:	1a9d      	subs	r5, r3, r2
  409b56:	2300      	movs	r3, #0
  409b58:	f7ff bb71 	b.w	40923e <_dtoa_r+0x3d6>
  409b5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  409b5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409b60:	9d08      	ldr	r5, [sp, #32]
  409b62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409b66:	f7ff bb6a 	b.w	40923e <_dtoa_r+0x3d6>
  409b6a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  409b6e:	f04f 0a02 	mov.w	sl, #2
  409b72:	e56e      	b.n	409652 <_dtoa_r+0x7ea>
  409b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409b76:	2b00      	cmp	r3, #0
  409b78:	f43f aeb8 	beq.w	4098ec <_dtoa_r+0xa84>
  409b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409b7e:	2b00      	cmp	r3, #0
  409b80:	f77f aede 	ble.w	409940 <_dtoa_r+0xad8>
  409b84:	2200      	movs	r2, #0
  409b86:	4b24      	ldr	r3, [pc, #144]	; (409c18 <_dtoa_r+0xdb0>)
  409b88:	4638      	mov	r0, r7
  409b8a:	4641      	mov	r1, r8
  409b8c:	f002 fb36 	bl	40c1fc <__aeabi_dmul>
  409b90:	4607      	mov	r7, r0
  409b92:	4688      	mov	r8, r1
  409b94:	f10a 0001 	add.w	r0, sl, #1
  409b98:	f002 faca 	bl	40c130 <__aeabi_i2d>
  409b9c:	463a      	mov	r2, r7
  409b9e:	4643      	mov	r3, r8
  409ba0:	f002 fb2c 	bl	40c1fc <__aeabi_dmul>
  409ba4:	2200      	movs	r2, #0
  409ba6:	4b17      	ldr	r3, [pc, #92]	; (409c04 <_dtoa_r+0xd9c>)
  409ba8:	f002 f976 	bl	40be98 <__adddf3>
  409bac:	9a02      	ldr	r2, [sp, #8]
  409bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409bb0:	9312      	str	r3, [sp, #72]	; 0x48
  409bb2:	3a01      	subs	r2, #1
  409bb4:	4605      	mov	r5, r0
  409bb6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409bba:	9215      	str	r2, [sp, #84]	; 0x54
  409bbc:	e56a      	b.n	409694 <_dtoa_r+0x82c>
  409bbe:	2239      	movs	r2, #57	; 0x39
  409bc0:	46b3      	mov	fp, r6
  409bc2:	703a      	strb	r2, [r7, #0]
  409bc4:	9e06      	ldr	r6, [sp, #24]
  409bc6:	1c7d      	adds	r5, r7, #1
  409bc8:	e4c0      	b.n	40954c <_dtoa_r+0x6e4>
  409bca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  409bce:	2000      	movs	r0, #0
  409bd0:	4910      	ldr	r1, [pc, #64]	; (409c14 <_dtoa_r+0xdac>)
  409bd2:	f002 f95f 	bl	40be94 <__aeabi_dsub>
  409bd6:	4632      	mov	r2, r6
  409bd8:	463b      	mov	r3, r7
  409bda:	f002 fd9f 	bl	40c71c <__aeabi_dcmpgt>
  409bde:	b908      	cbnz	r0, 409be4 <_dtoa_r+0xd7c>
  409be0:	e6ae      	b.n	409940 <_dtoa_r+0xad8>
  409be2:	4615      	mov	r5, r2
  409be4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409be8:	2b30      	cmp	r3, #48	; 0x30
  409bea:	f105 32ff 	add.w	r2, r5, #4294967295
  409bee:	d0f8      	beq.n	409be2 <_dtoa_r+0xd7a>
  409bf0:	e5d7      	b.n	4097a2 <_dtoa_r+0x93a>
  409bf2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409bf8:	9302      	str	r3, [sp, #8]
  409bfa:	f7ff bae8 	b.w	4091ce <_dtoa_r+0x366>
  409bfe:	970c      	str	r7, [sp, #48]	; 0x30
  409c00:	f7ff bba5 	b.w	40934e <_dtoa_r+0x4e6>
  409c04:	401c0000 	.word	0x401c0000
  409c08:	40140000 	.word	0x40140000
  409c0c:	0040db90 	.word	0x0040db90
  409c10:	0040db68 	.word	0x0040db68
  409c14:	3fe00000 	.word	0x3fe00000
  409c18:	40240000 	.word	0x40240000
  409c1c:	2b39      	cmp	r3, #57	; 0x39
  409c1e:	f8cd b018 	str.w	fp, [sp, #24]
  409c22:	46d0      	mov	r8, sl
  409c24:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409c28:	469a      	mov	sl, r3
  409c2a:	d0c8      	beq.n	409bbe <_dtoa_r+0xd56>
  409c2c:	f1bb 0f00 	cmp.w	fp, #0
  409c30:	f73f aebf 	bgt.w	4099b2 <_dtoa_r+0xb4a>
  409c34:	e6bf      	b.n	4099b6 <_dtoa_r+0xb4e>
  409c36:	f47f aebe 	bne.w	4099b6 <_dtoa_r+0xb4e>
  409c3a:	f01a 0f01 	tst.w	sl, #1
  409c3e:	f43f aeba 	beq.w	4099b6 <_dtoa_r+0xb4e>
  409c42:	e6b2      	b.n	4099aa <_dtoa_r+0xb42>
  409c44:	f04f 0800 	mov.w	r8, #0
  409c48:	4646      	mov	r6, r8
  409c4a:	e5e9      	b.n	409820 <_dtoa_r+0x9b8>
  409c4c:	4631      	mov	r1, r6
  409c4e:	2300      	movs	r3, #0
  409c50:	220a      	movs	r2, #10
  409c52:	4620      	mov	r0, r4
  409c54:	f001 f964 	bl	40af20 <__multadd>
  409c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409c5a:	2b00      	cmp	r3, #0
  409c5c:	4606      	mov	r6, r0
  409c5e:	dd0a      	ble.n	409c76 <_dtoa_r+0xe0e>
  409c60:	930a      	str	r3, [sp, #40]	; 0x28
  409c62:	f7ff bbaa 	b.w	4093ba <_dtoa_r+0x552>
  409c66:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409c68:	2b02      	cmp	r3, #2
  409c6a:	dc23      	bgt.n	409cb4 <_dtoa_r+0xe4c>
  409c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409c6e:	e43b      	b.n	4094e8 <_dtoa_r+0x680>
  409c70:	f04f 0a02 	mov.w	sl, #2
  409c74:	e4ed      	b.n	409652 <_dtoa_r+0x7ea>
  409c76:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409c78:	2b02      	cmp	r3, #2
  409c7a:	dc1b      	bgt.n	409cb4 <_dtoa_r+0xe4c>
  409c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409c7e:	e7ef      	b.n	409c60 <_dtoa_r+0xdf8>
  409c80:	2500      	movs	r5, #0
  409c82:	6465      	str	r5, [r4, #68]	; 0x44
  409c84:	4629      	mov	r1, r5
  409c86:	4620      	mov	r0, r4
  409c88:	f001 f91a 	bl	40aec0 <_Balloc>
  409c8c:	f04f 33ff 	mov.w	r3, #4294967295
  409c90:	930a      	str	r3, [sp, #40]	; 0x28
  409c92:	930f      	str	r3, [sp, #60]	; 0x3c
  409c94:	2301      	movs	r3, #1
  409c96:	9004      	str	r0, [sp, #16]
  409c98:	9525      	str	r5, [sp, #148]	; 0x94
  409c9a:	6420      	str	r0, [r4, #64]	; 0x40
  409c9c:	930b      	str	r3, [sp, #44]	; 0x2c
  409c9e:	f7ff b9dd 	b.w	40905c <_dtoa_r+0x1f4>
  409ca2:	2501      	movs	r5, #1
  409ca4:	f7ff b9a5 	b.w	408ff2 <_dtoa_r+0x18a>
  409ca8:	f43f ab69 	beq.w	40937e <_dtoa_r+0x516>
  409cac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409cb0:	f7ff bbf9 	b.w	4094a6 <_dtoa_r+0x63e>
  409cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409cb6:	930a      	str	r3, [sp, #40]	; 0x28
  409cb8:	e5e5      	b.n	409886 <_dtoa_r+0xa1e>
  409cba:	bf00      	nop

00409cbc <__sflush_r>:
  409cbc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  409cc0:	b29a      	uxth	r2, r3
  409cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409cc6:	460d      	mov	r5, r1
  409cc8:	0711      	lsls	r1, r2, #28
  409cca:	4680      	mov	r8, r0
  409ccc:	d43a      	bmi.n	409d44 <__sflush_r+0x88>
  409cce:	686a      	ldr	r2, [r5, #4]
  409cd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409cd4:	2a00      	cmp	r2, #0
  409cd6:	81ab      	strh	r3, [r5, #12]
  409cd8:	dd6f      	ble.n	409dba <__sflush_r+0xfe>
  409cda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409cdc:	2c00      	cmp	r4, #0
  409cde:	d049      	beq.n	409d74 <__sflush_r+0xb8>
  409ce0:	2200      	movs	r2, #0
  409ce2:	b29b      	uxth	r3, r3
  409ce4:	f8d8 6000 	ldr.w	r6, [r8]
  409ce8:	f8c8 2000 	str.w	r2, [r8]
  409cec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  409cf0:	d067      	beq.n	409dc2 <__sflush_r+0x106>
  409cf2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409cf4:	075f      	lsls	r7, r3, #29
  409cf6:	d505      	bpl.n	409d04 <__sflush_r+0x48>
  409cf8:	6869      	ldr	r1, [r5, #4]
  409cfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  409cfc:	1a52      	subs	r2, r2, r1
  409cfe:	b10b      	cbz	r3, 409d04 <__sflush_r+0x48>
  409d00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409d02:	1ad2      	subs	r2, r2, r3
  409d04:	2300      	movs	r3, #0
  409d06:	69e9      	ldr	r1, [r5, #28]
  409d08:	4640      	mov	r0, r8
  409d0a:	47a0      	blx	r4
  409d0c:	1c44      	adds	r4, r0, #1
  409d0e:	d03c      	beq.n	409d8a <__sflush_r+0xce>
  409d10:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  409d14:	692a      	ldr	r2, [r5, #16]
  409d16:	602a      	str	r2, [r5, #0]
  409d18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409d1c:	2200      	movs	r2, #0
  409d1e:	81ab      	strh	r3, [r5, #12]
  409d20:	04db      	lsls	r3, r3, #19
  409d22:	606a      	str	r2, [r5, #4]
  409d24:	d447      	bmi.n	409db6 <__sflush_r+0xfa>
  409d26:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409d28:	f8c8 6000 	str.w	r6, [r8]
  409d2c:	b311      	cbz	r1, 409d74 <__sflush_r+0xb8>
  409d2e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409d32:	4299      	cmp	r1, r3
  409d34:	d002      	beq.n	409d3c <__sflush_r+0x80>
  409d36:	4640      	mov	r0, r8
  409d38:	f000 f9de 	bl	40a0f8 <_free_r>
  409d3c:	2000      	movs	r0, #0
  409d3e:	6328      	str	r0, [r5, #48]	; 0x30
  409d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409d44:	692e      	ldr	r6, [r5, #16]
  409d46:	b1ae      	cbz	r6, 409d74 <__sflush_r+0xb8>
  409d48:	682c      	ldr	r4, [r5, #0]
  409d4a:	602e      	str	r6, [r5, #0]
  409d4c:	0791      	lsls	r1, r2, #30
  409d4e:	bf0c      	ite	eq
  409d50:	696b      	ldreq	r3, [r5, #20]
  409d52:	2300      	movne	r3, #0
  409d54:	1ba4      	subs	r4, r4, r6
  409d56:	60ab      	str	r3, [r5, #8]
  409d58:	e00a      	b.n	409d70 <__sflush_r+0xb4>
  409d5a:	4623      	mov	r3, r4
  409d5c:	4632      	mov	r2, r6
  409d5e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409d60:	69e9      	ldr	r1, [r5, #28]
  409d62:	4640      	mov	r0, r8
  409d64:	47b8      	blx	r7
  409d66:	2800      	cmp	r0, #0
  409d68:	eba4 0400 	sub.w	r4, r4, r0
  409d6c:	4406      	add	r6, r0
  409d6e:	dd04      	ble.n	409d7a <__sflush_r+0xbe>
  409d70:	2c00      	cmp	r4, #0
  409d72:	dcf2      	bgt.n	409d5a <__sflush_r+0x9e>
  409d74:	2000      	movs	r0, #0
  409d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409d7a:	89ab      	ldrh	r3, [r5, #12]
  409d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409d80:	81ab      	strh	r3, [r5, #12]
  409d82:	f04f 30ff 	mov.w	r0, #4294967295
  409d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409d8a:	f8d8 4000 	ldr.w	r4, [r8]
  409d8e:	2c1d      	cmp	r4, #29
  409d90:	d8f3      	bhi.n	409d7a <__sflush_r+0xbe>
  409d92:	4b19      	ldr	r3, [pc, #100]	; (409df8 <__sflush_r+0x13c>)
  409d94:	40e3      	lsrs	r3, r4
  409d96:	43db      	mvns	r3, r3
  409d98:	f013 0301 	ands.w	r3, r3, #1
  409d9c:	d1ed      	bne.n	409d7a <__sflush_r+0xbe>
  409d9e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  409da2:	606b      	str	r3, [r5, #4]
  409da4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  409da8:	6929      	ldr	r1, [r5, #16]
  409daa:	81ab      	strh	r3, [r5, #12]
  409dac:	04da      	lsls	r2, r3, #19
  409dae:	6029      	str	r1, [r5, #0]
  409db0:	d5b9      	bpl.n	409d26 <__sflush_r+0x6a>
  409db2:	2c00      	cmp	r4, #0
  409db4:	d1b7      	bne.n	409d26 <__sflush_r+0x6a>
  409db6:	6528      	str	r0, [r5, #80]	; 0x50
  409db8:	e7b5      	b.n	409d26 <__sflush_r+0x6a>
  409dba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409dbc:	2a00      	cmp	r2, #0
  409dbe:	dc8c      	bgt.n	409cda <__sflush_r+0x1e>
  409dc0:	e7d8      	b.n	409d74 <__sflush_r+0xb8>
  409dc2:	2301      	movs	r3, #1
  409dc4:	69e9      	ldr	r1, [r5, #28]
  409dc6:	4640      	mov	r0, r8
  409dc8:	47a0      	blx	r4
  409dca:	1c43      	adds	r3, r0, #1
  409dcc:	4602      	mov	r2, r0
  409dce:	d002      	beq.n	409dd6 <__sflush_r+0x11a>
  409dd0:	89ab      	ldrh	r3, [r5, #12]
  409dd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409dd4:	e78e      	b.n	409cf4 <__sflush_r+0x38>
  409dd6:	f8d8 3000 	ldr.w	r3, [r8]
  409dda:	2b00      	cmp	r3, #0
  409ddc:	d0f8      	beq.n	409dd0 <__sflush_r+0x114>
  409dde:	2b1d      	cmp	r3, #29
  409de0:	d001      	beq.n	409de6 <__sflush_r+0x12a>
  409de2:	2b16      	cmp	r3, #22
  409de4:	d102      	bne.n	409dec <__sflush_r+0x130>
  409de6:	f8c8 6000 	str.w	r6, [r8]
  409dea:	e7c3      	b.n	409d74 <__sflush_r+0xb8>
  409dec:	89ab      	ldrh	r3, [r5, #12]
  409dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409df2:	81ab      	strh	r3, [r5, #12]
  409df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409df8:	20400001 	.word	0x20400001

00409dfc <_fflush_r>:
  409dfc:	b538      	push	{r3, r4, r5, lr}
  409dfe:	460d      	mov	r5, r1
  409e00:	4604      	mov	r4, r0
  409e02:	b108      	cbz	r0, 409e08 <_fflush_r+0xc>
  409e04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409e06:	b1bb      	cbz	r3, 409e38 <_fflush_r+0x3c>
  409e08:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  409e0c:	b188      	cbz	r0, 409e32 <_fflush_r+0x36>
  409e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409e10:	07db      	lsls	r3, r3, #31
  409e12:	d401      	bmi.n	409e18 <_fflush_r+0x1c>
  409e14:	0581      	lsls	r1, r0, #22
  409e16:	d517      	bpl.n	409e48 <_fflush_r+0x4c>
  409e18:	4620      	mov	r0, r4
  409e1a:	4629      	mov	r1, r5
  409e1c:	f7ff ff4e 	bl	409cbc <__sflush_r>
  409e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409e22:	07da      	lsls	r2, r3, #31
  409e24:	4604      	mov	r4, r0
  409e26:	d402      	bmi.n	409e2e <_fflush_r+0x32>
  409e28:	89ab      	ldrh	r3, [r5, #12]
  409e2a:	059b      	lsls	r3, r3, #22
  409e2c:	d507      	bpl.n	409e3e <_fflush_r+0x42>
  409e2e:	4620      	mov	r0, r4
  409e30:	bd38      	pop	{r3, r4, r5, pc}
  409e32:	4604      	mov	r4, r0
  409e34:	4620      	mov	r0, r4
  409e36:	bd38      	pop	{r3, r4, r5, pc}
  409e38:	f000 f838 	bl	409eac <__sinit>
  409e3c:	e7e4      	b.n	409e08 <_fflush_r+0xc>
  409e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409e40:	f000 fc04 	bl	40a64c <__retarget_lock_release_recursive>
  409e44:	4620      	mov	r0, r4
  409e46:	bd38      	pop	{r3, r4, r5, pc}
  409e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409e4a:	f000 fbfd 	bl	40a648 <__retarget_lock_acquire_recursive>
  409e4e:	e7e3      	b.n	409e18 <_fflush_r+0x1c>

00409e50 <_cleanup_r>:
  409e50:	4901      	ldr	r1, [pc, #4]	; (409e58 <_cleanup_r+0x8>)
  409e52:	f000 bbaf 	b.w	40a5b4 <_fwalk_reent>
  409e56:	bf00      	nop
  409e58:	0040bd25 	.word	0x0040bd25

00409e5c <std.isra.0>:
  409e5c:	b510      	push	{r4, lr}
  409e5e:	2300      	movs	r3, #0
  409e60:	4604      	mov	r4, r0
  409e62:	8181      	strh	r1, [r0, #12]
  409e64:	81c2      	strh	r2, [r0, #14]
  409e66:	6003      	str	r3, [r0, #0]
  409e68:	6043      	str	r3, [r0, #4]
  409e6a:	6083      	str	r3, [r0, #8]
  409e6c:	6643      	str	r3, [r0, #100]	; 0x64
  409e6e:	6103      	str	r3, [r0, #16]
  409e70:	6143      	str	r3, [r0, #20]
  409e72:	6183      	str	r3, [r0, #24]
  409e74:	4619      	mov	r1, r3
  409e76:	2208      	movs	r2, #8
  409e78:	305c      	adds	r0, #92	; 0x5c
  409e7a:	f7fc f9cb 	bl	406214 <memset>
  409e7e:	4807      	ldr	r0, [pc, #28]	; (409e9c <std.isra.0+0x40>)
  409e80:	4907      	ldr	r1, [pc, #28]	; (409ea0 <std.isra.0+0x44>)
  409e82:	4a08      	ldr	r2, [pc, #32]	; (409ea4 <std.isra.0+0x48>)
  409e84:	4b08      	ldr	r3, [pc, #32]	; (409ea8 <std.isra.0+0x4c>)
  409e86:	6220      	str	r0, [r4, #32]
  409e88:	61e4      	str	r4, [r4, #28]
  409e8a:	6261      	str	r1, [r4, #36]	; 0x24
  409e8c:	62a2      	str	r2, [r4, #40]	; 0x28
  409e8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  409e90:	f104 0058 	add.w	r0, r4, #88	; 0x58
  409e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409e98:	f000 bbd2 	b.w	40a640 <__retarget_lock_init_recursive>
  409e9c:	0040b825 	.word	0x0040b825
  409ea0:	0040b849 	.word	0x0040b849
  409ea4:	0040b885 	.word	0x0040b885
  409ea8:	0040b8a5 	.word	0x0040b8a5

00409eac <__sinit>:
  409eac:	b510      	push	{r4, lr}
  409eae:	4604      	mov	r4, r0
  409eb0:	4812      	ldr	r0, [pc, #72]	; (409efc <__sinit+0x50>)
  409eb2:	f000 fbc9 	bl	40a648 <__retarget_lock_acquire_recursive>
  409eb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  409eb8:	b9d2      	cbnz	r2, 409ef0 <__sinit+0x44>
  409eba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  409ebe:	4810      	ldr	r0, [pc, #64]	; (409f00 <__sinit+0x54>)
  409ec0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  409ec4:	2103      	movs	r1, #3
  409ec6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  409eca:	63e0      	str	r0, [r4, #60]	; 0x3c
  409ecc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  409ed0:	6860      	ldr	r0, [r4, #4]
  409ed2:	2104      	movs	r1, #4
  409ed4:	f7ff ffc2 	bl	409e5c <std.isra.0>
  409ed8:	2201      	movs	r2, #1
  409eda:	2109      	movs	r1, #9
  409edc:	68a0      	ldr	r0, [r4, #8]
  409ede:	f7ff ffbd 	bl	409e5c <std.isra.0>
  409ee2:	2202      	movs	r2, #2
  409ee4:	2112      	movs	r1, #18
  409ee6:	68e0      	ldr	r0, [r4, #12]
  409ee8:	f7ff ffb8 	bl	409e5c <std.isra.0>
  409eec:	2301      	movs	r3, #1
  409eee:	63a3      	str	r3, [r4, #56]	; 0x38
  409ef0:	4802      	ldr	r0, [pc, #8]	; (409efc <__sinit+0x50>)
  409ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409ef6:	f000 bba9 	b.w	40a64c <__retarget_lock_release_recursive>
  409efa:	bf00      	nop
  409efc:	2040d034 	.word	0x2040d034
  409f00:	00409e51 	.word	0x00409e51

00409f04 <__sfp_lock_acquire>:
  409f04:	4801      	ldr	r0, [pc, #4]	; (409f0c <__sfp_lock_acquire+0x8>)
  409f06:	f000 bb9f 	b.w	40a648 <__retarget_lock_acquire_recursive>
  409f0a:	bf00      	nop
  409f0c:	2040d048 	.word	0x2040d048

00409f10 <__sfp_lock_release>:
  409f10:	4801      	ldr	r0, [pc, #4]	; (409f18 <__sfp_lock_release+0x8>)
  409f12:	f000 bb9b 	b.w	40a64c <__retarget_lock_release_recursive>
  409f16:	bf00      	nop
  409f18:	2040d048 	.word	0x2040d048

00409f1c <__libc_fini_array>:
  409f1c:	b538      	push	{r3, r4, r5, lr}
  409f1e:	4c0a      	ldr	r4, [pc, #40]	; (409f48 <__libc_fini_array+0x2c>)
  409f20:	4d0a      	ldr	r5, [pc, #40]	; (409f4c <__libc_fini_array+0x30>)
  409f22:	1b64      	subs	r4, r4, r5
  409f24:	10a4      	asrs	r4, r4, #2
  409f26:	d00a      	beq.n	409f3e <__libc_fini_array+0x22>
  409f28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  409f2c:	3b01      	subs	r3, #1
  409f2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  409f32:	3c01      	subs	r4, #1
  409f34:	f855 3904 	ldr.w	r3, [r5], #-4
  409f38:	4798      	blx	r3
  409f3a:	2c00      	cmp	r4, #0
  409f3c:	d1f9      	bne.n	409f32 <__libc_fini_array+0x16>
  409f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  409f42:	f003 bf1b 	b.w	40dd7c <_fini>
  409f46:	bf00      	nop
  409f48:	0040dd8c 	.word	0x0040dd8c
  409f4c:	0040dd88 	.word	0x0040dd88

00409f50 <__fputwc>:
  409f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409f54:	b082      	sub	sp, #8
  409f56:	4680      	mov	r8, r0
  409f58:	4689      	mov	r9, r1
  409f5a:	4614      	mov	r4, r2
  409f5c:	f000 fb54 	bl	40a608 <__locale_mb_cur_max>
  409f60:	2801      	cmp	r0, #1
  409f62:	d036      	beq.n	409fd2 <__fputwc+0x82>
  409f64:	464a      	mov	r2, r9
  409f66:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  409f6a:	a901      	add	r1, sp, #4
  409f6c:	4640      	mov	r0, r8
  409f6e:	f001 fde7 	bl	40bb40 <_wcrtomb_r>
  409f72:	1c42      	adds	r2, r0, #1
  409f74:	4606      	mov	r6, r0
  409f76:	d025      	beq.n	409fc4 <__fputwc+0x74>
  409f78:	b3a8      	cbz	r0, 409fe6 <__fputwc+0x96>
  409f7a:	f89d e004 	ldrb.w	lr, [sp, #4]
  409f7e:	2500      	movs	r5, #0
  409f80:	f10d 0a04 	add.w	sl, sp, #4
  409f84:	e009      	b.n	409f9a <__fputwc+0x4a>
  409f86:	6823      	ldr	r3, [r4, #0]
  409f88:	1c5a      	adds	r2, r3, #1
  409f8a:	6022      	str	r2, [r4, #0]
  409f8c:	f883 e000 	strb.w	lr, [r3]
  409f90:	3501      	adds	r5, #1
  409f92:	42b5      	cmp	r5, r6
  409f94:	d227      	bcs.n	409fe6 <__fputwc+0x96>
  409f96:	f815 e00a 	ldrb.w	lr, [r5, sl]
  409f9a:	68a3      	ldr	r3, [r4, #8]
  409f9c:	3b01      	subs	r3, #1
  409f9e:	2b00      	cmp	r3, #0
  409fa0:	60a3      	str	r3, [r4, #8]
  409fa2:	daf0      	bge.n	409f86 <__fputwc+0x36>
  409fa4:	69a7      	ldr	r7, [r4, #24]
  409fa6:	42bb      	cmp	r3, r7
  409fa8:	4671      	mov	r1, lr
  409faa:	4622      	mov	r2, r4
  409fac:	4640      	mov	r0, r8
  409fae:	db02      	blt.n	409fb6 <__fputwc+0x66>
  409fb0:	f1be 0f0a 	cmp.w	lr, #10
  409fb4:	d1e7      	bne.n	409f86 <__fputwc+0x36>
  409fb6:	f001 fd6b 	bl	40ba90 <__swbuf_r>
  409fba:	1c43      	adds	r3, r0, #1
  409fbc:	d1e8      	bne.n	409f90 <__fputwc+0x40>
  409fbe:	b002      	add	sp, #8
  409fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409fc4:	89a3      	ldrh	r3, [r4, #12]
  409fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409fca:	81a3      	strh	r3, [r4, #12]
  409fcc:	b002      	add	sp, #8
  409fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409fd2:	f109 33ff 	add.w	r3, r9, #4294967295
  409fd6:	2bfe      	cmp	r3, #254	; 0xfe
  409fd8:	d8c4      	bhi.n	409f64 <__fputwc+0x14>
  409fda:	fa5f fe89 	uxtb.w	lr, r9
  409fde:	4606      	mov	r6, r0
  409fe0:	f88d e004 	strb.w	lr, [sp, #4]
  409fe4:	e7cb      	b.n	409f7e <__fputwc+0x2e>
  409fe6:	4648      	mov	r0, r9
  409fe8:	b002      	add	sp, #8
  409fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409fee:	bf00      	nop

00409ff0 <_fputwc_r>:
  409ff0:	b530      	push	{r4, r5, lr}
  409ff2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  409ff4:	f013 0f01 	tst.w	r3, #1
  409ff8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  409ffc:	4614      	mov	r4, r2
  409ffe:	b083      	sub	sp, #12
  40a000:	4605      	mov	r5, r0
  40a002:	b29a      	uxth	r2, r3
  40a004:	d101      	bne.n	40a00a <_fputwc_r+0x1a>
  40a006:	0590      	lsls	r0, r2, #22
  40a008:	d51c      	bpl.n	40a044 <_fputwc_r+0x54>
  40a00a:	0490      	lsls	r0, r2, #18
  40a00c:	d406      	bmi.n	40a01c <_fputwc_r+0x2c>
  40a00e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a018:	81a3      	strh	r3, [r4, #12]
  40a01a:	6662      	str	r2, [r4, #100]	; 0x64
  40a01c:	4628      	mov	r0, r5
  40a01e:	4622      	mov	r2, r4
  40a020:	f7ff ff96 	bl	409f50 <__fputwc>
  40a024:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a026:	07da      	lsls	r2, r3, #31
  40a028:	4605      	mov	r5, r0
  40a02a:	d402      	bmi.n	40a032 <_fputwc_r+0x42>
  40a02c:	89a3      	ldrh	r3, [r4, #12]
  40a02e:	059b      	lsls	r3, r3, #22
  40a030:	d502      	bpl.n	40a038 <_fputwc_r+0x48>
  40a032:	4628      	mov	r0, r5
  40a034:	b003      	add	sp, #12
  40a036:	bd30      	pop	{r4, r5, pc}
  40a038:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a03a:	f000 fb07 	bl	40a64c <__retarget_lock_release_recursive>
  40a03e:	4628      	mov	r0, r5
  40a040:	b003      	add	sp, #12
  40a042:	bd30      	pop	{r4, r5, pc}
  40a044:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a046:	9101      	str	r1, [sp, #4]
  40a048:	f000 fafe 	bl	40a648 <__retarget_lock_acquire_recursive>
  40a04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a050:	9901      	ldr	r1, [sp, #4]
  40a052:	b29a      	uxth	r2, r3
  40a054:	e7d9      	b.n	40a00a <_fputwc_r+0x1a>
  40a056:	bf00      	nop

0040a058 <_malloc_trim_r>:
  40a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a05a:	4f24      	ldr	r7, [pc, #144]	; (40a0ec <_malloc_trim_r+0x94>)
  40a05c:	460c      	mov	r4, r1
  40a05e:	4606      	mov	r6, r0
  40a060:	f000 ff22 	bl	40aea8 <__malloc_lock>
  40a064:	68bb      	ldr	r3, [r7, #8]
  40a066:	685d      	ldr	r5, [r3, #4]
  40a068:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40a06c:	310f      	adds	r1, #15
  40a06e:	f025 0503 	bic.w	r5, r5, #3
  40a072:	4429      	add	r1, r5
  40a074:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40a078:	f021 010f 	bic.w	r1, r1, #15
  40a07c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40a080:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a084:	db07      	blt.n	40a096 <_malloc_trim_r+0x3e>
  40a086:	2100      	movs	r1, #0
  40a088:	4630      	mov	r0, r6
  40a08a:	f001 fbb9 	bl	40b800 <_sbrk_r>
  40a08e:	68bb      	ldr	r3, [r7, #8]
  40a090:	442b      	add	r3, r5
  40a092:	4298      	cmp	r0, r3
  40a094:	d004      	beq.n	40a0a0 <_malloc_trim_r+0x48>
  40a096:	4630      	mov	r0, r6
  40a098:	f000 ff0c 	bl	40aeb4 <__malloc_unlock>
  40a09c:	2000      	movs	r0, #0
  40a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a0a0:	4261      	negs	r1, r4
  40a0a2:	4630      	mov	r0, r6
  40a0a4:	f001 fbac 	bl	40b800 <_sbrk_r>
  40a0a8:	3001      	adds	r0, #1
  40a0aa:	d00d      	beq.n	40a0c8 <_malloc_trim_r+0x70>
  40a0ac:	4b10      	ldr	r3, [pc, #64]	; (40a0f0 <_malloc_trim_r+0x98>)
  40a0ae:	68ba      	ldr	r2, [r7, #8]
  40a0b0:	6819      	ldr	r1, [r3, #0]
  40a0b2:	1b2d      	subs	r5, r5, r4
  40a0b4:	f045 0501 	orr.w	r5, r5, #1
  40a0b8:	4630      	mov	r0, r6
  40a0ba:	1b09      	subs	r1, r1, r4
  40a0bc:	6055      	str	r5, [r2, #4]
  40a0be:	6019      	str	r1, [r3, #0]
  40a0c0:	f000 fef8 	bl	40aeb4 <__malloc_unlock>
  40a0c4:	2001      	movs	r0, #1
  40a0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a0c8:	2100      	movs	r1, #0
  40a0ca:	4630      	mov	r0, r6
  40a0cc:	f001 fb98 	bl	40b800 <_sbrk_r>
  40a0d0:	68ba      	ldr	r2, [r7, #8]
  40a0d2:	1a83      	subs	r3, r0, r2
  40a0d4:	2b0f      	cmp	r3, #15
  40a0d6:	ddde      	ble.n	40a096 <_malloc_trim_r+0x3e>
  40a0d8:	4c06      	ldr	r4, [pc, #24]	; (40a0f4 <_malloc_trim_r+0x9c>)
  40a0da:	4905      	ldr	r1, [pc, #20]	; (40a0f0 <_malloc_trim_r+0x98>)
  40a0dc:	6824      	ldr	r4, [r4, #0]
  40a0de:	f043 0301 	orr.w	r3, r3, #1
  40a0e2:	1b00      	subs	r0, r0, r4
  40a0e4:	6053      	str	r3, [r2, #4]
  40a0e6:	6008      	str	r0, [r1, #0]
  40a0e8:	e7d5      	b.n	40a096 <_malloc_trim_r+0x3e>
  40a0ea:	bf00      	nop
  40a0ec:	204005c0 	.word	0x204005c0
  40a0f0:	2040cee0 	.word	0x2040cee0
  40a0f4:	204009c8 	.word	0x204009c8

0040a0f8 <_free_r>:
  40a0f8:	2900      	cmp	r1, #0
  40a0fa:	d044      	beq.n	40a186 <_free_r+0x8e>
  40a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a100:	460d      	mov	r5, r1
  40a102:	4680      	mov	r8, r0
  40a104:	f000 fed0 	bl	40aea8 <__malloc_lock>
  40a108:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40a10c:	4969      	ldr	r1, [pc, #420]	; (40a2b4 <_free_r+0x1bc>)
  40a10e:	f027 0301 	bic.w	r3, r7, #1
  40a112:	f1a5 0408 	sub.w	r4, r5, #8
  40a116:	18e2      	adds	r2, r4, r3
  40a118:	688e      	ldr	r6, [r1, #8]
  40a11a:	6850      	ldr	r0, [r2, #4]
  40a11c:	42b2      	cmp	r2, r6
  40a11e:	f020 0003 	bic.w	r0, r0, #3
  40a122:	d05e      	beq.n	40a1e2 <_free_r+0xea>
  40a124:	07fe      	lsls	r6, r7, #31
  40a126:	6050      	str	r0, [r2, #4]
  40a128:	d40b      	bmi.n	40a142 <_free_r+0x4a>
  40a12a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40a12e:	1be4      	subs	r4, r4, r7
  40a130:	f101 0e08 	add.w	lr, r1, #8
  40a134:	68a5      	ldr	r5, [r4, #8]
  40a136:	4575      	cmp	r5, lr
  40a138:	443b      	add	r3, r7
  40a13a:	d06d      	beq.n	40a218 <_free_r+0x120>
  40a13c:	68e7      	ldr	r7, [r4, #12]
  40a13e:	60ef      	str	r7, [r5, #12]
  40a140:	60bd      	str	r5, [r7, #8]
  40a142:	1815      	adds	r5, r2, r0
  40a144:	686d      	ldr	r5, [r5, #4]
  40a146:	07ed      	lsls	r5, r5, #31
  40a148:	d53e      	bpl.n	40a1c8 <_free_r+0xd0>
  40a14a:	f043 0201 	orr.w	r2, r3, #1
  40a14e:	6062      	str	r2, [r4, #4]
  40a150:	50e3      	str	r3, [r4, r3]
  40a152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a156:	d217      	bcs.n	40a188 <_free_r+0x90>
  40a158:	08db      	lsrs	r3, r3, #3
  40a15a:	1c58      	adds	r0, r3, #1
  40a15c:	109a      	asrs	r2, r3, #2
  40a15e:	684d      	ldr	r5, [r1, #4]
  40a160:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40a164:	60a7      	str	r7, [r4, #8]
  40a166:	2301      	movs	r3, #1
  40a168:	4093      	lsls	r3, r2
  40a16a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40a16e:	432b      	orrs	r3, r5
  40a170:	3a08      	subs	r2, #8
  40a172:	60e2      	str	r2, [r4, #12]
  40a174:	604b      	str	r3, [r1, #4]
  40a176:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40a17a:	60fc      	str	r4, [r7, #12]
  40a17c:	4640      	mov	r0, r8
  40a17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a182:	f000 be97 	b.w	40aeb4 <__malloc_unlock>
  40a186:	4770      	bx	lr
  40a188:	0a5a      	lsrs	r2, r3, #9
  40a18a:	2a04      	cmp	r2, #4
  40a18c:	d852      	bhi.n	40a234 <_free_r+0x13c>
  40a18e:	099a      	lsrs	r2, r3, #6
  40a190:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40a194:	00ff      	lsls	r7, r7, #3
  40a196:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40a19a:	19c8      	adds	r0, r1, r7
  40a19c:	59ca      	ldr	r2, [r1, r7]
  40a19e:	3808      	subs	r0, #8
  40a1a0:	4290      	cmp	r0, r2
  40a1a2:	d04f      	beq.n	40a244 <_free_r+0x14c>
  40a1a4:	6851      	ldr	r1, [r2, #4]
  40a1a6:	f021 0103 	bic.w	r1, r1, #3
  40a1aa:	428b      	cmp	r3, r1
  40a1ac:	d232      	bcs.n	40a214 <_free_r+0x11c>
  40a1ae:	6892      	ldr	r2, [r2, #8]
  40a1b0:	4290      	cmp	r0, r2
  40a1b2:	d1f7      	bne.n	40a1a4 <_free_r+0xac>
  40a1b4:	68c3      	ldr	r3, [r0, #12]
  40a1b6:	60a0      	str	r0, [r4, #8]
  40a1b8:	60e3      	str	r3, [r4, #12]
  40a1ba:	609c      	str	r4, [r3, #8]
  40a1bc:	60c4      	str	r4, [r0, #12]
  40a1be:	4640      	mov	r0, r8
  40a1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a1c4:	f000 be76 	b.w	40aeb4 <__malloc_unlock>
  40a1c8:	6895      	ldr	r5, [r2, #8]
  40a1ca:	4f3b      	ldr	r7, [pc, #236]	; (40a2b8 <_free_r+0x1c0>)
  40a1cc:	42bd      	cmp	r5, r7
  40a1ce:	4403      	add	r3, r0
  40a1d0:	d040      	beq.n	40a254 <_free_r+0x15c>
  40a1d2:	68d0      	ldr	r0, [r2, #12]
  40a1d4:	60e8      	str	r0, [r5, #12]
  40a1d6:	f043 0201 	orr.w	r2, r3, #1
  40a1da:	6085      	str	r5, [r0, #8]
  40a1dc:	6062      	str	r2, [r4, #4]
  40a1de:	50e3      	str	r3, [r4, r3]
  40a1e0:	e7b7      	b.n	40a152 <_free_r+0x5a>
  40a1e2:	07ff      	lsls	r7, r7, #31
  40a1e4:	4403      	add	r3, r0
  40a1e6:	d407      	bmi.n	40a1f8 <_free_r+0x100>
  40a1e8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a1ec:	1aa4      	subs	r4, r4, r2
  40a1ee:	4413      	add	r3, r2
  40a1f0:	68a0      	ldr	r0, [r4, #8]
  40a1f2:	68e2      	ldr	r2, [r4, #12]
  40a1f4:	60c2      	str	r2, [r0, #12]
  40a1f6:	6090      	str	r0, [r2, #8]
  40a1f8:	4a30      	ldr	r2, [pc, #192]	; (40a2bc <_free_r+0x1c4>)
  40a1fa:	6812      	ldr	r2, [r2, #0]
  40a1fc:	f043 0001 	orr.w	r0, r3, #1
  40a200:	4293      	cmp	r3, r2
  40a202:	6060      	str	r0, [r4, #4]
  40a204:	608c      	str	r4, [r1, #8]
  40a206:	d3b9      	bcc.n	40a17c <_free_r+0x84>
  40a208:	4b2d      	ldr	r3, [pc, #180]	; (40a2c0 <_free_r+0x1c8>)
  40a20a:	4640      	mov	r0, r8
  40a20c:	6819      	ldr	r1, [r3, #0]
  40a20e:	f7ff ff23 	bl	40a058 <_malloc_trim_r>
  40a212:	e7b3      	b.n	40a17c <_free_r+0x84>
  40a214:	4610      	mov	r0, r2
  40a216:	e7cd      	b.n	40a1b4 <_free_r+0xbc>
  40a218:	1811      	adds	r1, r2, r0
  40a21a:	6849      	ldr	r1, [r1, #4]
  40a21c:	07c9      	lsls	r1, r1, #31
  40a21e:	d444      	bmi.n	40a2aa <_free_r+0x1b2>
  40a220:	6891      	ldr	r1, [r2, #8]
  40a222:	68d2      	ldr	r2, [r2, #12]
  40a224:	60ca      	str	r2, [r1, #12]
  40a226:	4403      	add	r3, r0
  40a228:	f043 0001 	orr.w	r0, r3, #1
  40a22c:	6091      	str	r1, [r2, #8]
  40a22e:	6060      	str	r0, [r4, #4]
  40a230:	50e3      	str	r3, [r4, r3]
  40a232:	e7a3      	b.n	40a17c <_free_r+0x84>
  40a234:	2a14      	cmp	r2, #20
  40a236:	d816      	bhi.n	40a266 <_free_r+0x16e>
  40a238:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a23c:	00ff      	lsls	r7, r7, #3
  40a23e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a242:	e7aa      	b.n	40a19a <_free_r+0xa2>
  40a244:	10aa      	asrs	r2, r5, #2
  40a246:	2301      	movs	r3, #1
  40a248:	684d      	ldr	r5, [r1, #4]
  40a24a:	4093      	lsls	r3, r2
  40a24c:	432b      	orrs	r3, r5
  40a24e:	604b      	str	r3, [r1, #4]
  40a250:	4603      	mov	r3, r0
  40a252:	e7b0      	b.n	40a1b6 <_free_r+0xbe>
  40a254:	f043 0201 	orr.w	r2, r3, #1
  40a258:	614c      	str	r4, [r1, #20]
  40a25a:	610c      	str	r4, [r1, #16]
  40a25c:	60e5      	str	r5, [r4, #12]
  40a25e:	60a5      	str	r5, [r4, #8]
  40a260:	6062      	str	r2, [r4, #4]
  40a262:	50e3      	str	r3, [r4, r3]
  40a264:	e78a      	b.n	40a17c <_free_r+0x84>
  40a266:	2a54      	cmp	r2, #84	; 0x54
  40a268:	d806      	bhi.n	40a278 <_free_r+0x180>
  40a26a:	0b1a      	lsrs	r2, r3, #12
  40a26c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a270:	00ff      	lsls	r7, r7, #3
  40a272:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a276:	e790      	b.n	40a19a <_free_r+0xa2>
  40a278:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a27c:	d806      	bhi.n	40a28c <_free_r+0x194>
  40a27e:	0bda      	lsrs	r2, r3, #15
  40a280:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a284:	00ff      	lsls	r7, r7, #3
  40a286:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a28a:	e786      	b.n	40a19a <_free_r+0xa2>
  40a28c:	f240 5054 	movw	r0, #1364	; 0x554
  40a290:	4282      	cmp	r2, r0
  40a292:	d806      	bhi.n	40a2a2 <_free_r+0x1aa>
  40a294:	0c9a      	lsrs	r2, r3, #18
  40a296:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a29a:	00ff      	lsls	r7, r7, #3
  40a29c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a2a0:	e77b      	b.n	40a19a <_free_r+0xa2>
  40a2a2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a2a6:	257e      	movs	r5, #126	; 0x7e
  40a2a8:	e777      	b.n	40a19a <_free_r+0xa2>
  40a2aa:	f043 0101 	orr.w	r1, r3, #1
  40a2ae:	6061      	str	r1, [r4, #4]
  40a2b0:	6013      	str	r3, [r2, #0]
  40a2b2:	e763      	b.n	40a17c <_free_r+0x84>
  40a2b4:	204005c0 	.word	0x204005c0
  40a2b8:	204005c8 	.word	0x204005c8
  40a2bc:	204009cc 	.word	0x204009cc
  40a2c0:	2040cf10 	.word	0x2040cf10

0040a2c4 <__sfvwrite_r>:
  40a2c4:	6893      	ldr	r3, [r2, #8]
  40a2c6:	2b00      	cmp	r3, #0
  40a2c8:	d073      	beq.n	40a3b2 <__sfvwrite_r+0xee>
  40a2ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a2ce:	898b      	ldrh	r3, [r1, #12]
  40a2d0:	b083      	sub	sp, #12
  40a2d2:	460c      	mov	r4, r1
  40a2d4:	0719      	lsls	r1, r3, #28
  40a2d6:	9000      	str	r0, [sp, #0]
  40a2d8:	4616      	mov	r6, r2
  40a2da:	d526      	bpl.n	40a32a <__sfvwrite_r+0x66>
  40a2dc:	6922      	ldr	r2, [r4, #16]
  40a2de:	b322      	cbz	r2, 40a32a <__sfvwrite_r+0x66>
  40a2e0:	f013 0002 	ands.w	r0, r3, #2
  40a2e4:	6835      	ldr	r5, [r6, #0]
  40a2e6:	d02c      	beq.n	40a342 <__sfvwrite_r+0x7e>
  40a2e8:	f04f 0900 	mov.w	r9, #0
  40a2ec:	4fb0      	ldr	r7, [pc, #704]	; (40a5b0 <__sfvwrite_r+0x2ec>)
  40a2ee:	46c8      	mov	r8, r9
  40a2f0:	46b2      	mov	sl, r6
  40a2f2:	45b8      	cmp	r8, r7
  40a2f4:	4643      	mov	r3, r8
  40a2f6:	464a      	mov	r2, r9
  40a2f8:	bf28      	it	cs
  40a2fa:	463b      	movcs	r3, r7
  40a2fc:	9800      	ldr	r0, [sp, #0]
  40a2fe:	f1b8 0f00 	cmp.w	r8, #0
  40a302:	d050      	beq.n	40a3a6 <__sfvwrite_r+0xe2>
  40a304:	69e1      	ldr	r1, [r4, #28]
  40a306:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a308:	47b0      	blx	r6
  40a30a:	2800      	cmp	r0, #0
  40a30c:	dd58      	ble.n	40a3c0 <__sfvwrite_r+0xfc>
  40a30e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a312:	1a1b      	subs	r3, r3, r0
  40a314:	4481      	add	r9, r0
  40a316:	eba8 0800 	sub.w	r8, r8, r0
  40a31a:	f8ca 3008 	str.w	r3, [sl, #8]
  40a31e:	2b00      	cmp	r3, #0
  40a320:	d1e7      	bne.n	40a2f2 <__sfvwrite_r+0x2e>
  40a322:	2000      	movs	r0, #0
  40a324:	b003      	add	sp, #12
  40a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a32a:	4621      	mov	r1, r4
  40a32c:	9800      	ldr	r0, [sp, #0]
  40a32e:	f7fe fc91 	bl	408c54 <__swsetup_r>
  40a332:	2800      	cmp	r0, #0
  40a334:	f040 8133 	bne.w	40a59e <__sfvwrite_r+0x2da>
  40a338:	89a3      	ldrh	r3, [r4, #12]
  40a33a:	6835      	ldr	r5, [r6, #0]
  40a33c:	f013 0002 	ands.w	r0, r3, #2
  40a340:	d1d2      	bne.n	40a2e8 <__sfvwrite_r+0x24>
  40a342:	f013 0901 	ands.w	r9, r3, #1
  40a346:	d145      	bne.n	40a3d4 <__sfvwrite_r+0x110>
  40a348:	464f      	mov	r7, r9
  40a34a:	9601      	str	r6, [sp, #4]
  40a34c:	b337      	cbz	r7, 40a39c <__sfvwrite_r+0xd8>
  40a34e:	059a      	lsls	r2, r3, #22
  40a350:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40a354:	f140 8083 	bpl.w	40a45e <__sfvwrite_r+0x19a>
  40a358:	4547      	cmp	r7, r8
  40a35a:	46c3      	mov	fp, r8
  40a35c:	f0c0 80ab 	bcc.w	40a4b6 <__sfvwrite_r+0x1f2>
  40a360:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a364:	f040 80ac 	bne.w	40a4c0 <__sfvwrite_r+0x1fc>
  40a368:	6820      	ldr	r0, [r4, #0]
  40a36a:	46ba      	mov	sl, r7
  40a36c:	465a      	mov	r2, fp
  40a36e:	4649      	mov	r1, r9
  40a370:	f000 fd36 	bl	40ade0 <memmove>
  40a374:	68a2      	ldr	r2, [r4, #8]
  40a376:	6823      	ldr	r3, [r4, #0]
  40a378:	eba2 0208 	sub.w	r2, r2, r8
  40a37c:	445b      	add	r3, fp
  40a37e:	60a2      	str	r2, [r4, #8]
  40a380:	6023      	str	r3, [r4, #0]
  40a382:	9a01      	ldr	r2, [sp, #4]
  40a384:	6893      	ldr	r3, [r2, #8]
  40a386:	eba3 030a 	sub.w	r3, r3, sl
  40a38a:	44d1      	add	r9, sl
  40a38c:	eba7 070a 	sub.w	r7, r7, sl
  40a390:	6093      	str	r3, [r2, #8]
  40a392:	2b00      	cmp	r3, #0
  40a394:	d0c5      	beq.n	40a322 <__sfvwrite_r+0x5e>
  40a396:	89a3      	ldrh	r3, [r4, #12]
  40a398:	2f00      	cmp	r7, #0
  40a39a:	d1d8      	bne.n	40a34e <__sfvwrite_r+0x8a>
  40a39c:	f8d5 9000 	ldr.w	r9, [r5]
  40a3a0:	686f      	ldr	r7, [r5, #4]
  40a3a2:	3508      	adds	r5, #8
  40a3a4:	e7d2      	b.n	40a34c <__sfvwrite_r+0x88>
  40a3a6:	f8d5 9000 	ldr.w	r9, [r5]
  40a3aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40a3ae:	3508      	adds	r5, #8
  40a3b0:	e79f      	b.n	40a2f2 <__sfvwrite_r+0x2e>
  40a3b2:	2000      	movs	r0, #0
  40a3b4:	4770      	bx	lr
  40a3b6:	4621      	mov	r1, r4
  40a3b8:	9800      	ldr	r0, [sp, #0]
  40a3ba:	f7ff fd1f 	bl	409dfc <_fflush_r>
  40a3be:	b370      	cbz	r0, 40a41e <__sfvwrite_r+0x15a>
  40a3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a3c8:	f04f 30ff 	mov.w	r0, #4294967295
  40a3cc:	81a3      	strh	r3, [r4, #12]
  40a3ce:	b003      	add	sp, #12
  40a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3d4:	4681      	mov	r9, r0
  40a3d6:	4633      	mov	r3, r6
  40a3d8:	464e      	mov	r6, r9
  40a3da:	46a8      	mov	r8, r5
  40a3dc:	469a      	mov	sl, r3
  40a3de:	464d      	mov	r5, r9
  40a3e0:	b34e      	cbz	r6, 40a436 <__sfvwrite_r+0x172>
  40a3e2:	b380      	cbz	r0, 40a446 <__sfvwrite_r+0x182>
  40a3e4:	6820      	ldr	r0, [r4, #0]
  40a3e6:	6923      	ldr	r3, [r4, #16]
  40a3e8:	6962      	ldr	r2, [r4, #20]
  40a3ea:	45b1      	cmp	r9, r6
  40a3ec:	46cb      	mov	fp, r9
  40a3ee:	bf28      	it	cs
  40a3f0:	46b3      	movcs	fp, r6
  40a3f2:	4298      	cmp	r0, r3
  40a3f4:	465f      	mov	r7, fp
  40a3f6:	d904      	bls.n	40a402 <__sfvwrite_r+0x13e>
  40a3f8:	68a3      	ldr	r3, [r4, #8]
  40a3fa:	4413      	add	r3, r2
  40a3fc:	459b      	cmp	fp, r3
  40a3fe:	f300 80a6 	bgt.w	40a54e <__sfvwrite_r+0x28a>
  40a402:	4593      	cmp	fp, r2
  40a404:	db4b      	blt.n	40a49e <__sfvwrite_r+0x1da>
  40a406:	4613      	mov	r3, r2
  40a408:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a40a:	69e1      	ldr	r1, [r4, #28]
  40a40c:	9800      	ldr	r0, [sp, #0]
  40a40e:	462a      	mov	r2, r5
  40a410:	47b8      	blx	r7
  40a412:	1e07      	subs	r7, r0, #0
  40a414:	ddd4      	ble.n	40a3c0 <__sfvwrite_r+0xfc>
  40a416:	ebb9 0907 	subs.w	r9, r9, r7
  40a41a:	d0cc      	beq.n	40a3b6 <__sfvwrite_r+0xf2>
  40a41c:	2001      	movs	r0, #1
  40a41e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a422:	1bdb      	subs	r3, r3, r7
  40a424:	443d      	add	r5, r7
  40a426:	1bf6      	subs	r6, r6, r7
  40a428:	f8ca 3008 	str.w	r3, [sl, #8]
  40a42c:	2b00      	cmp	r3, #0
  40a42e:	f43f af78 	beq.w	40a322 <__sfvwrite_r+0x5e>
  40a432:	2e00      	cmp	r6, #0
  40a434:	d1d5      	bne.n	40a3e2 <__sfvwrite_r+0x11e>
  40a436:	f108 0308 	add.w	r3, r8, #8
  40a43a:	e913 0060 	ldmdb	r3, {r5, r6}
  40a43e:	4698      	mov	r8, r3
  40a440:	3308      	adds	r3, #8
  40a442:	2e00      	cmp	r6, #0
  40a444:	d0f9      	beq.n	40a43a <__sfvwrite_r+0x176>
  40a446:	4632      	mov	r2, r6
  40a448:	210a      	movs	r1, #10
  40a44a:	4628      	mov	r0, r5
  40a44c:	f000 fc48 	bl	40ace0 <memchr>
  40a450:	2800      	cmp	r0, #0
  40a452:	f000 80a1 	beq.w	40a598 <__sfvwrite_r+0x2d4>
  40a456:	3001      	adds	r0, #1
  40a458:	eba0 0905 	sub.w	r9, r0, r5
  40a45c:	e7c2      	b.n	40a3e4 <__sfvwrite_r+0x120>
  40a45e:	6820      	ldr	r0, [r4, #0]
  40a460:	6923      	ldr	r3, [r4, #16]
  40a462:	4298      	cmp	r0, r3
  40a464:	d802      	bhi.n	40a46c <__sfvwrite_r+0x1a8>
  40a466:	6963      	ldr	r3, [r4, #20]
  40a468:	429f      	cmp	r7, r3
  40a46a:	d25d      	bcs.n	40a528 <__sfvwrite_r+0x264>
  40a46c:	45b8      	cmp	r8, r7
  40a46e:	bf28      	it	cs
  40a470:	46b8      	movcs	r8, r7
  40a472:	4642      	mov	r2, r8
  40a474:	4649      	mov	r1, r9
  40a476:	f000 fcb3 	bl	40ade0 <memmove>
  40a47a:	68a3      	ldr	r3, [r4, #8]
  40a47c:	6822      	ldr	r2, [r4, #0]
  40a47e:	eba3 0308 	sub.w	r3, r3, r8
  40a482:	4442      	add	r2, r8
  40a484:	60a3      	str	r3, [r4, #8]
  40a486:	6022      	str	r2, [r4, #0]
  40a488:	b10b      	cbz	r3, 40a48e <__sfvwrite_r+0x1ca>
  40a48a:	46c2      	mov	sl, r8
  40a48c:	e779      	b.n	40a382 <__sfvwrite_r+0xbe>
  40a48e:	4621      	mov	r1, r4
  40a490:	9800      	ldr	r0, [sp, #0]
  40a492:	f7ff fcb3 	bl	409dfc <_fflush_r>
  40a496:	2800      	cmp	r0, #0
  40a498:	d192      	bne.n	40a3c0 <__sfvwrite_r+0xfc>
  40a49a:	46c2      	mov	sl, r8
  40a49c:	e771      	b.n	40a382 <__sfvwrite_r+0xbe>
  40a49e:	465a      	mov	r2, fp
  40a4a0:	4629      	mov	r1, r5
  40a4a2:	f000 fc9d 	bl	40ade0 <memmove>
  40a4a6:	68a2      	ldr	r2, [r4, #8]
  40a4a8:	6823      	ldr	r3, [r4, #0]
  40a4aa:	eba2 020b 	sub.w	r2, r2, fp
  40a4ae:	445b      	add	r3, fp
  40a4b0:	60a2      	str	r2, [r4, #8]
  40a4b2:	6023      	str	r3, [r4, #0]
  40a4b4:	e7af      	b.n	40a416 <__sfvwrite_r+0x152>
  40a4b6:	6820      	ldr	r0, [r4, #0]
  40a4b8:	46b8      	mov	r8, r7
  40a4ba:	46ba      	mov	sl, r7
  40a4bc:	46bb      	mov	fp, r7
  40a4be:	e755      	b.n	40a36c <__sfvwrite_r+0xa8>
  40a4c0:	6962      	ldr	r2, [r4, #20]
  40a4c2:	6820      	ldr	r0, [r4, #0]
  40a4c4:	6921      	ldr	r1, [r4, #16]
  40a4c6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40a4ca:	eba0 0a01 	sub.w	sl, r0, r1
  40a4ce:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40a4d2:	f10a 0001 	add.w	r0, sl, #1
  40a4d6:	ea4f 0868 	mov.w	r8, r8, asr #1
  40a4da:	4438      	add	r0, r7
  40a4dc:	4540      	cmp	r0, r8
  40a4de:	4642      	mov	r2, r8
  40a4e0:	bf84      	itt	hi
  40a4e2:	4680      	movhi	r8, r0
  40a4e4:	4642      	movhi	r2, r8
  40a4e6:	055b      	lsls	r3, r3, #21
  40a4e8:	d544      	bpl.n	40a574 <__sfvwrite_r+0x2b0>
  40a4ea:	4611      	mov	r1, r2
  40a4ec:	9800      	ldr	r0, [sp, #0]
  40a4ee:	f000 f92f 	bl	40a750 <_malloc_r>
  40a4f2:	4683      	mov	fp, r0
  40a4f4:	2800      	cmp	r0, #0
  40a4f6:	d055      	beq.n	40a5a4 <__sfvwrite_r+0x2e0>
  40a4f8:	4652      	mov	r2, sl
  40a4fa:	6921      	ldr	r1, [r4, #16]
  40a4fc:	f7fb fdf0 	bl	4060e0 <memcpy>
  40a500:	89a3      	ldrh	r3, [r4, #12]
  40a502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40a506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a50a:	81a3      	strh	r3, [r4, #12]
  40a50c:	eb0b 000a 	add.w	r0, fp, sl
  40a510:	eba8 030a 	sub.w	r3, r8, sl
  40a514:	f8c4 b010 	str.w	fp, [r4, #16]
  40a518:	f8c4 8014 	str.w	r8, [r4, #20]
  40a51c:	6020      	str	r0, [r4, #0]
  40a51e:	60a3      	str	r3, [r4, #8]
  40a520:	46b8      	mov	r8, r7
  40a522:	46ba      	mov	sl, r7
  40a524:	46bb      	mov	fp, r7
  40a526:	e721      	b.n	40a36c <__sfvwrite_r+0xa8>
  40a528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a52c:	42b9      	cmp	r1, r7
  40a52e:	bf28      	it	cs
  40a530:	4639      	movcs	r1, r7
  40a532:	464a      	mov	r2, r9
  40a534:	fb91 f1f3 	sdiv	r1, r1, r3
  40a538:	9800      	ldr	r0, [sp, #0]
  40a53a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a53c:	fb03 f301 	mul.w	r3, r3, r1
  40a540:	69e1      	ldr	r1, [r4, #28]
  40a542:	47b0      	blx	r6
  40a544:	f1b0 0a00 	subs.w	sl, r0, #0
  40a548:	f73f af1b 	bgt.w	40a382 <__sfvwrite_r+0xbe>
  40a54c:	e738      	b.n	40a3c0 <__sfvwrite_r+0xfc>
  40a54e:	461a      	mov	r2, r3
  40a550:	4629      	mov	r1, r5
  40a552:	9301      	str	r3, [sp, #4]
  40a554:	f000 fc44 	bl	40ade0 <memmove>
  40a558:	6822      	ldr	r2, [r4, #0]
  40a55a:	9b01      	ldr	r3, [sp, #4]
  40a55c:	9800      	ldr	r0, [sp, #0]
  40a55e:	441a      	add	r2, r3
  40a560:	6022      	str	r2, [r4, #0]
  40a562:	4621      	mov	r1, r4
  40a564:	f7ff fc4a 	bl	409dfc <_fflush_r>
  40a568:	9b01      	ldr	r3, [sp, #4]
  40a56a:	2800      	cmp	r0, #0
  40a56c:	f47f af28 	bne.w	40a3c0 <__sfvwrite_r+0xfc>
  40a570:	461f      	mov	r7, r3
  40a572:	e750      	b.n	40a416 <__sfvwrite_r+0x152>
  40a574:	9800      	ldr	r0, [sp, #0]
  40a576:	f000 ff9d 	bl	40b4b4 <_realloc_r>
  40a57a:	4683      	mov	fp, r0
  40a57c:	2800      	cmp	r0, #0
  40a57e:	d1c5      	bne.n	40a50c <__sfvwrite_r+0x248>
  40a580:	9d00      	ldr	r5, [sp, #0]
  40a582:	6921      	ldr	r1, [r4, #16]
  40a584:	4628      	mov	r0, r5
  40a586:	f7ff fdb7 	bl	40a0f8 <_free_r>
  40a58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a58e:	220c      	movs	r2, #12
  40a590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a594:	602a      	str	r2, [r5, #0]
  40a596:	e715      	b.n	40a3c4 <__sfvwrite_r+0x100>
  40a598:	f106 0901 	add.w	r9, r6, #1
  40a59c:	e722      	b.n	40a3e4 <__sfvwrite_r+0x120>
  40a59e:	f04f 30ff 	mov.w	r0, #4294967295
  40a5a2:	e6bf      	b.n	40a324 <__sfvwrite_r+0x60>
  40a5a4:	9a00      	ldr	r2, [sp, #0]
  40a5a6:	230c      	movs	r3, #12
  40a5a8:	6013      	str	r3, [r2, #0]
  40a5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a5ae:	e709      	b.n	40a3c4 <__sfvwrite_r+0x100>
  40a5b0:	7ffffc00 	.word	0x7ffffc00

0040a5b4 <_fwalk_reent>:
  40a5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a5b8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a5bc:	d01f      	beq.n	40a5fe <_fwalk_reent+0x4a>
  40a5be:	4688      	mov	r8, r1
  40a5c0:	4606      	mov	r6, r0
  40a5c2:	f04f 0900 	mov.w	r9, #0
  40a5c6:	687d      	ldr	r5, [r7, #4]
  40a5c8:	68bc      	ldr	r4, [r7, #8]
  40a5ca:	3d01      	subs	r5, #1
  40a5cc:	d411      	bmi.n	40a5f2 <_fwalk_reent+0x3e>
  40a5ce:	89a3      	ldrh	r3, [r4, #12]
  40a5d0:	2b01      	cmp	r3, #1
  40a5d2:	f105 35ff 	add.w	r5, r5, #4294967295
  40a5d6:	d908      	bls.n	40a5ea <_fwalk_reent+0x36>
  40a5d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a5dc:	3301      	adds	r3, #1
  40a5de:	4621      	mov	r1, r4
  40a5e0:	4630      	mov	r0, r6
  40a5e2:	d002      	beq.n	40a5ea <_fwalk_reent+0x36>
  40a5e4:	47c0      	blx	r8
  40a5e6:	ea49 0900 	orr.w	r9, r9, r0
  40a5ea:	1c6b      	adds	r3, r5, #1
  40a5ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a5f0:	d1ed      	bne.n	40a5ce <_fwalk_reent+0x1a>
  40a5f2:	683f      	ldr	r7, [r7, #0]
  40a5f4:	2f00      	cmp	r7, #0
  40a5f6:	d1e6      	bne.n	40a5c6 <_fwalk_reent+0x12>
  40a5f8:	4648      	mov	r0, r9
  40a5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a5fe:	46b9      	mov	r9, r7
  40a600:	4648      	mov	r0, r9
  40a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a606:	bf00      	nop

0040a608 <__locale_mb_cur_max>:
  40a608:	4b04      	ldr	r3, [pc, #16]	; (40a61c <__locale_mb_cur_max+0x14>)
  40a60a:	4a05      	ldr	r2, [pc, #20]	; (40a620 <__locale_mb_cur_max+0x18>)
  40a60c:	681b      	ldr	r3, [r3, #0]
  40a60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a610:	2b00      	cmp	r3, #0
  40a612:	bf08      	it	eq
  40a614:	4613      	moveq	r3, r2
  40a616:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a61a:	4770      	bx	lr
  40a61c:	20400024 	.word	0x20400024
  40a620:	20400454 	.word	0x20400454

0040a624 <_localeconv_r>:
  40a624:	4a04      	ldr	r2, [pc, #16]	; (40a638 <_localeconv_r+0x14>)
  40a626:	4b05      	ldr	r3, [pc, #20]	; (40a63c <_localeconv_r+0x18>)
  40a628:	6812      	ldr	r2, [r2, #0]
  40a62a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40a62c:	2800      	cmp	r0, #0
  40a62e:	bf08      	it	eq
  40a630:	4618      	moveq	r0, r3
  40a632:	30f0      	adds	r0, #240	; 0xf0
  40a634:	4770      	bx	lr
  40a636:	bf00      	nop
  40a638:	20400024 	.word	0x20400024
  40a63c:	20400454 	.word	0x20400454

0040a640 <__retarget_lock_init_recursive>:
  40a640:	4770      	bx	lr
  40a642:	bf00      	nop

0040a644 <__retarget_lock_close_recursive>:
  40a644:	4770      	bx	lr
  40a646:	bf00      	nop

0040a648 <__retarget_lock_acquire_recursive>:
  40a648:	4770      	bx	lr
  40a64a:	bf00      	nop

0040a64c <__retarget_lock_release_recursive>:
  40a64c:	4770      	bx	lr
  40a64e:	bf00      	nop

0040a650 <__swhatbuf_r>:
  40a650:	b570      	push	{r4, r5, r6, lr}
  40a652:	460c      	mov	r4, r1
  40a654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a658:	2900      	cmp	r1, #0
  40a65a:	b090      	sub	sp, #64	; 0x40
  40a65c:	4615      	mov	r5, r2
  40a65e:	461e      	mov	r6, r3
  40a660:	db14      	blt.n	40a68c <__swhatbuf_r+0x3c>
  40a662:	aa01      	add	r2, sp, #4
  40a664:	f001 fbc0 	bl	40bde8 <_fstat_r>
  40a668:	2800      	cmp	r0, #0
  40a66a:	db0f      	blt.n	40a68c <__swhatbuf_r+0x3c>
  40a66c:	9a02      	ldr	r2, [sp, #8]
  40a66e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a672:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40a676:	fab2 f282 	clz	r2, r2
  40a67a:	0952      	lsrs	r2, r2, #5
  40a67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a680:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40a684:	6032      	str	r2, [r6, #0]
  40a686:	602b      	str	r3, [r5, #0]
  40a688:	b010      	add	sp, #64	; 0x40
  40a68a:	bd70      	pop	{r4, r5, r6, pc}
  40a68c:	89a2      	ldrh	r2, [r4, #12]
  40a68e:	2300      	movs	r3, #0
  40a690:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40a694:	6033      	str	r3, [r6, #0]
  40a696:	d004      	beq.n	40a6a2 <__swhatbuf_r+0x52>
  40a698:	2240      	movs	r2, #64	; 0x40
  40a69a:	4618      	mov	r0, r3
  40a69c:	602a      	str	r2, [r5, #0]
  40a69e:	b010      	add	sp, #64	; 0x40
  40a6a0:	bd70      	pop	{r4, r5, r6, pc}
  40a6a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a6a6:	602b      	str	r3, [r5, #0]
  40a6a8:	b010      	add	sp, #64	; 0x40
  40a6aa:	bd70      	pop	{r4, r5, r6, pc}

0040a6ac <__smakebuf_r>:
  40a6ac:	898a      	ldrh	r2, [r1, #12]
  40a6ae:	0792      	lsls	r2, r2, #30
  40a6b0:	460b      	mov	r3, r1
  40a6b2:	d506      	bpl.n	40a6c2 <__smakebuf_r+0x16>
  40a6b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40a6b8:	2101      	movs	r1, #1
  40a6ba:	601a      	str	r2, [r3, #0]
  40a6bc:	611a      	str	r2, [r3, #16]
  40a6be:	6159      	str	r1, [r3, #20]
  40a6c0:	4770      	bx	lr
  40a6c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a6c4:	b083      	sub	sp, #12
  40a6c6:	ab01      	add	r3, sp, #4
  40a6c8:	466a      	mov	r2, sp
  40a6ca:	460c      	mov	r4, r1
  40a6cc:	4606      	mov	r6, r0
  40a6ce:	f7ff ffbf 	bl	40a650 <__swhatbuf_r>
  40a6d2:	9900      	ldr	r1, [sp, #0]
  40a6d4:	4605      	mov	r5, r0
  40a6d6:	4630      	mov	r0, r6
  40a6d8:	f000 f83a 	bl	40a750 <_malloc_r>
  40a6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6e0:	b1d8      	cbz	r0, 40a71a <__smakebuf_r+0x6e>
  40a6e2:	9a01      	ldr	r2, [sp, #4]
  40a6e4:	4f15      	ldr	r7, [pc, #84]	; (40a73c <__smakebuf_r+0x90>)
  40a6e6:	9900      	ldr	r1, [sp, #0]
  40a6e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  40a6ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a6ee:	81a3      	strh	r3, [r4, #12]
  40a6f0:	6020      	str	r0, [r4, #0]
  40a6f2:	6120      	str	r0, [r4, #16]
  40a6f4:	6161      	str	r1, [r4, #20]
  40a6f6:	b91a      	cbnz	r2, 40a700 <__smakebuf_r+0x54>
  40a6f8:	432b      	orrs	r3, r5
  40a6fa:	81a3      	strh	r3, [r4, #12]
  40a6fc:	b003      	add	sp, #12
  40a6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a700:	4630      	mov	r0, r6
  40a702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a706:	f001 fb83 	bl	40be10 <_isatty_r>
  40a70a:	b1a0      	cbz	r0, 40a736 <__smakebuf_r+0x8a>
  40a70c:	89a3      	ldrh	r3, [r4, #12]
  40a70e:	f023 0303 	bic.w	r3, r3, #3
  40a712:	f043 0301 	orr.w	r3, r3, #1
  40a716:	b21b      	sxth	r3, r3
  40a718:	e7ee      	b.n	40a6f8 <__smakebuf_r+0x4c>
  40a71a:	059a      	lsls	r2, r3, #22
  40a71c:	d4ee      	bmi.n	40a6fc <__smakebuf_r+0x50>
  40a71e:	f023 0303 	bic.w	r3, r3, #3
  40a722:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a726:	f043 0302 	orr.w	r3, r3, #2
  40a72a:	2101      	movs	r1, #1
  40a72c:	81a3      	strh	r3, [r4, #12]
  40a72e:	6022      	str	r2, [r4, #0]
  40a730:	6122      	str	r2, [r4, #16]
  40a732:	6161      	str	r1, [r4, #20]
  40a734:	e7e2      	b.n	40a6fc <__smakebuf_r+0x50>
  40a736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a73a:	e7dd      	b.n	40a6f8 <__smakebuf_r+0x4c>
  40a73c:	00409e51 	.word	0x00409e51

0040a740 <malloc>:
  40a740:	4b02      	ldr	r3, [pc, #8]	; (40a74c <malloc+0xc>)
  40a742:	4601      	mov	r1, r0
  40a744:	6818      	ldr	r0, [r3, #0]
  40a746:	f000 b803 	b.w	40a750 <_malloc_r>
  40a74a:	bf00      	nop
  40a74c:	20400024 	.word	0x20400024

0040a750 <_malloc_r>:
  40a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a754:	f101 060b 	add.w	r6, r1, #11
  40a758:	2e16      	cmp	r6, #22
  40a75a:	b083      	sub	sp, #12
  40a75c:	4605      	mov	r5, r0
  40a75e:	f240 809e 	bls.w	40a89e <_malloc_r+0x14e>
  40a762:	f036 0607 	bics.w	r6, r6, #7
  40a766:	f100 80bd 	bmi.w	40a8e4 <_malloc_r+0x194>
  40a76a:	42b1      	cmp	r1, r6
  40a76c:	f200 80ba 	bhi.w	40a8e4 <_malloc_r+0x194>
  40a770:	f000 fb9a 	bl	40aea8 <__malloc_lock>
  40a774:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40a778:	f0c0 8293 	bcc.w	40aca2 <_malloc_r+0x552>
  40a77c:	0a73      	lsrs	r3, r6, #9
  40a77e:	f000 80b8 	beq.w	40a8f2 <_malloc_r+0x1a2>
  40a782:	2b04      	cmp	r3, #4
  40a784:	f200 8179 	bhi.w	40aa7a <_malloc_r+0x32a>
  40a788:	09b3      	lsrs	r3, r6, #6
  40a78a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40a78e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40a792:	00c3      	lsls	r3, r0, #3
  40a794:	4fbf      	ldr	r7, [pc, #764]	; (40aa94 <_malloc_r+0x344>)
  40a796:	443b      	add	r3, r7
  40a798:	f1a3 0108 	sub.w	r1, r3, #8
  40a79c:	685c      	ldr	r4, [r3, #4]
  40a79e:	42a1      	cmp	r1, r4
  40a7a0:	d106      	bne.n	40a7b0 <_malloc_r+0x60>
  40a7a2:	e00c      	b.n	40a7be <_malloc_r+0x6e>
  40a7a4:	2a00      	cmp	r2, #0
  40a7a6:	f280 80aa 	bge.w	40a8fe <_malloc_r+0x1ae>
  40a7aa:	68e4      	ldr	r4, [r4, #12]
  40a7ac:	42a1      	cmp	r1, r4
  40a7ae:	d006      	beq.n	40a7be <_malloc_r+0x6e>
  40a7b0:	6863      	ldr	r3, [r4, #4]
  40a7b2:	f023 0303 	bic.w	r3, r3, #3
  40a7b6:	1b9a      	subs	r2, r3, r6
  40a7b8:	2a0f      	cmp	r2, #15
  40a7ba:	ddf3      	ble.n	40a7a4 <_malloc_r+0x54>
  40a7bc:	4670      	mov	r0, lr
  40a7be:	693c      	ldr	r4, [r7, #16]
  40a7c0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40aaa8 <_malloc_r+0x358>
  40a7c4:	4574      	cmp	r4, lr
  40a7c6:	f000 81ab 	beq.w	40ab20 <_malloc_r+0x3d0>
  40a7ca:	6863      	ldr	r3, [r4, #4]
  40a7cc:	f023 0303 	bic.w	r3, r3, #3
  40a7d0:	1b9a      	subs	r2, r3, r6
  40a7d2:	2a0f      	cmp	r2, #15
  40a7d4:	f300 8190 	bgt.w	40aaf8 <_malloc_r+0x3a8>
  40a7d8:	2a00      	cmp	r2, #0
  40a7da:	f8c7 e014 	str.w	lr, [r7, #20]
  40a7de:	f8c7 e010 	str.w	lr, [r7, #16]
  40a7e2:	f280 809d 	bge.w	40a920 <_malloc_r+0x1d0>
  40a7e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a7ea:	f080 8161 	bcs.w	40aab0 <_malloc_r+0x360>
  40a7ee:	08db      	lsrs	r3, r3, #3
  40a7f0:	f103 0c01 	add.w	ip, r3, #1
  40a7f4:	1099      	asrs	r1, r3, #2
  40a7f6:	687a      	ldr	r2, [r7, #4]
  40a7f8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40a7fc:	f8c4 8008 	str.w	r8, [r4, #8]
  40a800:	2301      	movs	r3, #1
  40a802:	408b      	lsls	r3, r1
  40a804:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40a808:	4313      	orrs	r3, r2
  40a80a:	3908      	subs	r1, #8
  40a80c:	60e1      	str	r1, [r4, #12]
  40a80e:	607b      	str	r3, [r7, #4]
  40a810:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40a814:	f8c8 400c 	str.w	r4, [r8, #12]
  40a818:	1082      	asrs	r2, r0, #2
  40a81a:	2401      	movs	r4, #1
  40a81c:	4094      	lsls	r4, r2
  40a81e:	429c      	cmp	r4, r3
  40a820:	f200 808b 	bhi.w	40a93a <_malloc_r+0x1ea>
  40a824:	421c      	tst	r4, r3
  40a826:	d106      	bne.n	40a836 <_malloc_r+0xe6>
  40a828:	f020 0003 	bic.w	r0, r0, #3
  40a82c:	0064      	lsls	r4, r4, #1
  40a82e:	421c      	tst	r4, r3
  40a830:	f100 0004 	add.w	r0, r0, #4
  40a834:	d0fa      	beq.n	40a82c <_malloc_r+0xdc>
  40a836:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40a83a:	46cc      	mov	ip, r9
  40a83c:	4680      	mov	r8, r0
  40a83e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40a842:	459c      	cmp	ip, r3
  40a844:	d107      	bne.n	40a856 <_malloc_r+0x106>
  40a846:	e16d      	b.n	40ab24 <_malloc_r+0x3d4>
  40a848:	2a00      	cmp	r2, #0
  40a84a:	f280 817b 	bge.w	40ab44 <_malloc_r+0x3f4>
  40a84e:	68db      	ldr	r3, [r3, #12]
  40a850:	459c      	cmp	ip, r3
  40a852:	f000 8167 	beq.w	40ab24 <_malloc_r+0x3d4>
  40a856:	6859      	ldr	r1, [r3, #4]
  40a858:	f021 0103 	bic.w	r1, r1, #3
  40a85c:	1b8a      	subs	r2, r1, r6
  40a85e:	2a0f      	cmp	r2, #15
  40a860:	ddf2      	ble.n	40a848 <_malloc_r+0xf8>
  40a862:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40a866:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40a86a:	9300      	str	r3, [sp, #0]
  40a86c:	199c      	adds	r4, r3, r6
  40a86e:	4628      	mov	r0, r5
  40a870:	f046 0601 	orr.w	r6, r6, #1
  40a874:	f042 0501 	orr.w	r5, r2, #1
  40a878:	605e      	str	r6, [r3, #4]
  40a87a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40a87e:	f8cc 8008 	str.w	r8, [ip, #8]
  40a882:	617c      	str	r4, [r7, #20]
  40a884:	613c      	str	r4, [r7, #16]
  40a886:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a88a:	f8c4 e008 	str.w	lr, [r4, #8]
  40a88e:	6065      	str	r5, [r4, #4]
  40a890:	505a      	str	r2, [r3, r1]
  40a892:	f000 fb0f 	bl	40aeb4 <__malloc_unlock>
  40a896:	9b00      	ldr	r3, [sp, #0]
  40a898:	f103 0408 	add.w	r4, r3, #8
  40a89c:	e01e      	b.n	40a8dc <_malloc_r+0x18c>
  40a89e:	2910      	cmp	r1, #16
  40a8a0:	d820      	bhi.n	40a8e4 <_malloc_r+0x194>
  40a8a2:	f000 fb01 	bl	40aea8 <__malloc_lock>
  40a8a6:	2610      	movs	r6, #16
  40a8a8:	2318      	movs	r3, #24
  40a8aa:	2002      	movs	r0, #2
  40a8ac:	4f79      	ldr	r7, [pc, #484]	; (40aa94 <_malloc_r+0x344>)
  40a8ae:	443b      	add	r3, r7
  40a8b0:	f1a3 0208 	sub.w	r2, r3, #8
  40a8b4:	685c      	ldr	r4, [r3, #4]
  40a8b6:	4294      	cmp	r4, r2
  40a8b8:	f000 813d 	beq.w	40ab36 <_malloc_r+0x3e6>
  40a8bc:	6863      	ldr	r3, [r4, #4]
  40a8be:	68e1      	ldr	r1, [r4, #12]
  40a8c0:	68a6      	ldr	r6, [r4, #8]
  40a8c2:	f023 0303 	bic.w	r3, r3, #3
  40a8c6:	4423      	add	r3, r4
  40a8c8:	4628      	mov	r0, r5
  40a8ca:	685a      	ldr	r2, [r3, #4]
  40a8cc:	60f1      	str	r1, [r6, #12]
  40a8ce:	f042 0201 	orr.w	r2, r2, #1
  40a8d2:	608e      	str	r6, [r1, #8]
  40a8d4:	605a      	str	r2, [r3, #4]
  40a8d6:	f000 faed 	bl	40aeb4 <__malloc_unlock>
  40a8da:	3408      	adds	r4, #8
  40a8dc:	4620      	mov	r0, r4
  40a8de:	b003      	add	sp, #12
  40a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a8e4:	2400      	movs	r4, #0
  40a8e6:	230c      	movs	r3, #12
  40a8e8:	4620      	mov	r0, r4
  40a8ea:	602b      	str	r3, [r5, #0]
  40a8ec:	b003      	add	sp, #12
  40a8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a8f2:	2040      	movs	r0, #64	; 0x40
  40a8f4:	f44f 7300 	mov.w	r3, #512	; 0x200
  40a8f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40a8fc:	e74a      	b.n	40a794 <_malloc_r+0x44>
  40a8fe:	4423      	add	r3, r4
  40a900:	68e1      	ldr	r1, [r4, #12]
  40a902:	685a      	ldr	r2, [r3, #4]
  40a904:	68a6      	ldr	r6, [r4, #8]
  40a906:	f042 0201 	orr.w	r2, r2, #1
  40a90a:	60f1      	str	r1, [r6, #12]
  40a90c:	4628      	mov	r0, r5
  40a90e:	608e      	str	r6, [r1, #8]
  40a910:	605a      	str	r2, [r3, #4]
  40a912:	f000 facf 	bl	40aeb4 <__malloc_unlock>
  40a916:	3408      	adds	r4, #8
  40a918:	4620      	mov	r0, r4
  40a91a:	b003      	add	sp, #12
  40a91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a920:	4423      	add	r3, r4
  40a922:	4628      	mov	r0, r5
  40a924:	685a      	ldr	r2, [r3, #4]
  40a926:	f042 0201 	orr.w	r2, r2, #1
  40a92a:	605a      	str	r2, [r3, #4]
  40a92c:	f000 fac2 	bl	40aeb4 <__malloc_unlock>
  40a930:	3408      	adds	r4, #8
  40a932:	4620      	mov	r0, r4
  40a934:	b003      	add	sp, #12
  40a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a93a:	68bc      	ldr	r4, [r7, #8]
  40a93c:	6863      	ldr	r3, [r4, #4]
  40a93e:	f023 0803 	bic.w	r8, r3, #3
  40a942:	45b0      	cmp	r8, r6
  40a944:	d304      	bcc.n	40a950 <_malloc_r+0x200>
  40a946:	eba8 0306 	sub.w	r3, r8, r6
  40a94a:	2b0f      	cmp	r3, #15
  40a94c:	f300 8085 	bgt.w	40aa5a <_malloc_r+0x30a>
  40a950:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40aaac <_malloc_r+0x35c>
  40a954:	4b50      	ldr	r3, [pc, #320]	; (40aa98 <_malloc_r+0x348>)
  40a956:	f8d9 2000 	ldr.w	r2, [r9]
  40a95a:	681b      	ldr	r3, [r3, #0]
  40a95c:	3201      	adds	r2, #1
  40a95e:	4433      	add	r3, r6
  40a960:	eb04 0a08 	add.w	sl, r4, r8
  40a964:	f000 8155 	beq.w	40ac12 <_malloc_r+0x4c2>
  40a968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40a96c:	330f      	adds	r3, #15
  40a96e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40a972:	f02b 0b0f 	bic.w	fp, fp, #15
  40a976:	4659      	mov	r1, fp
  40a978:	4628      	mov	r0, r5
  40a97a:	f000 ff41 	bl	40b800 <_sbrk_r>
  40a97e:	1c41      	adds	r1, r0, #1
  40a980:	4602      	mov	r2, r0
  40a982:	f000 80fc 	beq.w	40ab7e <_malloc_r+0x42e>
  40a986:	4582      	cmp	sl, r0
  40a988:	f200 80f7 	bhi.w	40ab7a <_malloc_r+0x42a>
  40a98c:	4b43      	ldr	r3, [pc, #268]	; (40aa9c <_malloc_r+0x34c>)
  40a98e:	6819      	ldr	r1, [r3, #0]
  40a990:	4459      	add	r1, fp
  40a992:	6019      	str	r1, [r3, #0]
  40a994:	f000 814d 	beq.w	40ac32 <_malloc_r+0x4e2>
  40a998:	f8d9 0000 	ldr.w	r0, [r9]
  40a99c:	3001      	adds	r0, #1
  40a99e:	bf1b      	ittet	ne
  40a9a0:	eba2 0a0a 	subne.w	sl, r2, sl
  40a9a4:	4451      	addne	r1, sl
  40a9a6:	f8c9 2000 	streq.w	r2, [r9]
  40a9aa:	6019      	strne	r1, [r3, #0]
  40a9ac:	f012 0107 	ands.w	r1, r2, #7
  40a9b0:	f000 8115 	beq.w	40abde <_malloc_r+0x48e>
  40a9b4:	f1c1 0008 	rsb	r0, r1, #8
  40a9b8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40a9bc:	4402      	add	r2, r0
  40a9be:	3108      	adds	r1, #8
  40a9c0:	eb02 090b 	add.w	r9, r2, fp
  40a9c4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40a9c8:	eba1 0909 	sub.w	r9, r1, r9
  40a9cc:	4649      	mov	r1, r9
  40a9ce:	4628      	mov	r0, r5
  40a9d0:	9301      	str	r3, [sp, #4]
  40a9d2:	9200      	str	r2, [sp, #0]
  40a9d4:	f000 ff14 	bl	40b800 <_sbrk_r>
  40a9d8:	1c43      	adds	r3, r0, #1
  40a9da:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a9de:	f000 8143 	beq.w	40ac68 <_malloc_r+0x518>
  40a9e2:	1a80      	subs	r0, r0, r2
  40a9e4:	4448      	add	r0, r9
  40a9e6:	f040 0001 	orr.w	r0, r0, #1
  40a9ea:	6819      	ldr	r1, [r3, #0]
  40a9ec:	60ba      	str	r2, [r7, #8]
  40a9ee:	4449      	add	r1, r9
  40a9f0:	42bc      	cmp	r4, r7
  40a9f2:	6050      	str	r0, [r2, #4]
  40a9f4:	6019      	str	r1, [r3, #0]
  40a9f6:	d017      	beq.n	40aa28 <_malloc_r+0x2d8>
  40a9f8:	f1b8 0f0f 	cmp.w	r8, #15
  40a9fc:	f240 80fb 	bls.w	40abf6 <_malloc_r+0x4a6>
  40aa00:	6860      	ldr	r0, [r4, #4]
  40aa02:	f1a8 020c 	sub.w	r2, r8, #12
  40aa06:	f022 0207 	bic.w	r2, r2, #7
  40aa0a:	eb04 0e02 	add.w	lr, r4, r2
  40aa0e:	f000 0001 	and.w	r0, r0, #1
  40aa12:	f04f 0c05 	mov.w	ip, #5
  40aa16:	4310      	orrs	r0, r2
  40aa18:	2a0f      	cmp	r2, #15
  40aa1a:	6060      	str	r0, [r4, #4]
  40aa1c:	f8ce c004 	str.w	ip, [lr, #4]
  40aa20:	f8ce c008 	str.w	ip, [lr, #8]
  40aa24:	f200 8117 	bhi.w	40ac56 <_malloc_r+0x506>
  40aa28:	4b1d      	ldr	r3, [pc, #116]	; (40aaa0 <_malloc_r+0x350>)
  40aa2a:	68bc      	ldr	r4, [r7, #8]
  40aa2c:	681a      	ldr	r2, [r3, #0]
  40aa2e:	4291      	cmp	r1, r2
  40aa30:	bf88      	it	hi
  40aa32:	6019      	strhi	r1, [r3, #0]
  40aa34:	4b1b      	ldr	r3, [pc, #108]	; (40aaa4 <_malloc_r+0x354>)
  40aa36:	681a      	ldr	r2, [r3, #0]
  40aa38:	4291      	cmp	r1, r2
  40aa3a:	6862      	ldr	r2, [r4, #4]
  40aa3c:	bf88      	it	hi
  40aa3e:	6019      	strhi	r1, [r3, #0]
  40aa40:	f022 0203 	bic.w	r2, r2, #3
  40aa44:	4296      	cmp	r6, r2
  40aa46:	eba2 0306 	sub.w	r3, r2, r6
  40aa4a:	d801      	bhi.n	40aa50 <_malloc_r+0x300>
  40aa4c:	2b0f      	cmp	r3, #15
  40aa4e:	dc04      	bgt.n	40aa5a <_malloc_r+0x30a>
  40aa50:	4628      	mov	r0, r5
  40aa52:	f000 fa2f 	bl	40aeb4 <__malloc_unlock>
  40aa56:	2400      	movs	r4, #0
  40aa58:	e740      	b.n	40a8dc <_malloc_r+0x18c>
  40aa5a:	19a2      	adds	r2, r4, r6
  40aa5c:	f043 0301 	orr.w	r3, r3, #1
  40aa60:	f046 0601 	orr.w	r6, r6, #1
  40aa64:	6066      	str	r6, [r4, #4]
  40aa66:	4628      	mov	r0, r5
  40aa68:	60ba      	str	r2, [r7, #8]
  40aa6a:	6053      	str	r3, [r2, #4]
  40aa6c:	f000 fa22 	bl	40aeb4 <__malloc_unlock>
  40aa70:	3408      	adds	r4, #8
  40aa72:	4620      	mov	r0, r4
  40aa74:	b003      	add	sp, #12
  40aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa7a:	2b14      	cmp	r3, #20
  40aa7c:	d971      	bls.n	40ab62 <_malloc_r+0x412>
  40aa7e:	2b54      	cmp	r3, #84	; 0x54
  40aa80:	f200 80a3 	bhi.w	40abca <_malloc_r+0x47a>
  40aa84:	0b33      	lsrs	r3, r6, #12
  40aa86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40aa8a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40aa8e:	00c3      	lsls	r3, r0, #3
  40aa90:	e680      	b.n	40a794 <_malloc_r+0x44>
  40aa92:	bf00      	nop
  40aa94:	204005c0 	.word	0x204005c0
  40aa98:	2040cf10 	.word	0x2040cf10
  40aa9c:	2040cee0 	.word	0x2040cee0
  40aaa0:	2040cf08 	.word	0x2040cf08
  40aaa4:	2040cf0c 	.word	0x2040cf0c
  40aaa8:	204005c8 	.word	0x204005c8
  40aaac:	204009c8 	.word	0x204009c8
  40aab0:	0a5a      	lsrs	r2, r3, #9
  40aab2:	2a04      	cmp	r2, #4
  40aab4:	d95b      	bls.n	40ab6e <_malloc_r+0x41e>
  40aab6:	2a14      	cmp	r2, #20
  40aab8:	f200 80ae 	bhi.w	40ac18 <_malloc_r+0x4c8>
  40aabc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40aac0:	00c9      	lsls	r1, r1, #3
  40aac2:	325b      	adds	r2, #91	; 0x5b
  40aac4:	eb07 0c01 	add.w	ip, r7, r1
  40aac8:	5879      	ldr	r1, [r7, r1]
  40aaca:	f1ac 0c08 	sub.w	ip, ip, #8
  40aace:	458c      	cmp	ip, r1
  40aad0:	f000 8088 	beq.w	40abe4 <_malloc_r+0x494>
  40aad4:	684a      	ldr	r2, [r1, #4]
  40aad6:	f022 0203 	bic.w	r2, r2, #3
  40aada:	4293      	cmp	r3, r2
  40aadc:	d273      	bcs.n	40abc6 <_malloc_r+0x476>
  40aade:	6889      	ldr	r1, [r1, #8]
  40aae0:	458c      	cmp	ip, r1
  40aae2:	d1f7      	bne.n	40aad4 <_malloc_r+0x384>
  40aae4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40aae8:	687b      	ldr	r3, [r7, #4]
  40aaea:	60e2      	str	r2, [r4, #12]
  40aaec:	f8c4 c008 	str.w	ip, [r4, #8]
  40aaf0:	6094      	str	r4, [r2, #8]
  40aaf2:	f8cc 400c 	str.w	r4, [ip, #12]
  40aaf6:	e68f      	b.n	40a818 <_malloc_r+0xc8>
  40aaf8:	19a1      	adds	r1, r4, r6
  40aafa:	f046 0c01 	orr.w	ip, r6, #1
  40aafe:	f042 0601 	orr.w	r6, r2, #1
  40ab02:	f8c4 c004 	str.w	ip, [r4, #4]
  40ab06:	4628      	mov	r0, r5
  40ab08:	6179      	str	r1, [r7, #20]
  40ab0a:	6139      	str	r1, [r7, #16]
  40ab0c:	f8c1 e00c 	str.w	lr, [r1, #12]
  40ab10:	f8c1 e008 	str.w	lr, [r1, #8]
  40ab14:	604e      	str	r6, [r1, #4]
  40ab16:	50e2      	str	r2, [r4, r3]
  40ab18:	f000 f9cc 	bl	40aeb4 <__malloc_unlock>
  40ab1c:	3408      	adds	r4, #8
  40ab1e:	e6dd      	b.n	40a8dc <_malloc_r+0x18c>
  40ab20:	687b      	ldr	r3, [r7, #4]
  40ab22:	e679      	b.n	40a818 <_malloc_r+0xc8>
  40ab24:	f108 0801 	add.w	r8, r8, #1
  40ab28:	f018 0f03 	tst.w	r8, #3
  40ab2c:	f10c 0c08 	add.w	ip, ip, #8
  40ab30:	f47f ae85 	bne.w	40a83e <_malloc_r+0xee>
  40ab34:	e02d      	b.n	40ab92 <_malloc_r+0x442>
  40ab36:	68dc      	ldr	r4, [r3, #12]
  40ab38:	42a3      	cmp	r3, r4
  40ab3a:	bf08      	it	eq
  40ab3c:	3002      	addeq	r0, #2
  40ab3e:	f43f ae3e 	beq.w	40a7be <_malloc_r+0x6e>
  40ab42:	e6bb      	b.n	40a8bc <_malloc_r+0x16c>
  40ab44:	4419      	add	r1, r3
  40ab46:	461c      	mov	r4, r3
  40ab48:	684a      	ldr	r2, [r1, #4]
  40ab4a:	68db      	ldr	r3, [r3, #12]
  40ab4c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40ab50:	f042 0201 	orr.w	r2, r2, #1
  40ab54:	604a      	str	r2, [r1, #4]
  40ab56:	4628      	mov	r0, r5
  40ab58:	60f3      	str	r3, [r6, #12]
  40ab5a:	609e      	str	r6, [r3, #8]
  40ab5c:	f000 f9aa 	bl	40aeb4 <__malloc_unlock>
  40ab60:	e6bc      	b.n	40a8dc <_malloc_r+0x18c>
  40ab62:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40ab66:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40ab6a:	00c3      	lsls	r3, r0, #3
  40ab6c:	e612      	b.n	40a794 <_malloc_r+0x44>
  40ab6e:	099a      	lsrs	r2, r3, #6
  40ab70:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40ab74:	00c9      	lsls	r1, r1, #3
  40ab76:	3238      	adds	r2, #56	; 0x38
  40ab78:	e7a4      	b.n	40aac4 <_malloc_r+0x374>
  40ab7a:	42bc      	cmp	r4, r7
  40ab7c:	d054      	beq.n	40ac28 <_malloc_r+0x4d8>
  40ab7e:	68bc      	ldr	r4, [r7, #8]
  40ab80:	6862      	ldr	r2, [r4, #4]
  40ab82:	f022 0203 	bic.w	r2, r2, #3
  40ab86:	e75d      	b.n	40aa44 <_malloc_r+0x2f4>
  40ab88:	f859 3908 	ldr.w	r3, [r9], #-8
  40ab8c:	4599      	cmp	r9, r3
  40ab8e:	f040 8086 	bne.w	40ac9e <_malloc_r+0x54e>
  40ab92:	f010 0f03 	tst.w	r0, #3
  40ab96:	f100 30ff 	add.w	r0, r0, #4294967295
  40ab9a:	d1f5      	bne.n	40ab88 <_malloc_r+0x438>
  40ab9c:	687b      	ldr	r3, [r7, #4]
  40ab9e:	ea23 0304 	bic.w	r3, r3, r4
  40aba2:	607b      	str	r3, [r7, #4]
  40aba4:	0064      	lsls	r4, r4, #1
  40aba6:	429c      	cmp	r4, r3
  40aba8:	f63f aec7 	bhi.w	40a93a <_malloc_r+0x1ea>
  40abac:	2c00      	cmp	r4, #0
  40abae:	f43f aec4 	beq.w	40a93a <_malloc_r+0x1ea>
  40abb2:	421c      	tst	r4, r3
  40abb4:	4640      	mov	r0, r8
  40abb6:	f47f ae3e 	bne.w	40a836 <_malloc_r+0xe6>
  40abba:	0064      	lsls	r4, r4, #1
  40abbc:	421c      	tst	r4, r3
  40abbe:	f100 0004 	add.w	r0, r0, #4
  40abc2:	d0fa      	beq.n	40abba <_malloc_r+0x46a>
  40abc4:	e637      	b.n	40a836 <_malloc_r+0xe6>
  40abc6:	468c      	mov	ip, r1
  40abc8:	e78c      	b.n	40aae4 <_malloc_r+0x394>
  40abca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40abce:	d815      	bhi.n	40abfc <_malloc_r+0x4ac>
  40abd0:	0bf3      	lsrs	r3, r6, #15
  40abd2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40abd6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40abda:	00c3      	lsls	r3, r0, #3
  40abdc:	e5da      	b.n	40a794 <_malloc_r+0x44>
  40abde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40abe2:	e6ed      	b.n	40a9c0 <_malloc_r+0x270>
  40abe4:	687b      	ldr	r3, [r7, #4]
  40abe6:	1092      	asrs	r2, r2, #2
  40abe8:	2101      	movs	r1, #1
  40abea:	fa01 f202 	lsl.w	r2, r1, r2
  40abee:	4313      	orrs	r3, r2
  40abf0:	607b      	str	r3, [r7, #4]
  40abf2:	4662      	mov	r2, ip
  40abf4:	e779      	b.n	40aaea <_malloc_r+0x39a>
  40abf6:	2301      	movs	r3, #1
  40abf8:	6053      	str	r3, [r2, #4]
  40abfa:	e729      	b.n	40aa50 <_malloc_r+0x300>
  40abfc:	f240 5254 	movw	r2, #1364	; 0x554
  40ac00:	4293      	cmp	r3, r2
  40ac02:	d822      	bhi.n	40ac4a <_malloc_r+0x4fa>
  40ac04:	0cb3      	lsrs	r3, r6, #18
  40ac06:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40ac0a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40ac0e:	00c3      	lsls	r3, r0, #3
  40ac10:	e5c0      	b.n	40a794 <_malloc_r+0x44>
  40ac12:	f103 0b10 	add.w	fp, r3, #16
  40ac16:	e6ae      	b.n	40a976 <_malloc_r+0x226>
  40ac18:	2a54      	cmp	r2, #84	; 0x54
  40ac1a:	d829      	bhi.n	40ac70 <_malloc_r+0x520>
  40ac1c:	0b1a      	lsrs	r2, r3, #12
  40ac1e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40ac22:	00c9      	lsls	r1, r1, #3
  40ac24:	326e      	adds	r2, #110	; 0x6e
  40ac26:	e74d      	b.n	40aac4 <_malloc_r+0x374>
  40ac28:	4b20      	ldr	r3, [pc, #128]	; (40acac <_malloc_r+0x55c>)
  40ac2a:	6819      	ldr	r1, [r3, #0]
  40ac2c:	4459      	add	r1, fp
  40ac2e:	6019      	str	r1, [r3, #0]
  40ac30:	e6b2      	b.n	40a998 <_malloc_r+0x248>
  40ac32:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ac36:	2800      	cmp	r0, #0
  40ac38:	f47f aeae 	bne.w	40a998 <_malloc_r+0x248>
  40ac3c:	eb08 030b 	add.w	r3, r8, fp
  40ac40:	68ba      	ldr	r2, [r7, #8]
  40ac42:	f043 0301 	orr.w	r3, r3, #1
  40ac46:	6053      	str	r3, [r2, #4]
  40ac48:	e6ee      	b.n	40aa28 <_malloc_r+0x2d8>
  40ac4a:	207f      	movs	r0, #127	; 0x7f
  40ac4c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40ac50:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40ac54:	e59e      	b.n	40a794 <_malloc_r+0x44>
  40ac56:	f104 0108 	add.w	r1, r4, #8
  40ac5a:	4628      	mov	r0, r5
  40ac5c:	9300      	str	r3, [sp, #0]
  40ac5e:	f7ff fa4b 	bl	40a0f8 <_free_r>
  40ac62:	9b00      	ldr	r3, [sp, #0]
  40ac64:	6819      	ldr	r1, [r3, #0]
  40ac66:	e6df      	b.n	40aa28 <_malloc_r+0x2d8>
  40ac68:	2001      	movs	r0, #1
  40ac6a:	f04f 0900 	mov.w	r9, #0
  40ac6e:	e6bc      	b.n	40a9ea <_malloc_r+0x29a>
  40ac70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ac74:	d805      	bhi.n	40ac82 <_malloc_r+0x532>
  40ac76:	0bda      	lsrs	r2, r3, #15
  40ac78:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40ac7c:	00c9      	lsls	r1, r1, #3
  40ac7e:	3277      	adds	r2, #119	; 0x77
  40ac80:	e720      	b.n	40aac4 <_malloc_r+0x374>
  40ac82:	f240 5154 	movw	r1, #1364	; 0x554
  40ac86:	428a      	cmp	r2, r1
  40ac88:	d805      	bhi.n	40ac96 <_malloc_r+0x546>
  40ac8a:	0c9a      	lsrs	r2, r3, #18
  40ac8c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40ac90:	00c9      	lsls	r1, r1, #3
  40ac92:	327c      	adds	r2, #124	; 0x7c
  40ac94:	e716      	b.n	40aac4 <_malloc_r+0x374>
  40ac96:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40ac9a:	227e      	movs	r2, #126	; 0x7e
  40ac9c:	e712      	b.n	40aac4 <_malloc_r+0x374>
  40ac9e:	687b      	ldr	r3, [r7, #4]
  40aca0:	e780      	b.n	40aba4 <_malloc_r+0x454>
  40aca2:	08f0      	lsrs	r0, r6, #3
  40aca4:	f106 0308 	add.w	r3, r6, #8
  40aca8:	e600      	b.n	40a8ac <_malloc_r+0x15c>
  40acaa:	bf00      	nop
  40acac:	2040cee0 	.word	0x2040cee0

0040acb0 <__ascii_mbtowc>:
  40acb0:	b082      	sub	sp, #8
  40acb2:	b149      	cbz	r1, 40acc8 <__ascii_mbtowc+0x18>
  40acb4:	b15a      	cbz	r2, 40acce <__ascii_mbtowc+0x1e>
  40acb6:	b16b      	cbz	r3, 40acd4 <__ascii_mbtowc+0x24>
  40acb8:	7813      	ldrb	r3, [r2, #0]
  40acba:	600b      	str	r3, [r1, #0]
  40acbc:	7812      	ldrb	r2, [r2, #0]
  40acbe:	1c10      	adds	r0, r2, #0
  40acc0:	bf18      	it	ne
  40acc2:	2001      	movne	r0, #1
  40acc4:	b002      	add	sp, #8
  40acc6:	4770      	bx	lr
  40acc8:	a901      	add	r1, sp, #4
  40acca:	2a00      	cmp	r2, #0
  40accc:	d1f3      	bne.n	40acb6 <__ascii_mbtowc+0x6>
  40acce:	4610      	mov	r0, r2
  40acd0:	b002      	add	sp, #8
  40acd2:	4770      	bx	lr
  40acd4:	f06f 0001 	mvn.w	r0, #1
  40acd8:	e7f4      	b.n	40acc4 <__ascii_mbtowc+0x14>
  40acda:	bf00      	nop
  40acdc:	0000      	movs	r0, r0
	...

0040ace0 <memchr>:
  40ace0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ace4:	2a10      	cmp	r2, #16
  40ace6:	db2b      	blt.n	40ad40 <memchr+0x60>
  40ace8:	f010 0f07 	tst.w	r0, #7
  40acec:	d008      	beq.n	40ad00 <memchr+0x20>
  40acee:	f810 3b01 	ldrb.w	r3, [r0], #1
  40acf2:	3a01      	subs	r2, #1
  40acf4:	428b      	cmp	r3, r1
  40acf6:	d02d      	beq.n	40ad54 <memchr+0x74>
  40acf8:	f010 0f07 	tst.w	r0, #7
  40acfc:	b342      	cbz	r2, 40ad50 <memchr+0x70>
  40acfe:	d1f6      	bne.n	40acee <memchr+0xe>
  40ad00:	b4f0      	push	{r4, r5, r6, r7}
  40ad02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40ad06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40ad0a:	f022 0407 	bic.w	r4, r2, #7
  40ad0e:	f07f 0700 	mvns.w	r7, #0
  40ad12:	2300      	movs	r3, #0
  40ad14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40ad18:	3c08      	subs	r4, #8
  40ad1a:	ea85 0501 	eor.w	r5, r5, r1
  40ad1e:	ea86 0601 	eor.w	r6, r6, r1
  40ad22:	fa85 f547 	uadd8	r5, r5, r7
  40ad26:	faa3 f587 	sel	r5, r3, r7
  40ad2a:	fa86 f647 	uadd8	r6, r6, r7
  40ad2e:	faa5 f687 	sel	r6, r5, r7
  40ad32:	b98e      	cbnz	r6, 40ad58 <memchr+0x78>
  40ad34:	d1ee      	bne.n	40ad14 <memchr+0x34>
  40ad36:	bcf0      	pop	{r4, r5, r6, r7}
  40ad38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ad3c:	f002 0207 	and.w	r2, r2, #7
  40ad40:	b132      	cbz	r2, 40ad50 <memchr+0x70>
  40ad42:	f810 3b01 	ldrb.w	r3, [r0], #1
  40ad46:	3a01      	subs	r2, #1
  40ad48:	ea83 0301 	eor.w	r3, r3, r1
  40ad4c:	b113      	cbz	r3, 40ad54 <memchr+0x74>
  40ad4e:	d1f8      	bne.n	40ad42 <memchr+0x62>
  40ad50:	2000      	movs	r0, #0
  40ad52:	4770      	bx	lr
  40ad54:	3801      	subs	r0, #1
  40ad56:	4770      	bx	lr
  40ad58:	2d00      	cmp	r5, #0
  40ad5a:	bf06      	itte	eq
  40ad5c:	4635      	moveq	r5, r6
  40ad5e:	3803      	subeq	r0, #3
  40ad60:	3807      	subne	r0, #7
  40ad62:	f015 0f01 	tst.w	r5, #1
  40ad66:	d107      	bne.n	40ad78 <memchr+0x98>
  40ad68:	3001      	adds	r0, #1
  40ad6a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40ad6e:	bf02      	ittt	eq
  40ad70:	3001      	addeq	r0, #1
  40ad72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40ad76:	3001      	addeq	r0, #1
  40ad78:	bcf0      	pop	{r4, r5, r6, r7}
  40ad7a:	3801      	subs	r0, #1
  40ad7c:	4770      	bx	lr
  40ad7e:	bf00      	nop

0040ad80 <memcmp>:
  40ad80:	2a03      	cmp	r2, #3
  40ad82:	b470      	push	{r4, r5, r6}
  40ad84:	d922      	bls.n	40adcc <memcmp+0x4c>
  40ad86:	ea40 0301 	orr.w	r3, r0, r1
  40ad8a:	079b      	lsls	r3, r3, #30
  40ad8c:	d011      	beq.n	40adb2 <memcmp+0x32>
  40ad8e:	7803      	ldrb	r3, [r0, #0]
  40ad90:	780c      	ldrb	r4, [r1, #0]
  40ad92:	42a3      	cmp	r3, r4
  40ad94:	d11d      	bne.n	40add2 <memcmp+0x52>
  40ad96:	440a      	add	r2, r1
  40ad98:	3101      	adds	r1, #1
  40ad9a:	e005      	b.n	40ada8 <memcmp+0x28>
  40ad9c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40ada0:	f811 4b01 	ldrb.w	r4, [r1], #1
  40ada4:	42a3      	cmp	r3, r4
  40ada6:	d114      	bne.n	40add2 <memcmp+0x52>
  40ada8:	4291      	cmp	r1, r2
  40adaa:	d1f7      	bne.n	40ad9c <memcmp+0x1c>
  40adac:	2000      	movs	r0, #0
  40adae:	bc70      	pop	{r4, r5, r6}
  40adb0:	4770      	bx	lr
  40adb2:	680d      	ldr	r5, [r1, #0]
  40adb4:	6806      	ldr	r6, [r0, #0]
  40adb6:	42ae      	cmp	r6, r5
  40adb8:	460c      	mov	r4, r1
  40adba:	4603      	mov	r3, r0
  40adbc:	f101 0104 	add.w	r1, r1, #4
  40adc0:	f100 0004 	add.w	r0, r0, #4
  40adc4:	d108      	bne.n	40add8 <memcmp+0x58>
  40adc6:	3a04      	subs	r2, #4
  40adc8:	2a03      	cmp	r2, #3
  40adca:	d8f2      	bhi.n	40adb2 <memcmp+0x32>
  40adcc:	2a00      	cmp	r2, #0
  40adce:	d1de      	bne.n	40ad8e <memcmp+0xe>
  40add0:	e7ec      	b.n	40adac <memcmp+0x2c>
  40add2:	1b18      	subs	r0, r3, r4
  40add4:	bc70      	pop	{r4, r5, r6}
  40add6:	4770      	bx	lr
  40add8:	4621      	mov	r1, r4
  40adda:	4618      	mov	r0, r3
  40addc:	e7d7      	b.n	40ad8e <memcmp+0xe>
  40adde:	bf00      	nop

0040ade0 <memmove>:
  40ade0:	4288      	cmp	r0, r1
  40ade2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ade4:	d90d      	bls.n	40ae02 <memmove+0x22>
  40ade6:	188b      	adds	r3, r1, r2
  40ade8:	4298      	cmp	r0, r3
  40adea:	d20a      	bcs.n	40ae02 <memmove+0x22>
  40adec:	1884      	adds	r4, r0, r2
  40adee:	2a00      	cmp	r2, #0
  40adf0:	d051      	beq.n	40ae96 <memmove+0xb6>
  40adf2:	4622      	mov	r2, r4
  40adf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40adf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40adfc:	4299      	cmp	r1, r3
  40adfe:	d1f9      	bne.n	40adf4 <memmove+0x14>
  40ae00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ae02:	2a0f      	cmp	r2, #15
  40ae04:	d948      	bls.n	40ae98 <memmove+0xb8>
  40ae06:	ea41 0300 	orr.w	r3, r1, r0
  40ae0a:	079b      	lsls	r3, r3, #30
  40ae0c:	d146      	bne.n	40ae9c <memmove+0xbc>
  40ae0e:	f100 0410 	add.w	r4, r0, #16
  40ae12:	f101 0310 	add.w	r3, r1, #16
  40ae16:	4615      	mov	r5, r2
  40ae18:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40ae1c:	f844 6c10 	str.w	r6, [r4, #-16]
  40ae20:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40ae24:	f844 6c0c 	str.w	r6, [r4, #-12]
  40ae28:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40ae2c:	f844 6c08 	str.w	r6, [r4, #-8]
  40ae30:	3d10      	subs	r5, #16
  40ae32:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40ae36:	f844 6c04 	str.w	r6, [r4, #-4]
  40ae3a:	2d0f      	cmp	r5, #15
  40ae3c:	f103 0310 	add.w	r3, r3, #16
  40ae40:	f104 0410 	add.w	r4, r4, #16
  40ae44:	d8e8      	bhi.n	40ae18 <memmove+0x38>
  40ae46:	f1a2 0310 	sub.w	r3, r2, #16
  40ae4a:	f023 030f 	bic.w	r3, r3, #15
  40ae4e:	f002 0e0f 	and.w	lr, r2, #15
  40ae52:	3310      	adds	r3, #16
  40ae54:	f1be 0f03 	cmp.w	lr, #3
  40ae58:	4419      	add	r1, r3
  40ae5a:	4403      	add	r3, r0
  40ae5c:	d921      	bls.n	40aea2 <memmove+0xc2>
  40ae5e:	1f1e      	subs	r6, r3, #4
  40ae60:	460d      	mov	r5, r1
  40ae62:	4674      	mov	r4, lr
  40ae64:	3c04      	subs	r4, #4
  40ae66:	f855 7b04 	ldr.w	r7, [r5], #4
  40ae6a:	f846 7f04 	str.w	r7, [r6, #4]!
  40ae6e:	2c03      	cmp	r4, #3
  40ae70:	d8f8      	bhi.n	40ae64 <memmove+0x84>
  40ae72:	f1ae 0404 	sub.w	r4, lr, #4
  40ae76:	f024 0403 	bic.w	r4, r4, #3
  40ae7a:	3404      	adds	r4, #4
  40ae7c:	4421      	add	r1, r4
  40ae7e:	4423      	add	r3, r4
  40ae80:	f002 0203 	and.w	r2, r2, #3
  40ae84:	b162      	cbz	r2, 40aea0 <memmove+0xc0>
  40ae86:	3b01      	subs	r3, #1
  40ae88:	440a      	add	r2, r1
  40ae8a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40ae8e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40ae92:	428a      	cmp	r2, r1
  40ae94:	d1f9      	bne.n	40ae8a <memmove+0xaa>
  40ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ae98:	4603      	mov	r3, r0
  40ae9a:	e7f3      	b.n	40ae84 <memmove+0xa4>
  40ae9c:	4603      	mov	r3, r0
  40ae9e:	e7f2      	b.n	40ae86 <memmove+0xa6>
  40aea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40aea2:	4672      	mov	r2, lr
  40aea4:	e7ee      	b.n	40ae84 <memmove+0xa4>
  40aea6:	bf00      	nop

0040aea8 <__malloc_lock>:
  40aea8:	4801      	ldr	r0, [pc, #4]	; (40aeb0 <__malloc_lock+0x8>)
  40aeaa:	f7ff bbcd 	b.w	40a648 <__retarget_lock_acquire_recursive>
  40aeae:	bf00      	nop
  40aeb0:	2040d038 	.word	0x2040d038

0040aeb4 <__malloc_unlock>:
  40aeb4:	4801      	ldr	r0, [pc, #4]	; (40aebc <__malloc_unlock+0x8>)
  40aeb6:	f7ff bbc9 	b.w	40a64c <__retarget_lock_release_recursive>
  40aeba:	bf00      	nop
  40aebc:	2040d038 	.word	0x2040d038

0040aec0 <_Balloc>:
  40aec0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40aec2:	b570      	push	{r4, r5, r6, lr}
  40aec4:	4605      	mov	r5, r0
  40aec6:	460c      	mov	r4, r1
  40aec8:	b14b      	cbz	r3, 40aede <_Balloc+0x1e>
  40aeca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40aece:	b180      	cbz	r0, 40aef2 <_Balloc+0x32>
  40aed0:	6802      	ldr	r2, [r0, #0]
  40aed2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40aed6:	2300      	movs	r3, #0
  40aed8:	6103      	str	r3, [r0, #16]
  40aeda:	60c3      	str	r3, [r0, #12]
  40aedc:	bd70      	pop	{r4, r5, r6, pc}
  40aede:	2221      	movs	r2, #33	; 0x21
  40aee0:	2104      	movs	r1, #4
  40aee2:	f000 fedd 	bl	40bca0 <_calloc_r>
  40aee6:	64e8      	str	r0, [r5, #76]	; 0x4c
  40aee8:	4603      	mov	r3, r0
  40aeea:	2800      	cmp	r0, #0
  40aeec:	d1ed      	bne.n	40aeca <_Balloc+0xa>
  40aeee:	2000      	movs	r0, #0
  40aef0:	bd70      	pop	{r4, r5, r6, pc}
  40aef2:	2101      	movs	r1, #1
  40aef4:	fa01 f604 	lsl.w	r6, r1, r4
  40aef8:	1d72      	adds	r2, r6, #5
  40aefa:	4628      	mov	r0, r5
  40aefc:	0092      	lsls	r2, r2, #2
  40aefe:	f000 fecf 	bl	40bca0 <_calloc_r>
  40af02:	2800      	cmp	r0, #0
  40af04:	d0f3      	beq.n	40aeee <_Balloc+0x2e>
  40af06:	6044      	str	r4, [r0, #4]
  40af08:	6086      	str	r6, [r0, #8]
  40af0a:	e7e4      	b.n	40aed6 <_Balloc+0x16>

0040af0c <_Bfree>:
  40af0c:	b131      	cbz	r1, 40af1c <_Bfree+0x10>
  40af0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40af10:	684a      	ldr	r2, [r1, #4]
  40af12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40af16:	6008      	str	r0, [r1, #0]
  40af18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40af1c:	4770      	bx	lr
  40af1e:	bf00      	nop

0040af20 <__multadd>:
  40af20:	b5f0      	push	{r4, r5, r6, r7, lr}
  40af22:	690c      	ldr	r4, [r1, #16]
  40af24:	b083      	sub	sp, #12
  40af26:	460d      	mov	r5, r1
  40af28:	4606      	mov	r6, r0
  40af2a:	f101 0e14 	add.w	lr, r1, #20
  40af2e:	2700      	movs	r7, #0
  40af30:	f8de 0000 	ldr.w	r0, [lr]
  40af34:	b281      	uxth	r1, r0
  40af36:	fb02 3301 	mla	r3, r2, r1, r3
  40af3a:	0c01      	lsrs	r1, r0, #16
  40af3c:	0c18      	lsrs	r0, r3, #16
  40af3e:	fb02 0101 	mla	r1, r2, r1, r0
  40af42:	b29b      	uxth	r3, r3
  40af44:	3701      	adds	r7, #1
  40af46:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40af4a:	42bc      	cmp	r4, r7
  40af4c:	f84e 3b04 	str.w	r3, [lr], #4
  40af50:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40af54:	dcec      	bgt.n	40af30 <__multadd+0x10>
  40af56:	b13b      	cbz	r3, 40af68 <__multadd+0x48>
  40af58:	68aa      	ldr	r2, [r5, #8]
  40af5a:	4294      	cmp	r4, r2
  40af5c:	da07      	bge.n	40af6e <__multadd+0x4e>
  40af5e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40af62:	3401      	adds	r4, #1
  40af64:	6153      	str	r3, [r2, #20]
  40af66:	612c      	str	r4, [r5, #16]
  40af68:	4628      	mov	r0, r5
  40af6a:	b003      	add	sp, #12
  40af6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40af6e:	6869      	ldr	r1, [r5, #4]
  40af70:	9301      	str	r3, [sp, #4]
  40af72:	3101      	adds	r1, #1
  40af74:	4630      	mov	r0, r6
  40af76:	f7ff ffa3 	bl	40aec0 <_Balloc>
  40af7a:	692a      	ldr	r2, [r5, #16]
  40af7c:	3202      	adds	r2, #2
  40af7e:	f105 010c 	add.w	r1, r5, #12
  40af82:	4607      	mov	r7, r0
  40af84:	0092      	lsls	r2, r2, #2
  40af86:	300c      	adds	r0, #12
  40af88:	f7fb f8aa 	bl	4060e0 <memcpy>
  40af8c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40af8e:	6869      	ldr	r1, [r5, #4]
  40af90:	9b01      	ldr	r3, [sp, #4]
  40af92:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40af96:	6028      	str	r0, [r5, #0]
  40af98:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40af9c:	463d      	mov	r5, r7
  40af9e:	e7de      	b.n	40af5e <__multadd+0x3e>

0040afa0 <__hi0bits>:
  40afa0:	0c02      	lsrs	r2, r0, #16
  40afa2:	0412      	lsls	r2, r2, #16
  40afa4:	4603      	mov	r3, r0
  40afa6:	b9b2      	cbnz	r2, 40afd6 <__hi0bits+0x36>
  40afa8:	0403      	lsls	r3, r0, #16
  40afaa:	2010      	movs	r0, #16
  40afac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40afb0:	bf04      	itt	eq
  40afb2:	021b      	lsleq	r3, r3, #8
  40afb4:	3008      	addeq	r0, #8
  40afb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40afba:	bf04      	itt	eq
  40afbc:	011b      	lsleq	r3, r3, #4
  40afbe:	3004      	addeq	r0, #4
  40afc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40afc4:	bf04      	itt	eq
  40afc6:	009b      	lsleq	r3, r3, #2
  40afc8:	3002      	addeq	r0, #2
  40afca:	2b00      	cmp	r3, #0
  40afcc:	db02      	blt.n	40afd4 <__hi0bits+0x34>
  40afce:	005b      	lsls	r3, r3, #1
  40afd0:	d403      	bmi.n	40afda <__hi0bits+0x3a>
  40afd2:	2020      	movs	r0, #32
  40afd4:	4770      	bx	lr
  40afd6:	2000      	movs	r0, #0
  40afd8:	e7e8      	b.n	40afac <__hi0bits+0xc>
  40afda:	3001      	adds	r0, #1
  40afdc:	4770      	bx	lr
  40afde:	bf00      	nop

0040afe0 <__lo0bits>:
  40afe0:	6803      	ldr	r3, [r0, #0]
  40afe2:	f013 0207 	ands.w	r2, r3, #7
  40afe6:	4601      	mov	r1, r0
  40afe8:	d007      	beq.n	40affa <__lo0bits+0x1a>
  40afea:	07da      	lsls	r2, r3, #31
  40afec:	d421      	bmi.n	40b032 <__lo0bits+0x52>
  40afee:	0798      	lsls	r0, r3, #30
  40aff0:	d421      	bmi.n	40b036 <__lo0bits+0x56>
  40aff2:	089b      	lsrs	r3, r3, #2
  40aff4:	600b      	str	r3, [r1, #0]
  40aff6:	2002      	movs	r0, #2
  40aff8:	4770      	bx	lr
  40affa:	b298      	uxth	r0, r3
  40affc:	b198      	cbz	r0, 40b026 <__lo0bits+0x46>
  40affe:	4610      	mov	r0, r2
  40b000:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b004:	bf04      	itt	eq
  40b006:	0a1b      	lsreq	r3, r3, #8
  40b008:	3008      	addeq	r0, #8
  40b00a:	071a      	lsls	r2, r3, #28
  40b00c:	bf04      	itt	eq
  40b00e:	091b      	lsreq	r3, r3, #4
  40b010:	3004      	addeq	r0, #4
  40b012:	079a      	lsls	r2, r3, #30
  40b014:	bf04      	itt	eq
  40b016:	089b      	lsreq	r3, r3, #2
  40b018:	3002      	addeq	r0, #2
  40b01a:	07da      	lsls	r2, r3, #31
  40b01c:	d407      	bmi.n	40b02e <__lo0bits+0x4e>
  40b01e:	085b      	lsrs	r3, r3, #1
  40b020:	d104      	bne.n	40b02c <__lo0bits+0x4c>
  40b022:	2020      	movs	r0, #32
  40b024:	4770      	bx	lr
  40b026:	0c1b      	lsrs	r3, r3, #16
  40b028:	2010      	movs	r0, #16
  40b02a:	e7e9      	b.n	40b000 <__lo0bits+0x20>
  40b02c:	3001      	adds	r0, #1
  40b02e:	600b      	str	r3, [r1, #0]
  40b030:	4770      	bx	lr
  40b032:	2000      	movs	r0, #0
  40b034:	4770      	bx	lr
  40b036:	085b      	lsrs	r3, r3, #1
  40b038:	600b      	str	r3, [r1, #0]
  40b03a:	2001      	movs	r0, #1
  40b03c:	4770      	bx	lr
  40b03e:	bf00      	nop

0040b040 <__i2b>:
  40b040:	b510      	push	{r4, lr}
  40b042:	460c      	mov	r4, r1
  40b044:	2101      	movs	r1, #1
  40b046:	f7ff ff3b 	bl	40aec0 <_Balloc>
  40b04a:	2201      	movs	r2, #1
  40b04c:	6144      	str	r4, [r0, #20]
  40b04e:	6102      	str	r2, [r0, #16]
  40b050:	bd10      	pop	{r4, pc}
  40b052:	bf00      	nop

0040b054 <__multiply>:
  40b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b058:	690c      	ldr	r4, [r1, #16]
  40b05a:	6915      	ldr	r5, [r2, #16]
  40b05c:	42ac      	cmp	r4, r5
  40b05e:	b083      	sub	sp, #12
  40b060:	468b      	mov	fp, r1
  40b062:	4616      	mov	r6, r2
  40b064:	da04      	bge.n	40b070 <__multiply+0x1c>
  40b066:	4622      	mov	r2, r4
  40b068:	46b3      	mov	fp, r6
  40b06a:	462c      	mov	r4, r5
  40b06c:	460e      	mov	r6, r1
  40b06e:	4615      	mov	r5, r2
  40b070:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b074:	f8db 1004 	ldr.w	r1, [fp, #4]
  40b078:	eb04 0805 	add.w	r8, r4, r5
  40b07c:	4598      	cmp	r8, r3
  40b07e:	bfc8      	it	gt
  40b080:	3101      	addgt	r1, #1
  40b082:	f7ff ff1d 	bl	40aec0 <_Balloc>
  40b086:	f100 0914 	add.w	r9, r0, #20
  40b08a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40b08e:	45d1      	cmp	r9, sl
  40b090:	9000      	str	r0, [sp, #0]
  40b092:	d205      	bcs.n	40b0a0 <__multiply+0x4c>
  40b094:	464b      	mov	r3, r9
  40b096:	2100      	movs	r1, #0
  40b098:	f843 1b04 	str.w	r1, [r3], #4
  40b09c:	459a      	cmp	sl, r3
  40b09e:	d8fb      	bhi.n	40b098 <__multiply+0x44>
  40b0a0:	f106 0c14 	add.w	ip, r6, #20
  40b0a4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40b0a8:	f10b 0b14 	add.w	fp, fp, #20
  40b0ac:	459c      	cmp	ip, r3
  40b0ae:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40b0b2:	d24c      	bcs.n	40b14e <__multiply+0xfa>
  40b0b4:	f8cd a004 	str.w	sl, [sp, #4]
  40b0b8:	469a      	mov	sl, r3
  40b0ba:	f8dc 5000 	ldr.w	r5, [ip]
  40b0be:	b2af      	uxth	r7, r5
  40b0c0:	b1ef      	cbz	r7, 40b0fe <__multiply+0xaa>
  40b0c2:	2100      	movs	r1, #0
  40b0c4:	464d      	mov	r5, r9
  40b0c6:	465e      	mov	r6, fp
  40b0c8:	460c      	mov	r4, r1
  40b0ca:	f856 2b04 	ldr.w	r2, [r6], #4
  40b0ce:	6828      	ldr	r0, [r5, #0]
  40b0d0:	b293      	uxth	r3, r2
  40b0d2:	b281      	uxth	r1, r0
  40b0d4:	fb07 1303 	mla	r3, r7, r3, r1
  40b0d8:	0c12      	lsrs	r2, r2, #16
  40b0da:	0c01      	lsrs	r1, r0, #16
  40b0dc:	4423      	add	r3, r4
  40b0de:	fb07 1102 	mla	r1, r7, r2, r1
  40b0e2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40b0e6:	b29b      	uxth	r3, r3
  40b0e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40b0ec:	45b6      	cmp	lr, r6
  40b0ee:	f845 3b04 	str.w	r3, [r5], #4
  40b0f2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40b0f6:	d8e8      	bhi.n	40b0ca <__multiply+0x76>
  40b0f8:	602c      	str	r4, [r5, #0]
  40b0fa:	f8dc 5000 	ldr.w	r5, [ip]
  40b0fe:	0c2d      	lsrs	r5, r5, #16
  40b100:	d01d      	beq.n	40b13e <__multiply+0xea>
  40b102:	f8d9 3000 	ldr.w	r3, [r9]
  40b106:	4648      	mov	r0, r9
  40b108:	461c      	mov	r4, r3
  40b10a:	4659      	mov	r1, fp
  40b10c:	2200      	movs	r2, #0
  40b10e:	880e      	ldrh	r6, [r1, #0]
  40b110:	0c24      	lsrs	r4, r4, #16
  40b112:	fb05 4406 	mla	r4, r5, r6, r4
  40b116:	4422      	add	r2, r4
  40b118:	b29b      	uxth	r3, r3
  40b11a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40b11e:	f840 3b04 	str.w	r3, [r0], #4
  40b122:	f851 3b04 	ldr.w	r3, [r1], #4
  40b126:	6804      	ldr	r4, [r0, #0]
  40b128:	0c1b      	lsrs	r3, r3, #16
  40b12a:	b2a6      	uxth	r6, r4
  40b12c:	fb05 6303 	mla	r3, r5, r3, r6
  40b130:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40b134:	458e      	cmp	lr, r1
  40b136:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40b13a:	d8e8      	bhi.n	40b10e <__multiply+0xba>
  40b13c:	6003      	str	r3, [r0, #0]
  40b13e:	f10c 0c04 	add.w	ip, ip, #4
  40b142:	45e2      	cmp	sl, ip
  40b144:	f109 0904 	add.w	r9, r9, #4
  40b148:	d8b7      	bhi.n	40b0ba <__multiply+0x66>
  40b14a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40b14e:	f1b8 0f00 	cmp.w	r8, #0
  40b152:	dd0b      	ble.n	40b16c <__multiply+0x118>
  40b154:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40b158:	f1aa 0a04 	sub.w	sl, sl, #4
  40b15c:	b11b      	cbz	r3, 40b166 <__multiply+0x112>
  40b15e:	e005      	b.n	40b16c <__multiply+0x118>
  40b160:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40b164:	b913      	cbnz	r3, 40b16c <__multiply+0x118>
  40b166:	f1b8 0801 	subs.w	r8, r8, #1
  40b16a:	d1f9      	bne.n	40b160 <__multiply+0x10c>
  40b16c:	9800      	ldr	r0, [sp, #0]
  40b16e:	f8c0 8010 	str.w	r8, [r0, #16]
  40b172:	b003      	add	sp, #12
  40b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b178 <__pow5mult>:
  40b178:	f012 0303 	ands.w	r3, r2, #3
  40b17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b180:	4614      	mov	r4, r2
  40b182:	4607      	mov	r7, r0
  40b184:	d12e      	bne.n	40b1e4 <__pow5mult+0x6c>
  40b186:	460d      	mov	r5, r1
  40b188:	10a4      	asrs	r4, r4, #2
  40b18a:	d01c      	beq.n	40b1c6 <__pow5mult+0x4e>
  40b18c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40b18e:	b396      	cbz	r6, 40b1f6 <__pow5mult+0x7e>
  40b190:	07e3      	lsls	r3, r4, #31
  40b192:	f04f 0800 	mov.w	r8, #0
  40b196:	d406      	bmi.n	40b1a6 <__pow5mult+0x2e>
  40b198:	1064      	asrs	r4, r4, #1
  40b19a:	d014      	beq.n	40b1c6 <__pow5mult+0x4e>
  40b19c:	6830      	ldr	r0, [r6, #0]
  40b19e:	b1a8      	cbz	r0, 40b1cc <__pow5mult+0x54>
  40b1a0:	4606      	mov	r6, r0
  40b1a2:	07e3      	lsls	r3, r4, #31
  40b1a4:	d5f8      	bpl.n	40b198 <__pow5mult+0x20>
  40b1a6:	4632      	mov	r2, r6
  40b1a8:	4629      	mov	r1, r5
  40b1aa:	4638      	mov	r0, r7
  40b1ac:	f7ff ff52 	bl	40b054 <__multiply>
  40b1b0:	b1b5      	cbz	r5, 40b1e0 <__pow5mult+0x68>
  40b1b2:	686a      	ldr	r2, [r5, #4]
  40b1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b1b6:	1064      	asrs	r4, r4, #1
  40b1b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b1bc:	6029      	str	r1, [r5, #0]
  40b1be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b1c2:	4605      	mov	r5, r0
  40b1c4:	d1ea      	bne.n	40b19c <__pow5mult+0x24>
  40b1c6:	4628      	mov	r0, r5
  40b1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b1cc:	4632      	mov	r2, r6
  40b1ce:	4631      	mov	r1, r6
  40b1d0:	4638      	mov	r0, r7
  40b1d2:	f7ff ff3f 	bl	40b054 <__multiply>
  40b1d6:	6030      	str	r0, [r6, #0]
  40b1d8:	f8c0 8000 	str.w	r8, [r0]
  40b1dc:	4606      	mov	r6, r0
  40b1de:	e7e0      	b.n	40b1a2 <__pow5mult+0x2a>
  40b1e0:	4605      	mov	r5, r0
  40b1e2:	e7d9      	b.n	40b198 <__pow5mult+0x20>
  40b1e4:	1e5a      	subs	r2, r3, #1
  40b1e6:	4d0b      	ldr	r5, [pc, #44]	; (40b214 <__pow5mult+0x9c>)
  40b1e8:	2300      	movs	r3, #0
  40b1ea:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b1ee:	f7ff fe97 	bl	40af20 <__multadd>
  40b1f2:	4605      	mov	r5, r0
  40b1f4:	e7c8      	b.n	40b188 <__pow5mult+0x10>
  40b1f6:	2101      	movs	r1, #1
  40b1f8:	4638      	mov	r0, r7
  40b1fa:	f7ff fe61 	bl	40aec0 <_Balloc>
  40b1fe:	f240 2171 	movw	r1, #625	; 0x271
  40b202:	2201      	movs	r2, #1
  40b204:	2300      	movs	r3, #0
  40b206:	6141      	str	r1, [r0, #20]
  40b208:	6102      	str	r2, [r0, #16]
  40b20a:	4606      	mov	r6, r0
  40b20c:	64b8      	str	r0, [r7, #72]	; 0x48
  40b20e:	6003      	str	r3, [r0, #0]
  40b210:	e7be      	b.n	40b190 <__pow5mult+0x18>
  40b212:	bf00      	nop
  40b214:	0040dc58 	.word	0x0040dc58

0040b218 <__lshift>:
  40b218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b21c:	4691      	mov	r9, r2
  40b21e:	690a      	ldr	r2, [r1, #16]
  40b220:	688b      	ldr	r3, [r1, #8]
  40b222:	ea4f 1469 	mov.w	r4, r9, asr #5
  40b226:	eb04 0802 	add.w	r8, r4, r2
  40b22a:	f108 0501 	add.w	r5, r8, #1
  40b22e:	429d      	cmp	r5, r3
  40b230:	460e      	mov	r6, r1
  40b232:	4607      	mov	r7, r0
  40b234:	6849      	ldr	r1, [r1, #4]
  40b236:	dd04      	ble.n	40b242 <__lshift+0x2a>
  40b238:	005b      	lsls	r3, r3, #1
  40b23a:	429d      	cmp	r5, r3
  40b23c:	f101 0101 	add.w	r1, r1, #1
  40b240:	dcfa      	bgt.n	40b238 <__lshift+0x20>
  40b242:	4638      	mov	r0, r7
  40b244:	f7ff fe3c 	bl	40aec0 <_Balloc>
  40b248:	2c00      	cmp	r4, #0
  40b24a:	f100 0314 	add.w	r3, r0, #20
  40b24e:	dd06      	ble.n	40b25e <__lshift+0x46>
  40b250:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40b254:	2100      	movs	r1, #0
  40b256:	f843 1b04 	str.w	r1, [r3], #4
  40b25a:	429a      	cmp	r2, r3
  40b25c:	d1fb      	bne.n	40b256 <__lshift+0x3e>
  40b25e:	6934      	ldr	r4, [r6, #16]
  40b260:	f106 0114 	add.w	r1, r6, #20
  40b264:	f019 091f 	ands.w	r9, r9, #31
  40b268:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40b26c:	d01d      	beq.n	40b2aa <__lshift+0x92>
  40b26e:	f1c9 0c20 	rsb	ip, r9, #32
  40b272:	2200      	movs	r2, #0
  40b274:	680c      	ldr	r4, [r1, #0]
  40b276:	fa04 f409 	lsl.w	r4, r4, r9
  40b27a:	4314      	orrs	r4, r2
  40b27c:	f843 4b04 	str.w	r4, [r3], #4
  40b280:	f851 2b04 	ldr.w	r2, [r1], #4
  40b284:	458e      	cmp	lr, r1
  40b286:	fa22 f20c 	lsr.w	r2, r2, ip
  40b28a:	d8f3      	bhi.n	40b274 <__lshift+0x5c>
  40b28c:	601a      	str	r2, [r3, #0]
  40b28e:	b10a      	cbz	r2, 40b294 <__lshift+0x7c>
  40b290:	f108 0502 	add.w	r5, r8, #2
  40b294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b296:	6872      	ldr	r2, [r6, #4]
  40b298:	3d01      	subs	r5, #1
  40b29a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b29e:	6105      	str	r5, [r0, #16]
  40b2a0:	6031      	str	r1, [r6, #0]
  40b2a2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b2aa:	3b04      	subs	r3, #4
  40b2ac:	f851 2b04 	ldr.w	r2, [r1], #4
  40b2b0:	f843 2f04 	str.w	r2, [r3, #4]!
  40b2b4:	458e      	cmp	lr, r1
  40b2b6:	d8f9      	bhi.n	40b2ac <__lshift+0x94>
  40b2b8:	e7ec      	b.n	40b294 <__lshift+0x7c>
  40b2ba:	bf00      	nop

0040b2bc <__mcmp>:
  40b2bc:	b430      	push	{r4, r5}
  40b2be:	690b      	ldr	r3, [r1, #16]
  40b2c0:	4605      	mov	r5, r0
  40b2c2:	6900      	ldr	r0, [r0, #16]
  40b2c4:	1ac0      	subs	r0, r0, r3
  40b2c6:	d10f      	bne.n	40b2e8 <__mcmp+0x2c>
  40b2c8:	009b      	lsls	r3, r3, #2
  40b2ca:	3514      	adds	r5, #20
  40b2cc:	3114      	adds	r1, #20
  40b2ce:	4419      	add	r1, r3
  40b2d0:	442b      	add	r3, r5
  40b2d2:	e001      	b.n	40b2d8 <__mcmp+0x1c>
  40b2d4:	429d      	cmp	r5, r3
  40b2d6:	d207      	bcs.n	40b2e8 <__mcmp+0x2c>
  40b2d8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b2dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b2e0:	4294      	cmp	r4, r2
  40b2e2:	d0f7      	beq.n	40b2d4 <__mcmp+0x18>
  40b2e4:	d302      	bcc.n	40b2ec <__mcmp+0x30>
  40b2e6:	2001      	movs	r0, #1
  40b2e8:	bc30      	pop	{r4, r5}
  40b2ea:	4770      	bx	lr
  40b2ec:	f04f 30ff 	mov.w	r0, #4294967295
  40b2f0:	e7fa      	b.n	40b2e8 <__mcmp+0x2c>
  40b2f2:	bf00      	nop

0040b2f4 <__mdiff>:
  40b2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b2f8:	690f      	ldr	r7, [r1, #16]
  40b2fa:	460e      	mov	r6, r1
  40b2fc:	6911      	ldr	r1, [r2, #16]
  40b2fe:	1a7f      	subs	r7, r7, r1
  40b300:	2f00      	cmp	r7, #0
  40b302:	4690      	mov	r8, r2
  40b304:	d117      	bne.n	40b336 <__mdiff+0x42>
  40b306:	0089      	lsls	r1, r1, #2
  40b308:	f106 0514 	add.w	r5, r6, #20
  40b30c:	f102 0e14 	add.w	lr, r2, #20
  40b310:	186b      	adds	r3, r5, r1
  40b312:	4471      	add	r1, lr
  40b314:	e001      	b.n	40b31a <__mdiff+0x26>
  40b316:	429d      	cmp	r5, r3
  40b318:	d25c      	bcs.n	40b3d4 <__mdiff+0xe0>
  40b31a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40b31e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40b322:	42a2      	cmp	r2, r4
  40b324:	d0f7      	beq.n	40b316 <__mdiff+0x22>
  40b326:	d25e      	bcs.n	40b3e6 <__mdiff+0xf2>
  40b328:	4633      	mov	r3, r6
  40b32a:	462c      	mov	r4, r5
  40b32c:	4646      	mov	r6, r8
  40b32e:	4675      	mov	r5, lr
  40b330:	4698      	mov	r8, r3
  40b332:	2701      	movs	r7, #1
  40b334:	e005      	b.n	40b342 <__mdiff+0x4e>
  40b336:	db58      	blt.n	40b3ea <__mdiff+0xf6>
  40b338:	f106 0514 	add.w	r5, r6, #20
  40b33c:	f108 0414 	add.w	r4, r8, #20
  40b340:	2700      	movs	r7, #0
  40b342:	6871      	ldr	r1, [r6, #4]
  40b344:	f7ff fdbc 	bl	40aec0 <_Balloc>
  40b348:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b34c:	6936      	ldr	r6, [r6, #16]
  40b34e:	60c7      	str	r7, [r0, #12]
  40b350:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40b354:	46a6      	mov	lr, r4
  40b356:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40b35a:	f100 0414 	add.w	r4, r0, #20
  40b35e:	2300      	movs	r3, #0
  40b360:	f85e 1b04 	ldr.w	r1, [lr], #4
  40b364:	f855 8b04 	ldr.w	r8, [r5], #4
  40b368:	b28a      	uxth	r2, r1
  40b36a:	fa13 f388 	uxtah	r3, r3, r8
  40b36e:	0c09      	lsrs	r1, r1, #16
  40b370:	1a9a      	subs	r2, r3, r2
  40b372:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40b376:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40b37a:	b292      	uxth	r2, r2
  40b37c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40b380:	45f4      	cmp	ip, lr
  40b382:	f844 2b04 	str.w	r2, [r4], #4
  40b386:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b38a:	d8e9      	bhi.n	40b360 <__mdiff+0x6c>
  40b38c:	42af      	cmp	r7, r5
  40b38e:	d917      	bls.n	40b3c0 <__mdiff+0xcc>
  40b390:	46a4      	mov	ip, r4
  40b392:	46ae      	mov	lr, r5
  40b394:	f85e 2b04 	ldr.w	r2, [lr], #4
  40b398:	fa13 f382 	uxtah	r3, r3, r2
  40b39c:	1419      	asrs	r1, r3, #16
  40b39e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40b3a2:	b29b      	uxth	r3, r3
  40b3a4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40b3a8:	4577      	cmp	r7, lr
  40b3aa:	f84c 2b04 	str.w	r2, [ip], #4
  40b3ae:	ea4f 4321 	mov.w	r3, r1, asr #16
  40b3b2:	d8ef      	bhi.n	40b394 <__mdiff+0xa0>
  40b3b4:	43ed      	mvns	r5, r5
  40b3b6:	442f      	add	r7, r5
  40b3b8:	f027 0703 	bic.w	r7, r7, #3
  40b3bc:	3704      	adds	r7, #4
  40b3be:	443c      	add	r4, r7
  40b3c0:	3c04      	subs	r4, #4
  40b3c2:	b922      	cbnz	r2, 40b3ce <__mdiff+0xda>
  40b3c4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40b3c8:	3e01      	subs	r6, #1
  40b3ca:	2b00      	cmp	r3, #0
  40b3cc:	d0fa      	beq.n	40b3c4 <__mdiff+0xd0>
  40b3ce:	6106      	str	r6, [r0, #16]
  40b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b3d4:	2100      	movs	r1, #0
  40b3d6:	f7ff fd73 	bl	40aec0 <_Balloc>
  40b3da:	2201      	movs	r2, #1
  40b3dc:	2300      	movs	r3, #0
  40b3de:	6102      	str	r2, [r0, #16]
  40b3e0:	6143      	str	r3, [r0, #20]
  40b3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b3e6:	4674      	mov	r4, lr
  40b3e8:	e7ab      	b.n	40b342 <__mdiff+0x4e>
  40b3ea:	4633      	mov	r3, r6
  40b3ec:	f106 0414 	add.w	r4, r6, #20
  40b3f0:	f102 0514 	add.w	r5, r2, #20
  40b3f4:	4616      	mov	r6, r2
  40b3f6:	2701      	movs	r7, #1
  40b3f8:	4698      	mov	r8, r3
  40b3fa:	e7a2      	b.n	40b342 <__mdiff+0x4e>

0040b3fc <__d2b>:
  40b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b400:	b082      	sub	sp, #8
  40b402:	2101      	movs	r1, #1
  40b404:	461c      	mov	r4, r3
  40b406:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40b40a:	4615      	mov	r5, r2
  40b40c:	9e08      	ldr	r6, [sp, #32]
  40b40e:	f7ff fd57 	bl	40aec0 <_Balloc>
  40b412:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40b416:	4680      	mov	r8, r0
  40b418:	b10f      	cbz	r7, 40b41e <__d2b+0x22>
  40b41a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40b41e:	9401      	str	r4, [sp, #4]
  40b420:	b31d      	cbz	r5, 40b46a <__d2b+0x6e>
  40b422:	a802      	add	r0, sp, #8
  40b424:	f840 5d08 	str.w	r5, [r0, #-8]!
  40b428:	f7ff fdda 	bl	40afe0 <__lo0bits>
  40b42c:	2800      	cmp	r0, #0
  40b42e:	d134      	bne.n	40b49a <__d2b+0x9e>
  40b430:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b434:	f8c8 2014 	str.w	r2, [r8, #20]
  40b438:	2b00      	cmp	r3, #0
  40b43a:	bf0c      	ite	eq
  40b43c:	2101      	moveq	r1, #1
  40b43e:	2102      	movne	r1, #2
  40b440:	f8c8 3018 	str.w	r3, [r8, #24]
  40b444:	f8c8 1010 	str.w	r1, [r8, #16]
  40b448:	b9df      	cbnz	r7, 40b482 <__d2b+0x86>
  40b44a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40b44e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40b452:	6030      	str	r0, [r6, #0]
  40b454:	6918      	ldr	r0, [r3, #16]
  40b456:	f7ff fda3 	bl	40afa0 <__hi0bits>
  40b45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b45c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40b460:	6018      	str	r0, [r3, #0]
  40b462:	4640      	mov	r0, r8
  40b464:	b002      	add	sp, #8
  40b466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b46a:	a801      	add	r0, sp, #4
  40b46c:	f7ff fdb8 	bl	40afe0 <__lo0bits>
  40b470:	9b01      	ldr	r3, [sp, #4]
  40b472:	f8c8 3014 	str.w	r3, [r8, #20]
  40b476:	2101      	movs	r1, #1
  40b478:	3020      	adds	r0, #32
  40b47a:	f8c8 1010 	str.w	r1, [r8, #16]
  40b47e:	2f00      	cmp	r7, #0
  40b480:	d0e3      	beq.n	40b44a <__d2b+0x4e>
  40b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b484:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40b488:	4407      	add	r7, r0
  40b48a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40b48e:	6037      	str	r7, [r6, #0]
  40b490:	6018      	str	r0, [r3, #0]
  40b492:	4640      	mov	r0, r8
  40b494:	b002      	add	sp, #8
  40b496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b49a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40b49e:	f1c0 0220 	rsb	r2, r0, #32
  40b4a2:	fa03 f202 	lsl.w	r2, r3, r2
  40b4a6:	430a      	orrs	r2, r1
  40b4a8:	40c3      	lsrs	r3, r0
  40b4aa:	9301      	str	r3, [sp, #4]
  40b4ac:	f8c8 2014 	str.w	r2, [r8, #20]
  40b4b0:	e7c2      	b.n	40b438 <__d2b+0x3c>
  40b4b2:	bf00      	nop

0040b4b4 <_realloc_r>:
  40b4b4:	2900      	cmp	r1, #0
  40b4b6:	f000 8095 	beq.w	40b5e4 <_realloc_r+0x130>
  40b4ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b4be:	460d      	mov	r5, r1
  40b4c0:	4616      	mov	r6, r2
  40b4c2:	b083      	sub	sp, #12
  40b4c4:	4680      	mov	r8, r0
  40b4c6:	f106 070b 	add.w	r7, r6, #11
  40b4ca:	f7ff fced 	bl	40aea8 <__malloc_lock>
  40b4ce:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40b4d2:	2f16      	cmp	r7, #22
  40b4d4:	f02e 0403 	bic.w	r4, lr, #3
  40b4d8:	f1a5 0908 	sub.w	r9, r5, #8
  40b4dc:	d83c      	bhi.n	40b558 <_realloc_r+0xa4>
  40b4de:	2210      	movs	r2, #16
  40b4e0:	4617      	mov	r7, r2
  40b4e2:	42be      	cmp	r6, r7
  40b4e4:	d83d      	bhi.n	40b562 <_realloc_r+0xae>
  40b4e6:	4294      	cmp	r4, r2
  40b4e8:	da43      	bge.n	40b572 <_realloc_r+0xbe>
  40b4ea:	4bc4      	ldr	r3, [pc, #784]	; (40b7fc <_realloc_r+0x348>)
  40b4ec:	6899      	ldr	r1, [r3, #8]
  40b4ee:	eb09 0004 	add.w	r0, r9, r4
  40b4f2:	4288      	cmp	r0, r1
  40b4f4:	f000 80b4 	beq.w	40b660 <_realloc_r+0x1ac>
  40b4f8:	6843      	ldr	r3, [r0, #4]
  40b4fa:	f023 0101 	bic.w	r1, r3, #1
  40b4fe:	4401      	add	r1, r0
  40b500:	6849      	ldr	r1, [r1, #4]
  40b502:	07c9      	lsls	r1, r1, #31
  40b504:	d54c      	bpl.n	40b5a0 <_realloc_r+0xec>
  40b506:	f01e 0f01 	tst.w	lr, #1
  40b50a:	f000 809b 	beq.w	40b644 <_realloc_r+0x190>
  40b50e:	4631      	mov	r1, r6
  40b510:	4640      	mov	r0, r8
  40b512:	f7ff f91d 	bl	40a750 <_malloc_r>
  40b516:	4606      	mov	r6, r0
  40b518:	2800      	cmp	r0, #0
  40b51a:	d03a      	beq.n	40b592 <_realloc_r+0xde>
  40b51c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b520:	f023 0301 	bic.w	r3, r3, #1
  40b524:	444b      	add	r3, r9
  40b526:	f1a0 0208 	sub.w	r2, r0, #8
  40b52a:	429a      	cmp	r2, r3
  40b52c:	f000 8121 	beq.w	40b772 <_realloc_r+0x2be>
  40b530:	1f22      	subs	r2, r4, #4
  40b532:	2a24      	cmp	r2, #36	; 0x24
  40b534:	f200 8107 	bhi.w	40b746 <_realloc_r+0x292>
  40b538:	2a13      	cmp	r2, #19
  40b53a:	f200 80db 	bhi.w	40b6f4 <_realloc_r+0x240>
  40b53e:	4603      	mov	r3, r0
  40b540:	462a      	mov	r2, r5
  40b542:	6811      	ldr	r1, [r2, #0]
  40b544:	6019      	str	r1, [r3, #0]
  40b546:	6851      	ldr	r1, [r2, #4]
  40b548:	6059      	str	r1, [r3, #4]
  40b54a:	6892      	ldr	r2, [r2, #8]
  40b54c:	609a      	str	r2, [r3, #8]
  40b54e:	4629      	mov	r1, r5
  40b550:	4640      	mov	r0, r8
  40b552:	f7fe fdd1 	bl	40a0f8 <_free_r>
  40b556:	e01c      	b.n	40b592 <_realloc_r+0xde>
  40b558:	f027 0707 	bic.w	r7, r7, #7
  40b55c:	2f00      	cmp	r7, #0
  40b55e:	463a      	mov	r2, r7
  40b560:	dabf      	bge.n	40b4e2 <_realloc_r+0x2e>
  40b562:	2600      	movs	r6, #0
  40b564:	230c      	movs	r3, #12
  40b566:	4630      	mov	r0, r6
  40b568:	f8c8 3000 	str.w	r3, [r8]
  40b56c:	b003      	add	sp, #12
  40b56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b572:	462e      	mov	r6, r5
  40b574:	1be3      	subs	r3, r4, r7
  40b576:	2b0f      	cmp	r3, #15
  40b578:	d81e      	bhi.n	40b5b8 <_realloc_r+0x104>
  40b57a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40b57e:	f003 0301 	and.w	r3, r3, #1
  40b582:	4323      	orrs	r3, r4
  40b584:	444c      	add	r4, r9
  40b586:	f8c9 3004 	str.w	r3, [r9, #4]
  40b58a:	6863      	ldr	r3, [r4, #4]
  40b58c:	f043 0301 	orr.w	r3, r3, #1
  40b590:	6063      	str	r3, [r4, #4]
  40b592:	4640      	mov	r0, r8
  40b594:	f7ff fc8e 	bl	40aeb4 <__malloc_unlock>
  40b598:	4630      	mov	r0, r6
  40b59a:	b003      	add	sp, #12
  40b59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b5a0:	f023 0303 	bic.w	r3, r3, #3
  40b5a4:	18e1      	adds	r1, r4, r3
  40b5a6:	4291      	cmp	r1, r2
  40b5a8:	db1f      	blt.n	40b5ea <_realloc_r+0x136>
  40b5aa:	68c3      	ldr	r3, [r0, #12]
  40b5ac:	6882      	ldr	r2, [r0, #8]
  40b5ae:	462e      	mov	r6, r5
  40b5b0:	60d3      	str	r3, [r2, #12]
  40b5b2:	460c      	mov	r4, r1
  40b5b4:	609a      	str	r2, [r3, #8]
  40b5b6:	e7dd      	b.n	40b574 <_realloc_r+0xc0>
  40b5b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b5bc:	eb09 0107 	add.w	r1, r9, r7
  40b5c0:	f002 0201 	and.w	r2, r2, #1
  40b5c4:	444c      	add	r4, r9
  40b5c6:	f043 0301 	orr.w	r3, r3, #1
  40b5ca:	4317      	orrs	r7, r2
  40b5cc:	f8c9 7004 	str.w	r7, [r9, #4]
  40b5d0:	604b      	str	r3, [r1, #4]
  40b5d2:	6863      	ldr	r3, [r4, #4]
  40b5d4:	f043 0301 	orr.w	r3, r3, #1
  40b5d8:	3108      	adds	r1, #8
  40b5da:	6063      	str	r3, [r4, #4]
  40b5dc:	4640      	mov	r0, r8
  40b5de:	f7fe fd8b 	bl	40a0f8 <_free_r>
  40b5e2:	e7d6      	b.n	40b592 <_realloc_r+0xde>
  40b5e4:	4611      	mov	r1, r2
  40b5e6:	f7ff b8b3 	b.w	40a750 <_malloc_r>
  40b5ea:	f01e 0f01 	tst.w	lr, #1
  40b5ee:	d18e      	bne.n	40b50e <_realloc_r+0x5a>
  40b5f0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b5f4:	eba9 0a01 	sub.w	sl, r9, r1
  40b5f8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b5fc:	f021 0103 	bic.w	r1, r1, #3
  40b600:	440b      	add	r3, r1
  40b602:	4423      	add	r3, r4
  40b604:	4293      	cmp	r3, r2
  40b606:	db25      	blt.n	40b654 <_realloc_r+0x1a0>
  40b608:	68c2      	ldr	r2, [r0, #12]
  40b60a:	6881      	ldr	r1, [r0, #8]
  40b60c:	4656      	mov	r6, sl
  40b60e:	60ca      	str	r2, [r1, #12]
  40b610:	6091      	str	r1, [r2, #8]
  40b612:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b616:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b61a:	1f22      	subs	r2, r4, #4
  40b61c:	2a24      	cmp	r2, #36	; 0x24
  40b61e:	60c1      	str	r1, [r0, #12]
  40b620:	6088      	str	r0, [r1, #8]
  40b622:	f200 8094 	bhi.w	40b74e <_realloc_r+0x29a>
  40b626:	2a13      	cmp	r2, #19
  40b628:	d96f      	bls.n	40b70a <_realloc_r+0x256>
  40b62a:	6829      	ldr	r1, [r5, #0]
  40b62c:	f8ca 1008 	str.w	r1, [sl, #8]
  40b630:	6869      	ldr	r1, [r5, #4]
  40b632:	f8ca 100c 	str.w	r1, [sl, #12]
  40b636:	2a1b      	cmp	r2, #27
  40b638:	f200 80a2 	bhi.w	40b780 <_realloc_r+0x2cc>
  40b63c:	3508      	adds	r5, #8
  40b63e:	f10a 0210 	add.w	r2, sl, #16
  40b642:	e063      	b.n	40b70c <_realloc_r+0x258>
  40b644:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40b648:	eba9 0a03 	sub.w	sl, r9, r3
  40b64c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b650:	f021 0103 	bic.w	r1, r1, #3
  40b654:	1863      	adds	r3, r4, r1
  40b656:	4293      	cmp	r3, r2
  40b658:	f6ff af59 	blt.w	40b50e <_realloc_r+0x5a>
  40b65c:	4656      	mov	r6, sl
  40b65e:	e7d8      	b.n	40b612 <_realloc_r+0x15e>
  40b660:	6841      	ldr	r1, [r0, #4]
  40b662:	f021 0b03 	bic.w	fp, r1, #3
  40b666:	44a3      	add	fp, r4
  40b668:	f107 0010 	add.w	r0, r7, #16
  40b66c:	4583      	cmp	fp, r0
  40b66e:	da56      	bge.n	40b71e <_realloc_r+0x26a>
  40b670:	f01e 0f01 	tst.w	lr, #1
  40b674:	f47f af4b 	bne.w	40b50e <_realloc_r+0x5a>
  40b678:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b67c:	eba9 0a01 	sub.w	sl, r9, r1
  40b680:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b684:	f021 0103 	bic.w	r1, r1, #3
  40b688:	448b      	add	fp, r1
  40b68a:	4558      	cmp	r0, fp
  40b68c:	dce2      	bgt.n	40b654 <_realloc_r+0x1a0>
  40b68e:	4656      	mov	r6, sl
  40b690:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b694:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b698:	1f22      	subs	r2, r4, #4
  40b69a:	2a24      	cmp	r2, #36	; 0x24
  40b69c:	60c1      	str	r1, [r0, #12]
  40b69e:	6088      	str	r0, [r1, #8]
  40b6a0:	f200 808f 	bhi.w	40b7c2 <_realloc_r+0x30e>
  40b6a4:	2a13      	cmp	r2, #19
  40b6a6:	f240 808a 	bls.w	40b7be <_realloc_r+0x30a>
  40b6aa:	6829      	ldr	r1, [r5, #0]
  40b6ac:	f8ca 1008 	str.w	r1, [sl, #8]
  40b6b0:	6869      	ldr	r1, [r5, #4]
  40b6b2:	f8ca 100c 	str.w	r1, [sl, #12]
  40b6b6:	2a1b      	cmp	r2, #27
  40b6b8:	f200 808a 	bhi.w	40b7d0 <_realloc_r+0x31c>
  40b6bc:	3508      	adds	r5, #8
  40b6be:	f10a 0210 	add.w	r2, sl, #16
  40b6c2:	6829      	ldr	r1, [r5, #0]
  40b6c4:	6011      	str	r1, [r2, #0]
  40b6c6:	6869      	ldr	r1, [r5, #4]
  40b6c8:	6051      	str	r1, [r2, #4]
  40b6ca:	68a9      	ldr	r1, [r5, #8]
  40b6cc:	6091      	str	r1, [r2, #8]
  40b6ce:	eb0a 0107 	add.w	r1, sl, r7
  40b6d2:	ebab 0207 	sub.w	r2, fp, r7
  40b6d6:	f042 0201 	orr.w	r2, r2, #1
  40b6da:	6099      	str	r1, [r3, #8]
  40b6dc:	604a      	str	r2, [r1, #4]
  40b6de:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b6e2:	f003 0301 	and.w	r3, r3, #1
  40b6e6:	431f      	orrs	r7, r3
  40b6e8:	4640      	mov	r0, r8
  40b6ea:	f8ca 7004 	str.w	r7, [sl, #4]
  40b6ee:	f7ff fbe1 	bl	40aeb4 <__malloc_unlock>
  40b6f2:	e751      	b.n	40b598 <_realloc_r+0xe4>
  40b6f4:	682b      	ldr	r3, [r5, #0]
  40b6f6:	6003      	str	r3, [r0, #0]
  40b6f8:	686b      	ldr	r3, [r5, #4]
  40b6fa:	6043      	str	r3, [r0, #4]
  40b6fc:	2a1b      	cmp	r2, #27
  40b6fe:	d82d      	bhi.n	40b75c <_realloc_r+0x2a8>
  40b700:	f100 0308 	add.w	r3, r0, #8
  40b704:	f105 0208 	add.w	r2, r5, #8
  40b708:	e71b      	b.n	40b542 <_realloc_r+0x8e>
  40b70a:	4632      	mov	r2, r6
  40b70c:	6829      	ldr	r1, [r5, #0]
  40b70e:	6011      	str	r1, [r2, #0]
  40b710:	6869      	ldr	r1, [r5, #4]
  40b712:	6051      	str	r1, [r2, #4]
  40b714:	68a9      	ldr	r1, [r5, #8]
  40b716:	6091      	str	r1, [r2, #8]
  40b718:	461c      	mov	r4, r3
  40b71a:	46d1      	mov	r9, sl
  40b71c:	e72a      	b.n	40b574 <_realloc_r+0xc0>
  40b71e:	eb09 0107 	add.w	r1, r9, r7
  40b722:	ebab 0b07 	sub.w	fp, fp, r7
  40b726:	f04b 0201 	orr.w	r2, fp, #1
  40b72a:	6099      	str	r1, [r3, #8]
  40b72c:	604a      	str	r2, [r1, #4]
  40b72e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b732:	f003 0301 	and.w	r3, r3, #1
  40b736:	431f      	orrs	r7, r3
  40b738:	4640      	mov	r0, r8
  40b73a:	f845 7c04 	str.w	r7, [r5, #-4]
  40b73e:	f7ff fbb9 	bl	40aeb4 <__malloc_unlock>
  40b742:	462e      	mov	r6, r5
  40b744:	e728      	b.n	40b598 <_realloc_r+0xe4>
  40b746:	4629      	mov	r1, r5
  40b748:	f7ff fb4a 	bl	40ade0 <memmove>
  40b74c:	e6ff      	b.n	40b54e <_realloc_r+0x9a>
  40b74e:	4629      	mov	r1, r5
  40b750:	4630      	mov	r0, r6
  40b752:	461c      	mov	r4, r3
  40b754:	46d1      	mov	r9, sl
  40b756:	f7ff fb43 	bl	40ade0 <memmove>
  40b75a:	e70b      	b.n	40b574 <_realloc_r+0xc0>
  40b75c:	68ab      	ldr	r3, [r5, #8]
  40b75e:	6083      	str	r3, [r0, #8]
  40b760:	68eb      	ldr	r3, [r5, #12]
  40b762:	60c3      	str	r3, [r0, #12]
  40b764:	2a24      	cmp	r2, #36	; 0x24
  40b766:	d017      	beq.n	40b798 <_realloc_r+0x2e4>
  40b768:	f100 0310 	add.w	r3, r0, #16
  40b76c:	f105 0210 	add.w	r2, r5, #16
  40b770:	e6e7      	b.n	40b542 <_realloc_r+0x8e>
  40b772:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b776:	f023 0303 	bic.w	r3, r3, #3
  40b77a:	441c      	add	r4, r3
  40b77c:	462e      	mov	r6, r5
  40b77e:	e6f9      	b.n	40b574 <_realloc_r+0xc0>
  40b780:	68a9      	ldr	r1, [r5, #8]
  40b782:	f8ca 1010 	str.w	r1, [sl, #16]
  40b786:	68e9      	ldr	r1, [r5, #12]
  40b788:	f8ca 1014 	str.w	r1, [sl, #20]
  40b78c:	2a24      	cmp	r2, #36	; 0x24
  40b78e:	d00c      	beq.n	40b7aa <_realloc_r+0x2f6>
  40b790:	3510      	adds	r5, #16
  40b792:	f10a 0218 	add.w	r2, sl, #24
  40b796:	e7b9      	b.n	40b70c <_realloc_r+0x258>
  40b798:	692b      	ldr	r3, [r5, #16]
  40b79a:	6103      	str	r3, [r0, #16]
  40b79c:	696b      	ldr	r3, [r5, #20]
  40b79e:	6143      	str	r3, [r0, #20]
  40b7a0:	f105 0218 	add.w	r2, r5, #24
  40b7a4:	f100 0318 	add.w	r3, r0, #24
  40b7a8:	e6cb      	b.n	40b542 <_realloc_r+0x8e>
  40b7aa:	692a      	ldr	r2, [r5, #16]
  40b7ac:	f8ca 2018 	str.w	r2, [sl, #24]
  40b7b0:	696a      	ldr	r2, [r5, #20]
  40b7b2:	f8ca 201c 	str.w	r2, [sl, #28]
  40b7b6:	3518      	adds	r5, #24
  40b7b8:	f10a 0220 	add.w	r2, sl, #32
  40b7bc:	e7a6      	b.n	40b70c <_realloc_r+0x258>
  40b7be:	4632      	mov	r2, r6
  40b7c0:	e77f      	b.n	40b6c2 <_realloc_r+0x20e>
  40b7c2:	4629      	mov	r1, r5
  40b7c4:	4630      	mov	r0, r6
  40b7c6:	9301      	str	r3, [sp, #4]
  40b7c8:	f7ff fb0a 	bl	40ade0 <memmove>
  40b7cc:	9b01      	ldr	r3, [sp, #4]
  40b7ce:	e77e      	b.n	40b6ce <_realloc_r+0x21a>
  40b7d0:	68a9      	ldr	r1, [r5, #8]
  40b7d2:	f8ca 1010 	str.w	r1, [sl, #16]
  40b7d6:	68e9      	ldr	r1, [r5, #12]
  40b7d8:	f8ca 1014 	str.w	r1, [sl, #20]
  40b7dc:	2a24      	cmp	r2, #36	; 0x24
  40b7de:	d003      	beq.n	40b7e8 <_realloc_r+0x334>
  40b7e0:	3510      	adds	r5, #16
  40b7e2:	f10a 0218 	add.w	r2, sl, #24
  40b7e6:	e76c      	b.n	40b6c2 <_realloc_r+0x20e>
  40b7e8:	692a      	ldr	r2, [r5, #16]
  40b7ea:	f8ca 2018 	str.w	r2, [sl, #24]
  40b7ee:	696a      	ldr	r2, [r5, #20]
  40b7f0:	f8ca 201c 	str.w	r2, [sl, #28]
  40b7f4:	3518      	adds	r5, #24
  40b7f6:	f10a 0220 	add.w	r2, sl, #32
  40b7fa:	e762      	b.n	40b6c2 <_realloc_r+0x20e>
  40b7fc:	204005c0 	.word	0x204005c0

0040b800 <_sbrk_r>:
  40b800:	b538      	push	{r3, r4, r5, lr}
  40b802:	4c07      	ldr	r4, [pc, #28]	; (40b820 <_sbrk_r+0x20>)
  40b804:	2300      	movs	r3, #0
  40b806:	4605      	mov	r5, r0
  40b808:	4608      	mov	r0, r1
  40b80a:	6023      	str	r3, [r4, #0]
  40b80c:	f7fa f8dc 	bl	4059c8 <_sbrk>
  40b810:	1c43      	adds	r3, r0, #1
  40b812:	d000      	beq.n	40b816 <_sbrk_r+0x16>
  40b814:	bd38      	pop	{r3, r4, r5, pc}
  40b816:	6823      	ldr	r3, [r4, #0]
  40b818:	2b00      	cmp	r3, #0
  40b81a:	d0fb      	beq.n	40b814 <_sbrk_r+0x14>
  40b81c:	602b      	str	r3, [r5, #0]
  40b81e:	bd38      	pop	{r3, r4, r5, pc}
  40b820:	2040d04c 	.word	0x2040d04c

0040b824 <__sread>:
  40b824:	b510      	push	{r4, lr}
  40b826:	460c      	mov	r4, r1
  40b828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b82c:	f000 fb18 	bl	40be60 <_read_r>
  40b830:	2800      	cmp	r0, #0
  40b832:	db03      	blt.n	40b83c <__sread+0x18>
  40b834:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b836:	4403      	add	r3, r0
  40b838:	6523      	str	r3, [r4, #80]	; 0x50
  40b83a:	bd10      	pop	{r4, pc}
  40b83c:	89a3      	ldrh	r3, [r4, #12]
  40b83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b842:	81a3      	strh	r3, [r4, #12]
  40b844:	bd10      	pop	{r4, pc}
  40b846:	bf00      	nop

0040b848 <__swrite>:
  40b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b84c:	4616      	mov	r6, r2
  40b84e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40b852:	461f      	mov	r7, r3
  40b854:	05d3      	lsls	r3, r2, #23
  40b856:	460c      	mov	r4, r1
  40b858:	4605      	mov	r5, r0
  40b85a:	d507      	bpl.n	40b86c <__swrite+0x24>
  40b85c:	2200      	movs	r2, #0
  40b85e:	2302      	movs	r3, #2
  40b860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b864:	f000 fae6 	bl	40be34 <_lseek_r>
  40b868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b870:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b874:	81a2      	strh	r2, [r4, #12]
  40b876:	463b      	mov	r3, r7
  40b878:	4632      	mov	r2, r6
  40b87a:	4628      	mov	r0, r5
  40b87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b880:	f000 b996 	b.w	40bbb0 <_write_r>

0040b884 <__sseek>:
  40b884:	b510      	push	{r4, lr}
  40b886:	460c      	mov	r4, r1
  40b888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b88c:	f000 fad2 	bl	40be34 <_lseek_r>
  40b890:	89a3      	ldrh	r3, [r4, #12]
  40b892:	1c42      	adds	r2, r0, #1
  40b894:	bf0e      	itee	eq
  40b896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b89a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b89e:	6520      	strne	r0, [r4, #80]	; 0x50
  40b8a0:	81a3      	strh	r3, [r4, #12]
  40b8a2:	bd10      	pop	{r4, pc}

0040b8a4 <__sclose>:
  40b8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b8a8:	f000 ba2a 	b.w	40bd00 <_close_r>

0040b8ac <strchr>:
  40b8ac:	b2c9      	uxtb	r1, r1
  40b8ae:	2900      	cmp	r1, #0
  40b8b0:	d041      	beq.n	40b936 <strchr+0x8a>
  40b8b2:	0782      	lsls	r2, r0, #30
  40b8b4:	b4f0      	push	{r4, r5, r6, r7}
  40b8b6:	d067      	beq.n	40b988 <strchr+0xdc>
  40b8b8:	7803      	ldrb	r3, [r0, #0]
  40b8ba:	2b00      	cmp	r3, #0
  40b8bc:	d068      	beq.n	40b990 <strchr+0xe4>
  40b8be:	4299      	cmp	r1, r3
  40b8c0:	d037      	beq.n	40b932 <strchr+0x86>
  40b8c2:	1c43      	adds	r3, r0, #1
  40b8c4:	e004      	b.n	40b8d0 <strchr+0x24>
  40b8c6:	f813 0b01 	ldrb.w	r0, [r3], #1
  40b8ca:	b390      	cbz	r0, 40b932 <strchr+0x86>
  40b8cc:	4281      	cmp	r1, r0
  40b8ce:	d02f      	beq.n	40b930 <strchr+0x84>
  40b8d0:	079a      	lsls	r2, r3, #30
  40b8d2:	461c      	mov	r4, r3
  40b8d4:	d1f7      	bne.n	40b8c6 <strchr+0x1a>
  40b8d6:	6825      	ldr	r5, [r4, #0]
  40b8d8:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  40b8dc:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40b8e0:	ea83 0605 	eor.w	r6, r3, r5
  40b8e4:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40b8e8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  40b8ec:	ea20 0006 	bic.w	r0, r0, r6
  40b8f0:	ea22 0205 	bic.w	r2, r2, r5
  40b8f4:	4302      	orrs	r2, r0
  40b8f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40b8fa:	d111      	bne.n	40b920 <strchr+0x74>
  40b8fc:	4620      	mov	r0, r4
  40b8fe:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40b902:	ea83 0706 	eor.w	r7, r3, r6
  40b906:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40b90a:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40b90e:	ea25 0507 	bic.w	r5, r5, r7
  40b912:	ea22 0206 	bic.w	r2, r2, r6
  40b916:	432a      	orrs	r2, r5
  40b918:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40b91c:	d0ef      	beq.n	40b8fe <strchr+0x52>
  40b91e:	4604      	mov	r4, r0
  40b920:	7820      	ldrb	r0, [r4, #0]
  40b922:	b918      	cbnz	r0, 40b92c <strchr+0x80>
  40b924:	e005      	b.n	40b932 <strchr+0x86>
  40b926:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40b92a:	b110      	cbz	r0, 40b932 <strchr+0x86>
  40b92c:	4281      	cmp	r1, r0
  40b92e:	d1fa      	bne.n	40b926 <strchr+0x7a>
  40b930:	4620      	mov	r0, r4
  40b932:	bcf0      	pop	{r4, r5, r6, r7}
  40b934:	4770      	bx	lr
  40b936:	0783      	lsls	r3, r0, #30
  40b938:	d024      	beq.n	40b984 <strchr+0xd8>
  40b93a:	7803      	ldrb	r3, [r0, #0]
  40b93c:	2b00      	cmp	r3, #0
  40b93e:	d0f9      	beq.n	40b934 <strchr+0x88>
  40b940:	1c43      	adds	r3, r0, #1
  40b942:	e003      	b.n	40b94c <strchr+0xa0>
  40b944:	7802      	ldrb	r2, [r0, #0]
  40b946:	3301      	adds	r3, #1
  40b948:	2a00      	cmp	r2, #0
  40b94a:	d0f3      	beq.n	40b934 <strchr+0x88>
  40b94c:	0799      	lsls	r1, r3, #30
  40b94e:	4618      	mov	r0, r3
  40b950:	d1f8      	bne.n	40b944 <strchr+0x98>
  40b952:	6819      	ldr	r1, [r3, #0]
  40b954:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40b958:	ea22 0201 	bic.w	r2, r2, r1
  40b95c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40b960:	d108      	bne.n	40b974 <strchr+0xc8>
  40b962:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40b966:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40b96a:	ea22 0201 	bic.w	r2, r2, r1
  40b96e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40b972:	d0f6      	beq.n	40b962 <strchr+0xb6>
  40b974:	781a      	ldrb	r2, [r3, #0]
  40b976:	4618      	mov	r0, r3
  40b978:	b142      	cbz	r2, 40b98c <strchr+0xe0>
  40b97a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40b97e:	2b00      	cmp	r3, #0
  40b980:	d1fb      	bne.n	40b97a <strchr+0xce>
  40b982:	4770      	bx	lr
  40b984:	4603      	mov	r3, r0
  40b986:	e7e4      	b.n	40b952 <strchr+0xa6>
  40b988:	4604      	mov	r4, r0
  40b98a:	e7a4      	b.n	40b8d6 <strchr+0x2a>
  40b98c:	4618      	mov	r0, r3
  40b98e:	4770      	bx	lr
  40b990:	4618      	mov	r0, r3
  40b992:	e7ce      	b.n	40b932 <strchr+0x86>

0040b994 <__ssprint_r>:
  40b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b998:	6893      	ldr	r3, [r2, #8]
  40b99a:	b083      	sub	sp, #12
  40b99c:	4690      	mov	r8, r2
  40b99e:	2b00      	cmp	r3, #0
  40b9a0:	d070      	beq.n	40ba84 <__ssprint_r+0xf0>
  40b9a2:	4682      	mov	sl, r0
  40b9a4:	460c      	mov	r4, r1
  40b9a6:	6817      	ldr	r7, [r2, #0]
  40b9a8:	688d      	ldr	r5, [r1, #8]
  40b9aa:	6808      	ldr	r0, [r1, #0]
  40b9ac:	e042      	b.n	40ba34 <__ssprint_r+0xa0>
  40b9ae:	89a3      	ldrh	r3, [r4, #12]
  40b9b0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b9b4:	d02e      	beq.n	40ba14 <__ssprint_r+0x80>
  40b9b6:	6965      	ldr	r5, [r4, #20]
  40b9b8:	6921      	ldr	r1, [r4, #16]
  40b9ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40b9be:	eba0 0b01 	sub.w	fp, r0, r1
  40b9c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40b9c6:	f10b 0001 	add.w	r0, fp, #1
  40b9ca:	106d      	asrs	r5, r5, #1
  40b9cc:	4430      	add	r0, r6
  40b9ce:	42a8      	cmp	r0, r5
  40b9d0:	462a      	mov	r2, r5
  40b9d2:	bf84      	itt	hi
  40b9d4:	4605      	movhi	r5, r0
  40b9d6:	462a      	movhi	r2, r5
  40b9d8:	055b      	lsls	r3, r3, #21
  40b9da:	d538      	bpl.n	40ba4e <__ssprint_r+0xba>
  40b9dc:	4611      	mov	r1, r2
  40b9de:	4650      	mov	r0, sl
  40b9e0:	f7fe feb6 	bl	40a750 <_malloc_r>
  40b9e4:	2800      	cmp	r0, #0
  40b9e6:	d03c      	beq.n	40ba62 <__ssprint_r+0xce>
  40b9e8:	465a      	mov	r2, fp
  40b9ea:	6921      	ldr	r1, [r4, #16]
  40b9ec:	9001      	str	r0, [sp, #4]
  40b9ee:	f7fa fb77 	bl	4060e0 <memcpy>
  40b9f2:	89a2      	ldrh	r2, [r4, #12]
  40b9f4:	9b01      	ldr	r3, [sp, #4]
  40b9f6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40b9fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40b9fe:	81a2      	strh	r2, [r4, #12]
  40ba00:	eba5 020b 	sub.w	r2, r5, fp
  40ba04:	eb03 000b 	add.w	r0, r3, fp
  40ba08:	6165      	str	r5, [r4, #20]
  40ba0a:	6123      	str	r3, [r4, #16]
  40ba0c:	6020      	str	r0, [r4, #0]
  40ba0e:	60a2      	str	r2, [r4, #8]
  40ba10:	4635      	mov	r5, r6
  40ba12:	46b3      	mov	fp, r6
  40ba14:	465a      	mov	r2, fp
  40ba16:	4649      	mov	r1, r9
  40ba18:	f7ff f9e2 	bl	40ade0 <memmove>
  40ba1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40ba20:	68a2      	ldr	r2, [r4, #8]
  40ba22:	6820      	ldr	r0, [r4, #0]
  40ba24:	1b55      	subs	r5, r2, r5
  40ba26:	4458      	add	r0, fp
  40ba28:	1b9e      	subs	r6, r3, r6
  40ba2a:	60a5      	str	r5, [r4, #8]
  40ba2c:	6020      	str	r0, [r4, #0]
  40ba2e:	f8c8 6008 	str.w	r6, [r8, #8]
  40ba32:	b33e      	cbz	r6, 40ba84 <__ssprint_r+0xf0>
  40ba34:	687e      	ldr	r6, [r7, #4]
  40ba36:	463b      	mov	r3, r7
  40ba38:	3708      	adds	r7, #8
  40ba3a:	2e00      	cmp	r6, #0
  40ba3c:	d0fa      	beq.n	40ba34 <__ssprint_r+0xa0>
  40ba3e:	42ae      	cmp	r6, r5
  40ba40:	f8d3 9000 	ldr.w	r9, [r3]
  40ba44:	46ab      	mov	fp, r5
  40ba46:	d2b2      	bcs.n	40b9ae <__ssprint_r+0x1a>
  40ba48:	4635      	mov	r5, r6
  40ba4a:	46b3      	mov	fp, r6
  40ba4c:	e7e2      	b.n	40ba14 <__ssprint_r+0x80>
  40ba4e:	4650      	mov	r0, sl
  40ba50:	f7ff fd30 	bl	40b4b4 <_realloc_r>
  40ba54:	4603      	mov	r3, r0
  40ba56:	2800      	cmp	r0, #0
  40ba58:	d1d2      	bne.n	40ba00 <__ssprint_r+0x6c>
  40ba5a:	6921      	ldr	r1, [r4, #16]
  40ba5c:	4650      	mov	r0, sl
  40ba5e:	f7fe fb4b 	bl	40a0f8 <_free_r>
  40ba62:	230c      	movs	r3, #12
  40ba64:	f8ca 3000 	str.w	r3, [sl]
  40ba68:	89a3      	ldrh	r3, [r4, #12]
  40ba6a:	2200      	movs	r2, #0
  40ba6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba70:	f04f 30ff 	mov.w	r0, #4294967295
  40ba74:	81a3      	strh	r3, [r4, #12]
  40ba76:	f8c8 2008 	str.w	r2, [r8, #8]
  40ba7a:	f8c8 2004 	str.w	r2, [r8, #4]
  40ba7e:	b003      	add	sp, #12
  40ba80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba84:	2000      	movs	r0, #0
  40ba86:	f8c8 0004 	str.w	r0, [r8, #4]
  40ba8a:	b003      	add	sp, #12
  40ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ba90 <__swbuf_r>:
  40ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ba92:	460d      	mov	r5, r1
  40ba94:	4614      	mov	r4, r2
  40ba96:	4606      	mov	r6, r0
  40ba98:	b110      	cbz	r0, 40baa0 <__swbuf_r+0x10>
  40ba9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ba9c:	2b00      	cmp	r3, #0
  40ba9e:	d04b      	beq.n	40bb38 <__swbuf_r+0xa8>
  40baa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40baa4:	69a3      	ldr	r3, [r4, #24]
  40baa6:	60a3      	str	r3, [r4, #8]
  40baa8:	b291      	uxth	r1, r2
  40baaa:	0708      	lsls	r0, r1, #28
  40baac:	d539      	bpl.n	40bb22 <__swbuf_r+0x92>
  40baae:	6923      	ldr	r3, [r4, #16]
  40bab0:	2b00      	cmp	r3, #0
  40bab2:	d036      	beq.n	40bb22 <__swbuf_r+0x92>
  40bab4:	b2ed      	uxtb	r5, r5
  40bab6:	0489      	lsls	r1, r1, #18
  40bab8:	462f      	mov	r7, r5
  40baba:	d515      	bpl.n	40bae8 <__swbuf_r+0x58>
  40babc:	6822      	ldr	r2, [r4, #0]
  40babe:	6961      	ldr	r1, [r4, #20]
  40bac0:	1ad3      	subs	r3, r2, r3
  40bac2:	428b      	cmp	r3, r1
  40bac4:	da1c      	bge.n	40bb00 <__swbuf_r+0x70>
  40bac6:	3301      	adds	r3, #1
  40bac8:	68a1      	ldr	r1, [r4, #8]
  40baca:	1c50      	adds	r0, r2, #1
  40bacc:	3901      	subs	r1, #1
  40bace:	60a1      	str	r1, [r4, #8]
  40bad0:	6020      	str	r0, [r4, #0]
  40bad2:	7015      	strb	r5, [r2, #0]
  40bad4:	6962      	ldr	r2, [r4, #20]
  40bad6:	429a      	cmp	r2, r3
  40bad8:	d01a      	beq.n	40bb10 <__swbuf_r+0x80>
  40bada:	89a3      	ldrh	r3, [r4, #12]
  40badc:	07db      	lsls	r3, r3, #31
  40bade:	d501      	bpl.n	40bae4 <__swbuf_r+0x54>
  40bae0:	2d0a      	cmp	r5, #10
  40bae2:	d015      	beq.n	40bb10 <__swbuf_r+0x80>
  40bae4:	4638      	mov	r0, r7
  40bae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bae8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40baea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40baee:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40baf2:	81a2      	strh	r2, [r4, #12]
  40baf4:	6822      	ldr	r2, [r4, #0]
  40baf6:	6661      	str	r1, [r4, #100]	; 0x64
  40baf8:	6961      	ldr	r1, [r4, #20]
  40bafa:	1ad3      	subs	r3, r2, r3
  40bafc:	428b      	cmp	r3, r1
  40bafe:	dbe2      	blt.n	40bac6 <__swbuf_r+0x36>
  40bb00:	4621      	mov	r1, r4
  40bb02:	4630      	mov	r0, r6
  40bb04:	f7fe f97a 	bl	409dfc <_fflush_r>
  40bb08:	b940      	cbnz	r0, 40bb1c <__swbuf_r+0x8c>
  40bb0a:	6822      	ldr	r2, [r4, #0]
  40bb0c:	2301      	movs	r3, #1
  40bb0e:	e7db      	b.n	40bac8 <__swbuf_r+0x38>
  40bb10:	4621      	mov	r1, r4
  40bb12:	4630      	mov	r0, r6
  40bb14:	f7fe f972 	bl	409dfc <_fflush_r>
  40bb18:	2800      	cmp	r0, #0
  40bb1a:	d0e3      	beq.n	40bae4 <__swbuf_r+0x54>
  40bb1c:	f04f 37ff 	mov.w	r7, #4294967295
  40bb20:	e7e0      	b.n	40bae4 <__swbuf_r+0x54>
  40bb22:	4621      	mov	r1, r4
  40bb24:	4630      	mov	r0, r6
  40bb26:	f7fd f895 	bl	408c54 <__swsetup_r>
  40bb2a:	2800      	cmp	r0, #0
  40bb2c:	d1f6      	bne.n	40bb1c <__swbuf_r+0x8c>
  40bb2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bb32:	6923      	ldr	r3, [r4, #16]
  40bb34:	b291      	uxth	r1, r2
  40bb36:	e7bd      	b.n	40bab4 <__swbuf_r+0x24>
  40bb38:	f7fe f9b8 	bl	409eac <__sinit>
  40bb3c:	e7b0      	b.n	40baa0 <__swbuf_r+0x10>
  40bb3e:	bf00      	nop

0040bb40 <_wcrtomb_r>:
  40bb40:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bb42:	4606      	mov	r6, r0
  40bb44:	b085      	sub	sp, #20
  40bb46:	461f      	mov	r7, r3
  40bb48:	b189      	cbz	r1, 40bb6e <_wcrtomb_r+0x2e>
  40bb4a:	4c10      	ldr	r4, [pc, #64]	; (40bb8c <_wcrtomb_r+0x4c>)
  40bb4c:	4d10      	ldr	r5, [pc, #64]	; (40bb90 <_wcrtomb_r+0x50>)
  40bb4e:	6824      	ldr	r4, [r4, #0]
  40bb50:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40bb52:	2c00      	cmp	r4, #0
  40bb54:	bf08      	it	eq
  40bb56:	462c      	moveq	r4, r5
  40bb58:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40bb5c:	47a0      	blx	r4
  40bb5e:	1c43      	adds	r3, r0, #1
  40bb60:	d103      	bne.n	40bb6a <_wcrtomb_r+0x2a>
  40bb62:	2200      	movs	r2, #0
  40bb64:	238a      	movs	r3, #138	; 0x8a
  40bb66:	603a      	str	r2, [r7, #0]
  40bb68:	6033      	str	r3, [r6, #0]
  40bb6a:	b005      	add	sp, #20
  40bb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bb6e:	460c      	mov	r4, r1
  40bb70:	4906      	ldr	r1, [pc, #24]	; (40bb8c <_wcrtomb_r+0x4c>)
  40bb72:	4a07      	ldr	r2, [pc, #28]	; (40bb90 <_wcrtomb_r+0x50>)
  40bb74:	6809      	ldr	r1, [r1, #0]
  40bb76:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40bb78:	2900      	cmp	r1, #0
  40bb7a:	bf08      	it	eq
  40bb7c:	4611      	moveq	r1, r2
  40bb7e:	4622      	mov	r2, r4
  40bb80:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40bb84:	a901      	add	r1, sp, #4
  40bb86:	47a0      	blx	r4
  40bb88:	e7e9      	b.n	40bb5e <_wcrtomb_r+0x1e>
  40bb8a:	bf00      	nop
  40bb8c:	20400024 	.word	0x20400024
  40bb90:	20400454 	.word	0x20400454

0040bb94 <__ascii_wctomb>:
  40bb94:	b121      	cbz	r1, 40bba0 <__ascii_wctomb+0xc>
  40bb96:	2aff      	cmp	r2, #255	; 0xff
  40bb98:	d804      	bhi.n	40bba4 <__ascii_wctomb+0x10>
  40bb9a:	700a      	strb	r2, [r1, #0]
  40bb9c:	2001      	movs	r0, #1
  40bb9e:	4770      	bx	lr
  40bba0:	4608      	mov	r0, r1
  40bba2:	4770      	bx	lr
  40bba4:	238a      	movs	r3, #138	; 0x8a
  40bba6:	6003      	str	r3, [r0, #0]
  40bba8:	f04f 30ff 	mov.w	r0, #4294967295
  40bbac:	4770      	bx	lr
  40bbae:	bf00      	nop

0040bbb0 <_write_r>:
  40bbb0:	b570      	push	{r4, r5, r6, lr}
  40bbb2:	460d      	mov	r5, r1
  40bbb4:	4c08      	ldr	r4, [pc, #32]	; (40bbd8 <_write_r+0x28>)
  40bbb6:	4611      	mov	r1, r2
  40bbb8:	4606      	mov	r6, r0
  40bbba:	461a      	mov	r2, r3
  40bbbc:	4628      	mov	r0, r5
  40bbbe:	2300      	movs	r3, #0
  40bbc0:	6023      	str	r3, [r4, #0]
  40bbc2:	f7f9 f891 	bl	404ce8 <_write>
  40bbc6:	1c43      	adds	r3, r0, #1
  40bbc8:	d000      	beq.n	40bbcc <_write_r+0x1c>
  40bbca:	bd70      	pop	{r4, r5, r6, pc}
  40bbcc:	6823      	ldr	r3, [r4, #0]
  40bbce:	2b00      	cmp	r3, #0
  40bbd0:	d0fb      	beq.n	40bbca <_write_r+0x1a>
  40bbd2:	6033      	str	r3, [r6, #0]
  40bbd4:	bd70      	pop	{r4, r5, r6, pc}
  40bbd6:	bf00      	nop
  40bbd8:	2040d04c 	.word	0x2040d04c

0040bbdc <__register_exitproc>:
  40bbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40bbe0:	4d2c      	ldr	r5, [pc, #176]	; (40bc94 <__register_exitproc+0xb8>)
  40bbe2:	4606      	mov	r6, r0
  40bbe4:	6828      	ldr	r0, [r5, #0]
  40bbe6:	4698      	mov	r8, r3
  40bbe8:	460f      	mov	r7, r1
  40bbea:	4691      	mov	r9, r2
  40bbec:	f7fe fd2c 	bl	40a648 <__retarget_lock_acquire_recursive>
  40bbf0:	4b29      	ldr	r3, [pc, #164]	; (40bc98 <__register_exitproc+0xbc>)
  40bbf2:	681c      	ldr	r4, [r3, #0]
  40bbf4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40bbf8:	2b00      	cmp	r3, #0
  40bbfa:	d03e      	beq.n	40bc7a <__register_exitproc+0x9e>
  40bbfc:	685a      	ldr	r2, [r3, #4]
  40bbfe:	2a1f      	cmp	r2, #31
  40bc00:	dc1c      	bgt.n	40bc3c <__register_exitproc+0x60>
  40bc02:	f102 0e01 	add.w	lr, r2, #1
  40bc06:	b176      	cbz	r6, 40bc26 <__register_exitproc+0x4a>
  40bc08:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40bc0c:	2401      	movs	r4, #1
  40bc0e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40bc12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40bc16:	4094      	lsls	r4, r2
  40bc18:	4320      	orrs	r0, r4
  40bc1a:	2e02      	cmp	r6, #2
  40bc1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40bc20:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40bc24:	d023      	beq.n	40bc6e <__register_exitproc+0x92>
  40bc26:	3202      	adds	r2, #2
  40bc28:	f8c3 e004 	str.w	lr, [r3, #4]
  40bc2c:	6828      	ldr	r0, [r5, #0]
  40bc2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40bc32:	f7fe fd0b 	bl	40a64c <__retarget_lock_release_recursive>
  40bc36:	2000      	movs	r0, #0
  40bc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bc3c:	4b17      	ldr	r3, [pc, #92]	; (40bc9c <__register_exitproc+0xc0>)
  40bc3e:	b30b      	cbz	r3, 40bc84 <__register_exitproc+0xa8>
  40bc40:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40bc44:	f7fe fd7c 	bl	40a740 <malloc>
  40bc48:	4603      	mov	r3, r0
  40bc4a:	b1d8      	cbz	r0, 40bc84 <__register_exitproc+0xa8>
  40bc4c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40bc50:	6002      	str	r2, [r0, #0]
  40bc52:	2100      	movs	r1, #0
  40bc54:	6041      	str	r1, [r0, #4]
  40bc56:	460a      	mov	r2, r1
  40bc58:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40bc5c:	f04f 0e01 	mov.w	lr, #1
  40bc60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40bc64:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40bc68:	2e00      	cmp	r6, #0
  40bc6a:	d0dc      	beq.n	40bc26 <__register_exitproc+0x4a>
  40bc6c:	e7cc      	b.n	40bc08 <__register_exitproc+0x2c>
  40bc6e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40bc72:	430c      	orrs	r4, r1
  40bc74:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40bc78:	e7d5      	b.n	40bc26 <__register_exitproc+0x4a>
  40bc7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40bc7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40bc82:	e7bb      	b.n	40bbfc <__register_exitproc+0x20>
  40bc84:	6828      	ldr	r0, [r5, #0]
  40bc86:	f7fe fce1 	bl	40a64c <__retarget_lock_release_recursive>
  40bc8a:	f04f 30ff 	mov.w	r0, #4294967295
  40bc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bc92:	bf00      	nop
  40bc94:	20400450 	.word	0x20400450
  40bc98:	0040dabc 	.word	0x0040dabc
  40bc9c:	0040a741 	.word	0x0040a741

0040bca0 <_calloc_r>:
  40bca0:	b510      	push	{r4, lr}
  40bca2:	fb02 f101 	mul.w	r1, r2, r1
  40bca6:	f7fe fd53 	bl	40a750 <_malloc_r>
  40bcaa:	4604      	mov	r4, r0
  40bcac:	b1d8      	cbz	r0, 40bce6 <_calloc_r+0x46>
  40bcae:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bcb2:	f022 0203 	bic.w	r2, r2, #3
  40bcb6:	3a04      	subs	r2, #4
  40bcb8:	2a24      	cmp	r2, #36	; 0x24
  40bcba:	d818      	bhi.n	40bcee <_calloc_r+0x4e>
  40bcbc:	2a13      	cmp	r2, #19
  40bcbe:	d914      	bls.n	40bcea <_calloc_r+0x4a>
  40bcc0:	2300      	movs	r3, #0
  40bcc2:	2a1b      	cmp	r2, #27
  40bcc4:	6003      	str	r3, [r0, #0]
  40bcc6:	6043      	str	r3, [r0, #4]
  40bcc8:	d916      	bls.n	40bcf8 <_calloc_r+0x58>
  40bcca:	2a24      	cmp	r2, #36	; 0x24
  40bccc:	6083      	str	r3, [r0, #8]
  40bcce:	60c3      	str	r3, [r0, #12]
  40bcd0:	bf11      	iteee	ne
  40bcd2:	f100 0210 	addne.w	r2, r0, #16
  40bcd6:	6103      	streq	r3, [r0, #16]
  40bcd8:	6143      	streq	r3, [r0, #20]
  40bcda:	f100 0218 	addeq.w	r2, r0, #24
  40bcde:	2300      	movs	r3, #0
  40bce0:	6013      	str	r3, [r2, #0]
  40bce2:	6053      	str	r3, [r2, #4]
  40bce4:	6093      	str	r3, [r2, #8]
  40bce6:	4620      	mov	r0, r4
  40bce8:	bd10      	pop	{r4, pc}
  40bcea:	4602      	mov	r2, r0
  40bcec:	e7f7      	b.n	40bcde <_calloc_r+0x3e>
  40bcee:	2100      	movs	r1, #0
  40bcf0:	f7fa fa90 	bl	406214 <memset>
  40bcf4:	4620      	mov	r0, r4
  40bcf6:	bd10      	pop	{r4, pc}
  40bcf8:	f100 0208 	add.w	r2, r0, #8
  40bcfc:	e7ef      	b.n	40bcde <_calloc_r+0x3e>
  40bcfe:	bf00      	nop

0040bd00 <_close_r>:
  40bd00:	b538      	push	{r3, r4, r5, lr}
  40bd02:	4c07      	ldr	r4, [pc, #28]	; (40bd20 <_close_r+0x20>)
  40bd04:	2300      	movs	r3, #0
  40bd06:	4605      	mov	r5, r0
  40bd08:	4608      	mov	r0, r1
  40bd0a:	6023      	str	r3, [r4, #0]
  40bd0c:	f7f9 fe78 	bl	405a00 <_close>
  40bd10:	1c43      	adds	r3, r0, #1
  40bd12:	d000      	beq.n	40bd16 <_close_r+0x16>
  40bd14:	bd38      	pop	{r3, r4, r5, pc}
  40bd16:	6823      	ldr	r3, [r4, #0]
  40bd18:	2b00      	cmp	r3, #0
  40bd1a:	d0fb      	beq.n	40bd14 <_close_r+0x14>
  40bd1c:	602b      	str	r3, [r5, #0]
  40bd1e:	bd38      	pop	{r3, r4, r5, pc}
  40bd20:	2040d04c 	.word	0x2040d04c

0040bd24 <_fclose_r>:
  40bd24:	b570      	push	{r4, r5, r6, lr}
  40bd26:	b159      	cbz	r1, 40bd40 <_fclose_r+0x1c>
  40bd28:	4605      	mov	r5, r0
  40bd2a:	460c      	mov	r4, r1
  40bd2c:	b110      	cbz	r0, 40bd34 <_fclose_r+0x10>
  40bd2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bd30:	2b00      	cmp	r3, #0
  40bd32:	d03c      	beq.n	40bdae <_fclose_r+0x8a>
  40bd34:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bd36:	07d8      	lsls	r0, r3, #31
  40bd38:	d505      	bpl.n	40bd46 <_fclose_r+0x22>
  40bd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bd3e:	b92b      	cbnz	r3, 40bd4c <_fclose_r+0x28>
  40bd40:	2600      	movs	r6, #0
  40bd42:	4630      	mov	r0, r6
  40bd44:	bd70      	pop	{r4, r5, r6, pc}
  40bd46:	89a3      	ldrh	r3, [r4, #12]
  40bd48:	0599      	lsls	r1, r3, #22
  40bd4a:	d53c      	bpl.n	40bdc6 <_fclose_r+0xa2>
  40bd4c:	4621      	mov	r1, r4
  40bd4e:	4628      	mov	r0, r5
  40bd50:	f7fd ffb4 	bl	409cbc <__sflush_r>
  40bd54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40bd56:	4606      	mov	r6, r0
  40bd58:	b133      	cbz	r3, 40bd68 <_fclose_r+0x44>
  40bd5a:	69e1      	ldr	r1, [r4, #28]
  40bd5c:	4628      	mov	r0, r5
  40bd5e:	4798      	blx	r3
  40bd60:	2800      	cmp	r0, #0
  40bd62:	bfb8      	it	lt
  40bd64:	f04f 36ff 	movlt.w	r6, #4294967295
  40bd68:	89a3      	ldrh	r3, [r4, #12]
  40bd6a:	061a      	lsls	r2, r3, #24
  40bd6c:	d422      	bmi.n	40bdb4 <_fclose_r+0x90>
  40bd6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40bd70:	b141      	cbz	r1, 40bd84 <_fclose_r+0x60>
  40bd72:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40bd76:	4299      	cmp	r1, r3
  40bd78:	d002      	beq.n	40bd80 <_fclose_r+0x5c>
  40bd7a:	4628      	mov	r0, r5
  40bd7c:	f7fe f9bc 	bl	40a0f8 <_free_r>
  40bd80:	2300      	movs	r3, #0
  40bd82:	6323      	str	r3, [r4, #48]	; 0x30
  40bd84:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40bd86:	b121      	cbz	r1, 40bd92 <_fclose_r+0x6e>
  40bd88:	4628      	mov	r0, r5
  40bd8a:	f7fe f9b5 	bl	40a0f8 <_free_r>
  40bd8e:	2300      	movs	r3, #0
  40bd90:	6463      	str	r3, [r4, #68]	; 0x44
  40bd92:	f7fe f8b7 	bl	409f04 <__sfp_lock_acquire>
  40bd96:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bd98:	2200      	movs	r2, #0
  40bd9a:	07db      	lsls	r3, r3, #31
  40bd9c:	81a2      	strh	r2, [r4, #12]
  40bd9e:	d50e      	bpl.n	40bdbe <_fclose_r+0x9a>
  40bda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bda2:	f7fe fc4f 	bl	40a644 <__retarget_lock_close_recursive>
  40bda6:	f7fe f8b3 	bl	409f10 <__sfp_lock_release>
  40bdaa:	4630      	mov	r0, r6
  40bdac:	bd70      	pop	{r4, r5, r6, pc}
  40bdae:	f7fe f87d 	bl	409eac <__sinit>
  40bdb2:	e7bf      	b.n	40bd34 <_fclose_r+0x10>
  40bdb4:	6921      	ldr	r1, [r4, #16]
  40bdb6:	4628      	mov	r0, r5
  40bdb8:	f7fe f99e 	bl	40a0f8 <_free_r>
  40bdbc:	e7d7      	b.n	40bd6e <_fclose_r+0x4a>
  40bdbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bdc0:	f7fe fc44 	bl	40a64c <__retarget_lock_release_recursive>
  40bdc4:	e7ec      	b.n	40bda0 <_fclose_r+0x7c>
  40bdc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bdc8:	f7fe fc3e 	bl	40a648 <__retarget_lock_acquire_recursive>
  40bdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bdd0:	2b00      	cmp	r3, #0
  40bdd2:	d1bb      	bne.n	40bd4c <_fclose_r+0x28>
  40bdd4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40bdd6:	f016 0601 	ands.w	r6, r6, #1
  40bdda:	d1b1      	bne.n	40bd40 <_fclose_r+0x1c>
  40bddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bdde:	f7fe fc35 	bl	40a64c <__retarget_lock_release_recursive>
  40bde2:	4630      	mov	r0, r6
  40bde4:	bd70      	pop	{r4, r5, r6, pc}
  40bde6:	bf00      	nop

0040bde8 <_fstat_r>:
  40bde8:	b538      	push	{r3, r4, r5, lr}
  40bdea:	460b      	mov	r3, r1
  40bdec:	4c07      	ldr	r4, [pc, #28]	; (40be0c <_fstat_r+0x24>)
  40bdee:	4605      	mov	r5, r0
  40bdf0:	4611      	mov	r1, r2
  40bdf2:	4618      	mov	r0, r3
  40bdf4:	2300      	movs	r3, #0
  40bdf6:	6023      	str	r3, [r4, #0]
  40bdf8:	f7f9 fe05 	bl	405a06 <_fstat>
  40bdfc:	1c43      	adds	r3, r0, #1
  40bdfe:	d000      	beq.n	40be02 <_fstat_r+0x1a>
  40be00:	bd38      	pop	{r3, r4, r5, pc}
  40be02:	6823      	ldr	r3, [r4, #0]
  40be04:	2b00      	cmp	r3, #0
  40be06:	d0fb      	beq.n	40be00 <_fstat_r+0x18>
  40be08:	602b      	str	r3, [r5, #0]
  40be0a:	bd38      	pop	{r3, r4, r5, pc}
  40be0c:	2040d04c 	.word	0x2040d04c

0040be10 <_isatty_r>:
  40be10:	b538      	push	{r3, r4, r5, lr}
  40be12:	4c07      	ldr	r4, [pc, #28]	; (40be30 <_isatty_r+0x20>)
  40be14:	2300      	movs	r3, #0
  40be16:	4605      	mov	r5, r0
  40be18:	4608      	mov	r0, r1
  40be1a:	6023      	str	r3, [r4, #0]
  40be1c:	f7f9 fdf8 	bl	405a10 <_isatty>
  40be20:	1c43      	adds	r3, r0, #1
  40be22:	d000      	beq.n	40be26 <_isatty_r+0x16>
  40be24:	bd38      	pop	{r3, r4, r5, pc}
  40be26:	6823      	ldr	r3, [r4, #0]
  40be28:	2b00      	cmp	r3, #0
  40be2a:	d0fb      	beq.n	40be24 <_isatty_r+0x14>
  40be2c:	602b      	str	r3, [r5, #0]
  40be2e:	bd38      	pop	{r3, r4, r5, pc}
  40be30:	2040d04c 	.word	0x2040d04c

0040be34 <_lseek_r>:
  40be34:	b570      	push	{r4, r5, r6, lr}
  40be36:	460d      	mov	r5, r1
  40be38:	4c08      	ldr	r4, [pc, #32]	; (40be5c <_lseek_r+0x28>)
  40be3a:	4611      	mov	r1, r2
  40be3c:	4606      	mov	r6, r0
  40be3e:	461a      	mov	r2, r3
  40be40:	4628      	mov	r0, r5
  40be42:	2300      	movs	r3, #0
  40be44:	6023      	str	r3, [r4, #0]
  40be46:	f7f9 fde5 	bl	405a14 <_lseek>
  40be4a:	1c43      	adds	r3, r0, #1
  40be4c:	d000      	beq.n	40be50 <_lseek_r+0x1c>
  40be4e:	bd70      	pop	{r4, r5, r6, pc}
  40be50:	6823      	ldr	r3, [r4, #0]
  40be52:	2b00      	cmp	r3, #0
  40be54:	d0fb      	beq.n	40be4e <_lseek_r+0x1a>
  40be56:	6033      	str	r3, [r6, #0]
  40be58:	bd70      	pop	{r4, r5, r6, pc}
  40be5a:	bf00      	nop
  40be5c:	2040d04c 	.word	0x2040d04c

0040be60 <_read_r>:
  40be60:	b570      	push	{r4, r5, r6, lr}
  40be62:	460d      	mov	r5, r1
  40be64:	4c08      	ldr	r4, [pc, #32]	; (40be88 <_read_r+0x28>)
  40be66:	4611      	mov	r1, r2
  40be68:	4606      	mov	r6, r0
  40be6a:	461a      	mov	r2, r3
  40be6c:	4628      	mov	r0, r5
  40be6e:	2300      	movs	r3, #0
  40be70:	6023      	str	r3, [r4, #0]
  40be72:	f7f8 ff1b 	bl	404cac <_read>
  40be76:	1c43      	adds	r3, r0, #1
  40be78:	d000      	beq.n	40be7c <_read_r+0x1c>
  40be7a:	bd70      	pop	{r4, r5, r6, pc}
  40be7c:	6823      	ldr	r3, [r4, #0]
  40be7e:	2b00      	cmp	r3, #0
  40be80:	d0fb      	beq.n	40be7a <_read_r+0x1a>
  40be82:	6033      	str	r3, [r6, #0]
  40be84:	bd70      	pop	{r4, r5, r6, pc}
  40be86:	bf00      	nop
  40be88:	2040d04c 	.word	0x2040d04c

0040be8c <__aeabi_drsub>:
  40be8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40be90:	e002      	b.n	40be98 <__adddf3>
  40be92:	bf00      	nop

0040be94 <__aeabi_dsub>:
  40be94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040be98 <__adddf3>:
  40be98:	b530      	push	{r4, r5, lr}
  40be9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40be9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40bea2:	ea94 0f05 	teq	r4, r5
  40bea6:	bf08      	it	eq
  40bea8:	ea90 0f02 	teqeq	r0, r2
  40beac:	bf1f      	itttt	ne
  40beae:	ea54 0c00 	orrsne.w	ip, r4, r0
  40beb2:	ea55 0c02 	orrsne.w	ip, r5, r2
  40beb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40beba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40bebe:	f000 80e2 	beq.w	40c086 <__adddf3+0x1ee>
  40bec2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40bec6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40beca:	bfb8      	it	lt
  40becc:	426d      	neglt	r5, r5
  40bece:	dd0c      	ble.n	40beea <__adddf3+0x52>
  40bed0:	442c      	add	r4, r5
  40bed2:	ea80 0202 	eor.w	r2, r0, r2
  40bed6:	ea81 0303 	eor.w	r3, r1, r3
  40beda:	ea82 0000 	eor.w	r0, r2, r0
  40bede:	ea83 0101 	eor.w	r1, r3, r1
  40bee2:	ea80 0202 	eor.w	r2, r0, r2
  40bee6:	ea81 0303 	eor.w	r3, r1, r3
  40beea:	2d36      	cmp	r5, #54	; 0x36
  40beec:	bf88      	it	hi
  40beee:	bd30      	pophi	{r4, r5, pc}
  40bef0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40bef4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40bef8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40befc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40bf00:	d002      	beq.n	40bf08 <__adddf3+0x70>
  40bf02:	4240      	negs	r0, r0
  40bf04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40bf08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40bf0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40bf10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40bf14:	d002      	beq.n	40bf1c <__adddf3+0x84>
  40bf16:	4252      	negs	r2, r2
  40bf18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40bf1c:	ea94 0f05 	teq	r4, r5
  40bf20:	f000 80a7 	beq.w	40c072 <__adddf3+0x1da>
  40bf24:	f1a4 0401 	sub.w	r4, r4, #1
  40bf28:	f1d5 0e20 	rsbs	lr, r5, #32
  40bf2c:	db0d      	blt.n	40bf4a <__adddf3+0xb2>
  40bf2e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40bf32:	fa22 f205 	lsr.w	r2, r2, r5
  40bf36:	1880      	adds	r0, r0, r2
  40bf38:	f141 0100 	adc.w	r1, r1, #0
  40bf3c:	fa03 f20e 	lsl.w	r2, r3, lr
  40bf40:	1880      	adds	r0, r0, r2
  40bf42:	fa43 f305 	asr.w	r3, r3, r5
  40bf46:	4159      	adcs	r1, r3
  40bf48:	e00e      	b.n	40bf68 <__adddf3+0xd0>
  40bf4a:	f1a5 0520 	sub.w	r5, r5, #32
  40bf4e:	f10e 0e20 	add.w	lr, lr, #32
  40bf52:	2a01      	cmp	r2, #1
  40bf54:	fa03 fc0e 	lsl.w	ip, r3, lr
  40bf58:	bf28      	it	cs
  40bf5a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40bf5e:	fa43 f305 	asr.w	r3, r3, r5
  40bf62:	18c0      	adds	r0, r0, r3
  40bf64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40bf68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40bf6c:	d507      	bpl.n	40bf7e <__adddf3+0xe6>
  40bf6e:	f04f 0e00 	mov.w	lr, #0
  40bf72:	f1dc 0c00 	rsbs	ip, ip, #0
  40bf76:	eb7e 0000 	sbcs.w	r0, lr, r0
  40bf7a:	eb6e 0101 	sbc.w	r1, lr, r1
  40bf7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40bf82:	d31b      	bcc.n	40bfbc <__adddf3+0x124>
  40bf84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40bf88:	d30c      	bcc.n	40bfa4 <__adddf3+0x10c>
  40bf8a:	0849      	lsrs	r1, r1, #1
  40bf8c:	ea5f 0030 	movs.w	r0, r0, rrx
  40bf90:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40bf94:	f104 0401 	add.w	r4, r4, #1
  40bf98:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40bf9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40bfa0:	f080 809a 	bcs.w	40c0d8 <__adddf3+0x240>
  40bfa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40bfa8:	bf08      	it	eq
  40bfaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40bfae:	f150 0000 	adcs.w	r0, r0, #0
  40bfb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bfb6:	ea41 0105 	orr.w	r1, r1, r5
  40bfba:	bd30      	pop	{r4, r5, pc}
  40bfbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40bfc0:	4140      	adcs	r0, r0
  40bfc2:	eb41 0101 	adc.w	r1, r1, r1
  40bfc6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bfca:	f1a4 0401 	sub.w	r4, r4, #1
  40bfce:	d1e9      	bne.n	40bfa4 <__adddf3+0x10c>
  40bfd0:	f091 0f00 	teq	r1, #0
  40bfd4:	bf04      	itt	eq
  40bfd6:	4601      	moveq	r1, r0
  40bfd8:	2000      	moveq	r0, #0
  40bfda:	fab1 f381 	clz	r3, r1
  40bfde:	bf08      	it	eq
  40bfe0:	3320      	addeq	r3, #32
  40bfe2:	f1a3 030b 	sub.w	r3, r3, #11
  40bfe6:	f1b3 0220 	subs.w	r2, r3, #32
  40bfea:	da0c      	bge.n	40c006 <__adddf3+0x16e>
  40bfec:	320c      	adds	r2, #12
  40bfee:	dd08      	ble.n	40c002 <__adddf3+0x16a>
  40bff0:	f102 0c14 	add.w	ip, r2, #20
  40bff4:	f1c2 020c 	rsb	r2, r2, #12
  40bff8:	fa01 f00c 	lsl.w	r0, r1, ip
  40bffc:	fa21 f102 	lsr.w	r1, r1, r2
  40c000:	e00c      	b.n	40c01c <__adddf3+0x184>
  40c002:	f102 0214 	add.w	r2, r2, #20
  40c006:	bfd8      	it	le
  40c008:	f1c2 0c20 	rsble	ip, r2, #32
  40c00c:	fa01 f102 	lsl.w	r1, r1, r2
  40c010:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c014:	bfdc      	itt	le
  40c016:	ea41 010c 	orrle.w	r1, r1, ip
  40c01a:	4090      	lslle	r0, r2
  40c01c:	1ae4      	subs	r4, r4, r3
  40c01e:	bfa2      	ittt	ge
  40c020:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40c024:	4329      	orrge	r1, r5
  40c026:	bd30      	popge	{r4, r5, pc}
  40c028:	ea6f 0404 	mvn.w	r4, r4
  40c02c:	3c1f      	subs	r4, #31
  40c02e:	da1c      	bge.n	40c06a <__adddf3+0x1d2>
  40c030:	340c      	adds	r4, #12
  40c032:	dc0e      	bgt.n	40c052 <__adddf3+0x1ba>
  40c034:	f104 0414 	add.w	r4, r4, #20
  40c038:	f1c4 0220 	rsb	r2, r4, #32
  40c03c:	fa20 f004 	lsr.w	r0, r0, r4
  40c040:	fa01 f302 	lsl.w	r3, r1, r2
  40c044:	ea40 0003 	orr.w	r0, r0, r3
  40c048:	fa21 f304 	lsr.w	r3, r1, r4
  40c04c:	ea45 0103 	orr.w	r1, r5, r3
  40c050:	bd30      	pop	{r4, r5, pc}
  40c052:	f1c4 040c 	rsb	r4, r4, #12
  40c056:	f1c4 0220 	rsb	r2, r4, #32
  40c05a:	fa20 f002 	lsr.w	r0, r0, r2
  40c05e:	fa01 f304 	lsl.w	r3, r1, r4
  40c062:	ea40 0003 	orr.w	r0, r0, r3
  40c066:	4629      	mov	r1, r5
  40c068:	bd30      	pop	{r4, r5, pc}
  40c06a:	fa21 f004 	lsr.w	r0, r1, r4
  40c06e:	4629      	mov	r1, r5
  40c070:	bd30      	pop	{r4, r5, pc}
  40c072:	f094 0f00 	teq	r4, #0
  40c076:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40c07a:	bf06      	itte	eq
  40c07c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40c080:	3401      	addeq	r4, #1
  40c082:	3d01      	subne	r5, #1
  40c084:	e74e      	b.n	40bf24 <__adddf3+0x8c>
  40c086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c08a:	bf18      	it	ne
  40c08c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c090:	d029      	beq.n	40c0e6 <__adddf3+0x24e>
  40c092:	ea94 0f05 	teq	r4, r5
  40c096:	bf08      	it	eq
  40c098:	ea90 0f02 	teqeq	r0, r2
  40c09c:	d005      	beq.n	40c0aa <__adddf3+0x212>
  40c09e:	ea54 0c00 	orrs.w	ip, r4, r0
  40c0a2:	bf04      	itt	eq
  40c0a4:	4619      	moveq	r1, r3
  40c0a6:	4610      	moveq	r0, r2
  40c0a8:	bd30      	pop	{r4, r5, pc}
  40c0aa:	ea91 0f03 	teq	r1, r3
  40c0ae:	bf1e      	ittt	ne
  40c0b0:	2100      	movne	r1, #0
  40c0b2:	2000      	movne	r0, #0
  40c0b4:	bd30      	popne	{r4, r5, pc}
  40c0b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40c0ba:	d105      	bne.n	40c0c8 <__adddf3+0x230>
  40c0bc:	0040      	lsls	r0, r0, #1
  40c0be:	4149      	adcs	r1, r1
  40c0c0:	bf28      	it	cs
  40c0c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40c0c6:	bd30      	pop	{r4, r5, pc}
  40c0c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40c0cc:	bf3c      	itt	cc
  40c0ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40c0d2:	bd30      	popcc	{r4, r5, pc}
  40c0d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c0d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40c0dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c0e0:	f04f 0000 	mov.w	r0, #0
  40c0e4:	bd30      	pop	{r4, r5, pc}
  40c0e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c0ea:	bf1a      	itte	ne
  40c0ec:	4619      	movne	r1, r3
  40c0ee:	4610      	movne	r0, r2
  40c0f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40c0f4:	bf1c      	itt	ne
  40c0f6:	460b      	movne	r3, r1
  40c0f8:	4602      	movne	r2, r0
  40c0fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c0fe:	bf06      	itte	eq
  40c100:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40c104:	ea91 0f03 	teqeq	r1, r3
  40c108:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c10c:	bd30      	pop	{r4, r5, pc}
  40c10e:	bf00      	nop

0040c110 <__aeabi_ui2d>:
  40c110:	f090 0f00 	teq	r0, #0
  40c114:	bf04      	itt	eq
  40c116:	2100      	moveq	r1, #0
  40c118:	4770      	bxeq	lr
  40c11a:	b530      	push	{r4, r5, lr}
  40c11c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c120:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c124:	f04f 0500 	mov.w	r5, #0
  40c128:	f04f 0100 	mov.w	r1, #0
  40c12c:	e750      	b.n	40bfd0 <__adddf3+0x138>
  40c12e:	bf00      	nop

0040c130 <__aeabi_i2d>:
  40c130:	f090 0f00 	teq	r0, #0
  40c134:	bf04      	itt	eq
  40c136:	2100      	moveq	r1, #0
  40c138:	4770      	bxeq	lr
  40c13a:	b530      	push	{r4, r5, lr}
  40c13c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c140:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c144:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c148:	bf48      	it	mi
  40c14a:	4240      	negmi	r0, r0
  40c14c:	f04f 0100 	mov.w	r1, #0
  40c150:	e73e      	b.n	40bfd0 <__adddf3+0x138>
  40c152:	bf00      	nop

0040c154 <__aeabi_f2d>:
  40c154:	0042      	lsls	r2, r0, #1
  40c156:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c15a:	ea4f 0131 	mov.w	r1, r1, rrx
  40c15e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c162:	bf1f      	itttt	ne
  40c164:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c168:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c16c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c170:	4770      	bxne	lr
  40c172:	f092 0f00 	teq	r2, #0
  40c176:	bf14      	ite	ne
  40c178:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c17c:	4770      	bxeq	lr
  40c17e:	b530      	push	{r4, r5, lr}
  40c180:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c18c:	e720      	b.n	40bfd0 <__adddf3+0x138>
  40c18e:	bf00      	nop

0040c190 <__aeabi_ul2d>:
  40c190:	ea50 0201 	orrs.w	r2, r0, r1
  40c194:	bf08      	it	eq
  40c196:	4770      	bxeq	lr
  40c198:	b530      	push	{r4, r5, lr}
  40c19a:	f04f 0500 	mov.w	r5, #0
  40c19e:	e00a      	b.n	40c1b6 <__aeabi_l2d+0x16>

0040c1a0 <__aeabi_l2d>:
  40c1a0:	ea50 0201 	orrs.w	r2, r0, r1
  40c1a4:	bf08      	it	eq
  40c1a6:	4770      	bxeq	lr
  40c1a8:	b530      	push	{r4, r5, lr}
  40c1aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c1ae:	d502      	bpl.n	40c1b6 <__aeabi_l2d+0x16>
  40c1b0:	4240      	negs	r0, r0
  40c1b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c1b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c1ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c1be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c1c2:	f43f aedc 	beq.w	40bf7e <__adddf3+0xe6>
  40c1c6:	f04f 0203 	mov.w	r2, #3
  40c1ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c1ce:	bf18      	it	ne
  40c1d0:	3203      	addne	r2, #3
  40c1d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c1d6:	bf18      	it	ne
  40c1d8:	3203      	addne	r2, #3
  40c1da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c1de:	f1c2 0320 	rsb	r3, r2, #32
  40c1e2:	fa00 fc03 	lsl.w	ip, r0, r3
  40c1e6:	fa20 f002 	lsr.w	r0, r0, r2
  40c1ea:	fa01 fe03 	lsl.w	lr, r1, r3
  40c1ee:	ea40 000e 	orr.w	r0, r0, lr
  40c1f2:	fa21 f102 	lsr.w	r1, r1, r2
  40c1f6:	4414      	add	r4, r2
  40c1f8:	e6c1      	b.n	40bf7e <__adddf3+0xe6>
  40c1fa:	bf00      	nop

0040c1fc <__aeabi_dmul>:
  40c1fc:	b570      	push	{r4, r5, r6, lr}
  40c1fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c20a:	bf1d      	ittte	ne
  40c20c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c210:	ea94 0f0c 	teqne	r4, ip
  40c214:	ea95 0f0c 	teqne	r5, ip
  40c218:	f000 f8de 	bleq	40c3d8 <__aeabi_dmul+0x1dc>
  40c21c:	442c      	add	r4, r5
  40c21e:	ea81 0603 	eor.w	r6, r1, r3
  40c222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40c226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40c22a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40c22e:	bf18      	it	ne
  40c230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40c234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40c23c:	d038      	beq.n	40c2b0 <__aeabi_dmul+0xb4>
  40c23e:	fba0 ce02 	umull	ip, lr, r0, r2
  40c242:	f04f 0500 	mov.w	r5, #0
  40c246:	fbe1 e502 	umlal	lr, r5, r1, r2
  40c24a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40c24e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40c252:	f04f 0600 	mov.w	r6, #0
  40c256:	fbe1 5603 	umlal	r5, r6, r1, r3
  40c25a:	f09c 0f00 	teq	ip, #0
  40c25e:	bf18      	it	ne
  40c260:	f04e 0e01 	orrne.w	lr, lr, #1
  40c264:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40c268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40c26c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40c270:	d204      	bcs.n	40c27c <__aeabi_dmul+0x80>
  40c272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40c276:	416d      	adcs	r5, r5
  40c278:	eb46 0606 	adc.w	r6, r6, r6
  40c27c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40c280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40c284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40c288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40c28c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40c290:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c294:	bf88      	it	hi
  40c296:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c29a:	d81e      	bhi.n	40c2da <__aeabi_dmul+0xde>
  40c29c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40c2a0:	bf08      	it	eq
  40c2a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40c2a6:	f150 0000 	adcs.w	r0, r0, #0
  40c2aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c2ae:	bd70      	pop	{r4, r5, r6, pc}
  40c2b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40c2b4:	ea46 0101 	orr.w	r1, r6, r1
  40c2b8:	ea40 0002 	orr.w	r0, r0, r2
  40c2bc:	ea81 0103 	eor.w	r1, r1, r3
  40c2c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40c2c4:	bfc2      	ittt	gt
  40c2c6:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c2ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c2ce:	bd70      	popgt	{r4, r5, r6, pc}
  40c2d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c2d4:	f04f 0e00 	mov.w	lr, #0
  40c2d8:	3c01      	subs	r4, #1
  40c2da:	f300 80ab 	bgt.w	40c434 <__aeabi_dmul+0x238>
  40c2de:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40c2e2:	bfde      	ittt	le
  40c2e4:	2000      	movle	r0, #0
  40c2e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40c2ea:	bd70      	pople	{r4, r5, r6, pc}
  40c2ec:	f1c4 0400 	rsb	r4, r4, #0
  40c2f0:	3c20      	subs	r4, #32
  40c2f2:	da35      	bge.n	40c360 <__aeabi_dmul+0x164>
  40c2f4:	340c      	adds	r4, #12
  40c2f6:	dc1b      	bgt.n	40c330 <__aeabi_dmul+0x134>
  40c2f8:	f104 0414 	add.w	r4, r4, #20
  40c2fc:	f1c4 0520 	rsb	r5, r4, #32
  40c300:	fa00 f305 	lsl.w	r3, r0, r5
  40c304:	fa20 f004 	lsr.w	r0, r0, r4
  40c308:	fa01 f205 	lsl.w	r2, r1, r5
  40c30c:	ea40 0002 	orr.w	r0, r0, r2
  40c310:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40c314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c31c:	fa21 f604 	lsr.w	r6, r1, r4
  40c320:	eb42 0106 	adc.w	r1, r2, r6
  40c324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c328:	bf08      	it	eq
  40c32a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c32e:	bd70      	pop	{r4, r5, r6, pc}
  40c330:	f1c4 040c 	rsb	r4, r4, #12
  40c334:	f1c4 0520 	rsb	r5, r4, #32
  40c338:	fa00 f304 	lsl.w	r3, r0, r4
  40c33c:	fa20 f005 	lsr.w	r0, r0, r5
  40c340:	fa01 f204 	lsl.w	r2, r1, r4
  40c344:	ea40 0002 	orr.w	r0, r0, r2
  40c348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c34c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c350:	f141 0100 	adc.w	r1, r1, #0
  40c354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c358:	bf08      	it	eq
  40c35a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c35e:	bd70      	pop	{r4, r5, r6, pc}
  40c360:	f1c4 0520 	rsb	r5, r4, #32
  40c364:	fa00 f205 	lsl.w	r2, r0, r5
  40c368:	ea4e 0e02 	orr.w	lr, lr, r2
  40c36c:	fa20 f304 	lsr.w	r3, r0, r4
  40c370:	fa01 f205 	lsl.w	r2, r1, r5
  40c374:	ea43 0302 	orr.w	r3, r3, r2
  40c378:	fa21 f004 	lsr.w	r0, r1, r4
  40c37c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c380:	fa21 f204 	lsr.w	r2, r1, r4
  40c384:	ea20 0002 	bic.w	r0, r0, r2
  40c388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40c38c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c390:	bf08      	it	eq
  40c392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c396:	bd70      	pop	{r4, r5, r6, pc}
  40c398:	f094 0f00 	teq	r4, #0
  40c39c:	d10f      	bne.n	40c3be <__aeabi_dmul+0x1c2>
  40c39e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40c3a2:	0040      	lsls	r0, r0, #1
  40c3a4:	eb41 0101 	adc.w	r1, r1, r1
  40c3a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c3ac:	bf08      	it	eq
  40c3ae:	3c01      	subeq	r4, #1
  40c3b0:	d0f7      	beq.n	40c3a2 <__aeabi_dmul+0x1a6>
  40c3b2:	ea41 0106 	orr.w	r1, r1, r6
  40c3b6:	f095 0f00 	teq	r5, #0
  40c3ba:	bf18      	it	ne
  40c3bc:	4770      	bxne	lr
  40c3be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40c3c2:	0052      	lsls	r2, r2, #1
  40c3c4:	eb43 0303 	adc.w	r3, r3, r3
  40c3c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40c3cc:	bf08      	it	eq
  40c3ce:	3d01      	subeq	r5, #1
  40c3d0:	d0f7      	beq.n	40c3c2 <__aeabi_dmul+0x1c6>
  40c3d2:	ea43 0306 	orr.w	r3, r3, r6
  40c3d6:	4770      	bx	lr
  40c3d8:	ea94 0f0c 	teq	r4, ip
  40c3dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c3e0:	bf18      	it	ne
  40c3e2:	ea95 0f0c 	teqne	r5, ip
  40c3e6:	d00c      	beq.n	40c402 <__aeabi_dmul+0x206>
  40c3e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c3ec:	bf18      	it	ne
  40c3ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c3f2:	d1d1      	bne.n	40c398 <__aeabi_dmul+0x19c>
  40c3f4:	ea81 0103 	eor.w	r1, r1, r3
  40c3f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c3fc:	f04f 0000 	mov.w	r0, #0
  40c400:	bd70      	pop	{r4, r5, r6, pc}
  40c402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c406:	bf06      	itte	eq
  40c408:	4610      	moveq	r0, r2
  40c40a:	4619      	moveq	r1, r3
  40c40c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c410:	d019      	beq.n	40c446 <__aeabi_dmul+0x24a>
  40c412:	ea94 0f0c 	teq	r4, ip
  40c416:	d102      	bne.n	40c41e <__aeabi_dmul+0x222>
  40c418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40c41c:	d113      	bne.n	40c446 <__aeabi_dmul+0x24a>
  40c41e:	ea95 0f0c 	teq	r5, ip
  40c422:	d105      	bne.n	40c430 <__aeabi_dmul+0x234>
  40c424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40c428:	bf1c      	itt	ne
  40c42a:	4610      	movne	r0, r2
  40c42c:	4619      	movne	r1, r3
  40c42e:	d10a      	bne.n	40c446 <__aeabi_dmul+0x24a>
  40c430:	ea81 0103 	eor.w	r1, r1, r3
  40c434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c438:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c43c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c440:	f04f 0000 	mov.w	r0, #0
  40c444:	bd70      	pop	{r4, r5, r6, pc}
  40c446:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c44a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40c44e:	bd70      	pop	{r4, r5, r6, pc}

0040c450 <__aeabi_ddiv>:
  40c450:	b570      	push	{r4, r5, r6, lr}
  40c452:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c45a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c45e:	bf1d      	ittte	ne
  40c460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c464:	ea94 0f0c 	teqne	r4, ip
  40c468:	ea95 0f0c 	teqne	r5, ip
  40c46c:	f000 f8a7 	bleq	40c5be <__aeabi_ddiv+0x16e>
  40c470:	eba4 0405 	sub.w	r4, r4, r5
  40c474:	ea81 0e03 	eor.w	lr, r1, r3
  40c478:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c47c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c480:	f000 8088 	beq.w	40c594 <__aeabi_ddiv+0x144>
  40c484:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c488:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40c48c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40c490:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40c494:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40c498:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40c49c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40c4a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40c4a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40c4a8:	429d      	cmp	r5, r3
  40c4aa:	bf08      	it	eq
  40c4ac:	4296      	cmpeq	r6, r2
  40c4ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40c4b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40c4b6:	d202      	bcs.n	40c4be <__aeabi_ddiv+0x6e>
  40c4b8:	085b      	lsrs	r3, r3, #1
  40c4ba:	ea4f 0232 	mov.w	r2, r2, rrx
  40c4be:	1ab6      	subs	r6, r6, r2
  40c4c0:	eb65 0503 	sbc.w	r5, r5, r3
  40c4c4:	085b      	lsrs	r3, r3, #1
  40c4c6:	ea4f 0232 	mov.w	r2, r2, rrx
  40c4ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40c4ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40c4d2:	ebb6 0e02 	subs.w	lr, r6, r2
  40c4d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c4da:	bf22      	ittt	cs
  40c4dc:	1ab6      	subcs	r6, r6, r2
  40c4de:	4675      	movcs	r5, lr
  40c4e0:	ea40 000c 	orrcs.w	r0, r0, ip
  40c4e4:	085b      	lsrs	r3, r3, #1
  40c4e6:	ea4f 0232 	mov.w	r2, r2, rrx
  40c4ea:	ebb6 0e02 	subs.w	lr, r6, r2
  40c4ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c4f2:	bf22      	ittt	cs
  40c4f4:	1ab6      	subcs	r6, r6, r2
  40c4f6:	4675      	movcs	r5, lr
  40c4f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40c4fc:	085b      	lsrs	r3, r3, #1
  40c4fe:	ea4f 0232 	mov.w	r2, r2, rrx
  40c502:	ebb6 0e02 	subs.w	lr, r6, r2
  40c506:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c50a:	bf22      	ittt	cs
  40c50c:	1ab6      	subcs	r6, r6, r2
  40c50e:	4675      	movcs	r5, lr
  40c510:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40c514:	085b      	lsrs	r3, r3, #1
  40c516:	ea4f 0232 	mov.w	r2, r2, rrx
  40c51a:	ebb6 0e02 	subs.w	lr, r6, r2
  40c51e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c522:	bf22      	ittt	cs
  40c524:	1ab6      	subcs	r6, r6, r2
  40c526:	4675      	movcs	r5, lr
  40c528:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40c52c:	ea55 0e06 	orrs.w	lr, r5, r6
  40c530:	d018      	beq.n	40c564 <__aeabi_ddiv+0x114>
  40c532:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40c536:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40c53a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40c53e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40c542:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40c546:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40c54a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40c54e:	d1c0      	bne.n	40c4d2 <__aeabi_ddiv+0x82>
  40c550:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c554:	d10b      	bne.n	40c56e <__aeabi_ddiv+0x11e>
  40c556:	ea41 0100 	orr.w	r1, r1, r0
  40c55a:	f04f 0000 	mov.w	r0, #0
  40c55e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40c562:	e7b6      	b.n	40c4d2 <__aeabi_ddiv+0x82>
  40c564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c568:	bf04      	itt	eq
  40c56a:	4301      	orreq	r1, r0
  40c56c:	2000      	moveq	r0, #0
  40c56e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c572:	bf88      	it	hi
  40c574:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c578:	f63f aeaf 	bhi.w	40c2da <__aeabi_dmul+0xde>
  40c57c:	ebb5 0c03 	subs.w	ip, r5, r3
  40c580:	bf04      	itt	eq
  40c582:	ebb6 0c02 	subseq.w	ip, r6, r2
  40c586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c58a:	f150 0000 	adcs.w	r0, r0, #0
  40c58e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c592:	bd70      	pop	{r4, r5, r6, pc}
  40c594:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40c598:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40c59c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40c5a0:	bfc2      	ittt	gt
  40c5a2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c5a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c5aa:	bd70      	popgt	{r4, r5, r6, pc}
  40c5ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c5b0:	f04f 0e00 	mov.w	lr, #0
  40c5b4:	3c01      	subs	r4, #1
  40c5b6:	e690      	b.n	40c2da <__aeabi_dmul+0xde>
  40c5b8:	ea45 0e06 	orr.w	lr, r5, r6
  40c5bc:	e68d      	b.n	40c2da <__aeabi_dmul+0xde>
  40c5be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c5c2:	ea94 0f0c 	teq	r4, ip
  40c5c6:	bf08      	it	eq
  40c5c8:	ea95 0f0c 	teqeq	r5, ip
  40c5cc:	f43f af3b 	beq.w	40c446 <__aeabi_dmul+0x24a>
  40c5d0:	ea94 0f0c 	teq	r4, ip
  40c5d4:	d10a      	bne.n	40c5ec <__aeabi_ddiv+0x19c>
  40c5d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c5da:	f47f af34 	bne.w	40c446 <__aeabi_dmul+0x24a>
  40c5de:	ea95 0f0c 	teq	r5, ip
  40c5e2:	f47f af25 	bne.w	40c430 <__aeabi_dmul+0x234>
  40c5e6:	4610      	mov	r0, r2
  40c5e8:	4619      	mov	r1, r3
  40c5ea:	e72c      	b.n	40c446 <__aeabi_dmul+0x24a>
  40c5ec:	ea95 0f0c 	teq	r5, ip
  40c5f0:	d106      	bne.n	40c600 <__aeabi_ddiv+0x1b0>
  40c5f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c5f6:	f43f aefd 	beq.w	40c3f4 <__aeabi_dmul+0x1f8>
  40c5fa:	4610      	mov	r0, r2
  40c5fc:	4619      	mov	r1, r3
  40c5fe:	e722      	b.n	40c446 <__aeabi_dmul+0x24a>
  40c600:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c604:	bf18      	it	ne
  40c606:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c60a:	f47f aec5 	bne.w	40c398 <__aeabi_dmul+0x19c>
  40c60e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40c612:	f47f af0d 	bne.w	40c430 <__aeabi_dmul+0x234>
  40c616:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40c61a:	f47f aeeb 	bne.w	40c3f4 <__aeabi_dmul+0x1f8>
  40c61e:	e712      	b.n	40c446 <__aeabi_dmul+0x24a>

0040c620 <__gedf2>:
  40c620:	f04f 3cff 	mov.w	ip, #4294967295
  40c624:	e006      	b.n	40c634 <__cmpdf2+0x4>
  40c626:	bf00      	nop

0040c628 <__ledf2>:
  40c628:	f04f 0c01 	mov.w	ip, #1
  40c62c:	e002      	b.n	40c634 <__cmpdf2+0x4>
  40c62e:	bf00      	nop

0040c630 <__cmpdf2>:
  40c630:	f04f 0c01 	mov.w	ip, #1
  40c634:	f84d cd04 	str.w	ip, [sp, #-4]!
  40c638:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c63c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c640:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c644:	bf18      	it	ne
  40c646:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c64a:	d01b      	beq.n	40c684 <__cmpdf2+0x54>
  40c64c:	b001      	add	sp, #4
  40c64e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c652:	bf0c      	ite	eq
  40c654:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c658:	ea91 0f03 	teqne	r1, r3
  40c65c:	bf02      	ittt	eq
  40c65e:	ea90 0f02 	teqeq	r0, r2
  40c662:	2000      	moveq	r0, #0
  40c664:	4770      	bxeq	lr
  40c666:	f110 0f00 	cmn.w	r0, #0
  40c66a:	ea91 0f03 	teq	r1, r3
  40c66e:	bf58      	it	pl
  40c670:	4299      	cmppl	r1, r3
  40c672:	bf08      	it	eq
  40c674:	4290      	cmpeq	r0, r2
  40c676:	bf2c      	ite	cs
  40c678:	17d8      	asrcs	r0, r3, #31
  40c67a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c67e:	f040 0001 	orr.w	r0, r0, #1
  40c682:	4770      	bx	lr
  40c684:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c68c:	d102      	bne.n	40c694 <__cmpdf2+0x64>
  40c68e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c692:	d107      	bne.n	40c6a4 <__cmpdf2+0x74>
  40c694:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c69c:	d1d6      	bne.n	40c64c <__cmpdf2+0x1c>
  40c69e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c6a2:	d0d3      	beq.n	40c64c <__cmpdf2+0x1c>
  40c6a4:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c6a8:	4770      	bx	lr
  40c6aa:	bf00      	nop

0040c6ac <__aeabi_cdrcmple>:
  40c6ac:	4684      	mov	ip, r0
  40c6ae:	4610      	mov	r0, r2
  40c6b0:	4662      	mov	r2, ip
  40c6b2:	468c      	mov	ip, r1
  40c6b4:	4619      	mov	r1, r3
  40c6b6:	4663      	mov	r3, ip
  40c6b8:	e000      	b.n	40c6bc <__aeabi_cdcmpeq>
  40c6ba:	bf00      	nop

0040c6bc <__aeabi_cdcmpeq>:
  40c6bc:	b501      	push	{r0, lr}
  40c6be:	f7ff ffb7 	bl	40c630 <__cmpdf2>
  40c6c2:	2800      	cmp	r0, #0
  40c6c4:	bf48      	it	mi
  40c6c6:	f110 0f00 	cmnmi.w	r0, #0
  40c6ca:	bd01      	pop	{r0, pc}

0040c6cc <__aeabi_dcmpeq>:
  40c6cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6d0:	f7ff fff4 	bl	40c6bc <__aeabi_cdcmpeq>
  40c6d4:	bf0c      	ite	eq
  40c6d6:	2001      	moveq	r0, #1
  40c6d8:	2000      	movne	r0, #0
  40c6da:	f85d fb08 	ldr.w	pc, [sp], #8
  40c6de:	bf00      	nop

0040c6e0 <__aeabi_dcmplt>:
  40c6e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6e4:	f7ff ffea 	bl	40c6bc <__aeabi_cdcmpeq>
  40c6e8:	bf34      	ite	cc
  40c6ea:	2001      	movcc	r0, #1
  40c6ec:	2000      	movcs	r0, #0
  40c6ee:	f85d fb08 	ldr.w	pc, [sp], #8
  40c6f2:	bf00      	nop

0040c6f4 <__aeabi_dcmple>:
  40c6f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6f8:	f7ff ffe0 	bl	40c6bc <__aeabi_cdcmpeq>
  40c6fc:	bf94      	ite	ls
  40c6fe:	2001      	movls	r0, #1
  40c700:	2000      	movhi	r0, #0
  40c702:	f85d fb08 	ldr.w	pc, [sp], #8
  40c706:	bf00      	nop

0040c708 <__aeabi_dcmpge>:
  40c708:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c70c:	f7ff ffce 	bl	40c6ac <__aeabi_cdrcmple>
  40c710:	bf94      	ite	ls
  40c712:	2001      	movls	r0, #1
  40c714:	2000      	movhi	r0, #0
  40c716:	f85d fb08 	ldr.w	pc, [sp], #8
  40c71a:	bf00      	nop

0040c71c <__aeabi_dcmpgt>:
  40c71c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c720:	f7ff ffc4 	bl	40c6ac <__aeabi_cdrcmple>
  40c724:	bf34      	ite	cc
  40c726:	2001      	movcc	r0, #1
  40c728:	2000      	movcs	r0, #0
  40c72a:	f85d fb08 	ldr.w	pc, [sp], #8
  40c72e:	bf00      	nop

0040c730 <__aeabi_dcmpun>:
  40c730:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c734:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c738:	d102      	bne.n	40c740 <__aeabi_dcmpun+0x10>
  40c73a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c73e:	d10a      	bne.n	40c756 <__aeabi_dcmpun+0x26>
  40c740:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c744:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c748:	d102      	bne.n	40c750 <__aeabi_dcmpun+0x20>
  40c74a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c74e:	d102      	bne.n	40c756 <__aeabi_dcmpun+0x26>
  40c750:	f04f 0000 	mov.w	r0, #0
  40c754:	4770      	bx	lr
  40c756:	f04f 0001 	mov.w	r0, #1
  40c75a:	4770      	bx	lr

0040c75c <__aeabi_d2iz>:
  40c75c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c760:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c764:	d215      	bcs.n	40c792 <__aeabi_d2iz+0x36>
  40c766:	d511      	bpl.n	40c78c <__aeabi_d2iz+0x30>
  40c768:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c76c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c770:	d912      	bls.n	40c798 <__aeabi_d2iz+0x3c>
  40c772:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c77a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c77e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c782:	fa23 f002 	lsr.w	r0, r3, r2
  40c786:	bf18      	it	ne
  40c788:	4240      	negne	r0, r0
  40c78a:	4770      	bx	lr
  40c78c:	f04f 0000 	mov.w	r0, #0
  40c790:	4770      	bx	lr
  40c792:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c796:	d105      	bne.n	40c7a4 <__aeabi_d2iz+0x48>
  40c798:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c79c:	bf08      	it	eq
  40c79e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c7a2:	4770      	bx	lr
  40c7a4:	f04f 0000 	mov.w	r0, #0
  40c7a8:	4770      	bx	lr
  40c7aa:	bf00      	nop

0040c7ac <__aeabi_uldivmod>:
  40c7ac:	b953      	cbnz	r3, 40c7c4 <__aeabi_uldivmod+0x18>
  40c7ae:	b94a      	cbnz	r2, 40c7c4 <__aeabi_uldivmod+0x18>
  40c7b0:	2900      	cmp	r1, #0
  40c7b2:	bf08      	it	eq
  40c7b4:	2800      	cmpeq	r0, #0
  40c7b6:	bf1c      	itt	ne
  40c7b8:	f04f 31ff 	movne.w	r1, #4294967295
  40c7bc:	f04f 30ff 	movne.w	r0, #4294967295
  40c7c0:	f000 b97a 	b.w	40cab8 <__aeabi_idiv0>
  40c7c4:	f1ad 0c08 	sub.w	ip, sp, #8
  40c7c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40c7cc:	f000 f806 	bl	40c7dc <__udivmoddi4>
  40c7d0:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c7d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c7d8:	b004      	add	sp, #16
  40c7da:	4770      	bx	lr

0040c7dc <__udivmoddi4>:
  40c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c7e0:	468c      	mov	ip, r1
  40c7e2:	460d      	mov	r5, r1
  40c7e4:	4604      	mov	r4, r0
  40c7e6:	9e08      	ldr	r6, [sp, #32]
  40c7e8:	2b00      	cmp	r3, #0
  40c7ea:	d151      	bne.n	40c890 <__udivmoddi4+0xb4>
  40c7ec:	428a      	cmp	r2, r1
  40c7ee:	4617      	mov	r7, r2
  40c7f0:	d96d      	bls.n	40c8ce <__udivmoddi4+0xf2>
  40c7f2:	fab2 fe82 	clz	lr, r2
  40c7f6:	f1be 0f00 	cmp.w	lr, #0
  40c7fa:	d00b      	beq.n	40c814 <__udivmoddi4+0x38>
  40c7fc:	f1ce 0c20 	rsb	ip, lr, #32
  40c800:	fa01 f50e 	lsl.w	r5, r1, lr
  40c804:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c808:	fa02 f70e 	lsl.w	r7, r2, lr
  40c80c:	ea4c 0c05 	orr.w	ip, ip, r5
  40c810:	fa00 f40e 	lsl.w	r4, r0, lr
  40c814:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40c818:	0c25      	lsrs	r5, r4, #16
  40c81a:	fbbc f8fa 	udiv	r8, ip, sl
  40c81e:	fa1f f987 	uxth.w	r9, r7
  40c822:	fb0a cc18 	mls	ip, sl, r8, ip
  40c826:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40c82a:	fb08 f309 	mul.w	r3, r8, r9
  40c82e:	42ab      	cmp	r3, r5
  40c830:	d90a      	bls.n	40c848 <__udivmoddi4+0x6c>
  40c832:	19ed      	adds	r5, r5, r7
  40c834:	f108 32ff 	add.w	r2, r8, #4294967295
  40c838:	f080 8123 	bcs.w	40ca82 <__udivmoddi4+0x2a6>
  40c83c:	42ab      	cmp	r3, r5
  40c83e:	f240 8120 	bls.w	40ca82 <__udivmoddi4+0x2a6>
  40c842:	f1a8 0802 	sub.w	r8, r8, #2
  40c846:	443d      	add	r5, r7
  40c848:	1aed      	subs	r5, r5, r3
  40c84a:	b2a4      	uxth	r4, r4
  40c84c:	fbb5 f0fa 	udiv	r0, r5, sl
  40c850:	fb0a 5510 	mls	r5, sl, r0, r5
  40c854:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40c858:	fb00 f909 	mul.w	r9, r0, r9
  40c85c:	45a1      	cmp	r9, r4
  40c85e:	d909      	bls.n	40c874 <__udivmoddi4+0x98>
  40c860:	19e4      	adds	r4, r4, r7
  40c862:	f100 33ff 	add.w	r3, r0, #4294967295
  40c866:	f080 810a 	bcs.w	40ca7e <__udivmoddi4+0x2a2>
  40c86a:	45a1      	cmp	r9, r4
  40c86c:	f240 8107 	bls.w	40ca7e <__udivmoddi4+0x2a2>
  40c870:	3802      	subs	r0, #2
  40c872:	443c      	add	r4, r7
  40c874:	eba4 0409 	sub.w	r4, r4, r9
  40c878:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c87c:	2100      	movs	r1, #0
  40c87e:	2e00      	cmp	r6, #0
  40c880:	d061      	beq.n	40c946 <__udivmoddi4+0x16a>
  40c882:	fa24 f40e 	lsr.w	r4, r4, lr
  40c886:	2300      	movs	r3, #0
  40c888:	6034      	str	r4, [r6, #0]
  40c88a:	6073      	str	r3, [r6, #4]
  40c88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c890:	428b      	cmp	r3, r1
  40c892:	d907      	bls.n	40c8a4 <__udivmoddi4+0xc8>
  40c894:	2e00      	cmp	r6, #0
  40c896:	d054      	beq.n	40c942 <__udivmoddi4+0x166>
  40c898:	2100      	movs	r1, #0
  40c89a:	e886 0021 	stmia.w	r6, {r0, r5}
  40c89e:	4608      	mov	r0, r1
  40c8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c8a4:	fab3 f183 	clz	r1, r3
  40c8a8:	2900      	cmp	r1, #0
  40c8aa:	f040 808e 	bne.w	40c9ca <__udivmoddi4+0x1ee>
  40c8ae:	42ab      	cmp	r3, r5
  40c8b0:	d302      	bcc.n	40c8b8 <__udivmoddi4+0xdc>
  40c8b2:	4282      	cmp	r2, r0
  40c8b4:	f200 80fa 	bhi.w	40caac <__udivmoddi4+0x2d0>
  40c8b8:	1a84      	subs	r4, r0, r2
  40c8ba:	eb65 0503 	sbc.w	r5, r5, r3
  40c8be:	2001      	movs	r0, #1
  40c8c0:	46ac      	mov	ip, r5
  40c8c2:	2e00      	cmp	r6, #0
  40c8c4:	d03f      	beq.n	40c946 <__udivmoddi4+0x16a>
  40c8c6:	e886 1010 	stmia.w	r6, {r4, ip}
  40c8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c8ce:	b912      	cbnz	r2, 40c8d6 <__udivmoddi4+0xfa>
  40c8d0:	2701      	movs	r7, #1
  40c8d2:	fbb7 f7f2 	udiv	r7, r7, r2
  40c8d6:	fab7 fe87 	clz	lr, r7
  40c8da:	f1be 0f00 	cmp.w	lr, #0
  40c8de:	d134      	bne.n	40c94a <__udivmoddi4+0x16e>
  40c8e0:	1beb      	subs	r3, r5, r7
  40c8e2:	0c3a      	lsrs	r2, r7, #16
  40c8e4:	fa1f fc87 	uxth.w	ip, r7
  40c8e8:	2101      	movs	r1, #1
  40c8ea:	fbb3 f8f2 	udiv	r8, r3, r2
  40c8ee:	0c25      	lsrs	r5, r4, #16
  40c8f0:	fb02 3318 	mls	r3, r2, r8, r3
  40c8f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c8f8:	fb0c f308 	mul.w	r3, ip, r8
  40c8fc:	42ab      	cmp	r3, r5
  40c8fe:	d907      	bls.n	40c910 <__udivmoddi4+0x134>
  40c900:	19ed      	adds	r5, r5, r7
  40c902:	f108 30ff 	add.w	r0, r8, #4294967295
  40c906:	d202      	bcs.n	40c90e <__udivmoddi4+0x132>
  40c908:	42ab      	cmp	r3, r5
  40c90a:	f200 80d1 	bhi.w	40cab0 <__udivmoddi4+0x2d4>
  40c90e:	4680      	mov	r8, r0
  40c910:	1aed      	subs	r5, r5, r3
  40c912:	b2a3      	uxth	r3, r4
  40c914:	fbb5 f0f2 	udiv	r0, r5, r2
  40c918:	fb02 5510 	mls	r5, r2, r0, r5
  40c91c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40c920:	fb0c fc00 	mul.w	ip, ip, r0
  40c924:	45a4      	cmp	ip, r4
  40c926:	d907      	bls.n	40c938 <__udivmoddi4+0x15c>
  40c928:	19e4      	adds	r4, r4, r7
  40c92a:	f100 33ff 	add.w	r3, r0, #4294967295
  40c92e:	d202      	bcs.n	40c936 <__udivmoddi4+0x15a>
  40c930:	45a4      	cmp	ip, r4
  40c932:	f200 80b8 	bhi.w	40caa6 <__udivmoddi4+0x2ca>
  40c936:	4618      	mov	r0, r3
  40c938:	eba4 040c 	sub.w	r4, r4, ip
  40c93c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c940:	e79d      	b.n	40c87e <__udivmoddi4+0xa2>
  40c942:	4631      	mov	r1, r6
  40c944:	4630      	mov	r0, r6
  40c946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c94a:	f1ce 0420 	rsb	r4, lr, #32
  40c94e:	fa05 f30e 	lsl.w	r3, r5, lr
  40c952:	fa07 f70e 	lsl.w	r7, r7, lr
  40c956:	fa20 f804 	lsr.w	r8, r0, r4
  40c95a:	0c3a      	lsrs	r2, r7, #16
  40c95c:	fa25 f404 	lsr.w	r4, r5, r4
  40c960:	ea48 0803 	orr.w	r8, r8, r3
  40c964:	fbb4 f1f2 	udiv	r1, r4, r2
  40c968:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c96c:	fb02 4411 	mls	r4, r2, r1, r4
  40c970:	fa1f fc87 	uxth.w	ip, r7
  40c974:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c978:	fb01 f30c 	mul.w	r3, r1, ip
  40c97c:	42ab      	cmp	r3, r5
  40c97e:	fa00 f40e 	lsl.w	r4, r0, lr
  40c982:	d909      	bls.n	40c998 <__udivmoddi4+0x1bc>
  40c984:	19ed      	adds	r5, r5, r7
  40c986:	f101 30ff 	add.w	r0, r1, #4294967295
  40c98a:	f080 808a 	bcs.w	40caa2 <__udivmoddi4+0x2c6>
  40c98e:	42ab      	cmp	r3, r5
  40c990:	f240 8087 	bls.w	40caa2 <__udivmoddi4+0x2c6>
  40c994:	3902      	subs	r1, #2
  40c996:	443d      	add	r5, r7
  40c998:	1aeb      	subs	r3, r5, r3
  40c99a:	fa1f f588 	uxth.w	r5, r8
  40c99e:	fbb3 f0f2 	udiv	r0, r3, r2
  40c9a2:	fb02 3310 	mls	r3, r2, r0, r3
  40c9a6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c9aa:	fb00 f30c 	mul.w	r3, r0, ip
  40c9ae:	42ab      	cmp	r3, r5
  40c9b0:	d907      	bls.n	40c9c2 <__udivmoddi4+0x1e6>
  40c9b2:	19ed      	adds	r5, r5, r7
  40c9b4:	f100 38ff 	add.w	r8, r0, #4294967295
  40c9b8:	d26f      	bcs.n	40ca9a <__udivmoddi4+0x2be>
  40c9ba:	42ab      	cmp	r3, r5
  40c9bc:	d96d      	bls.n	40ca9a <__udivmoddi4+0x2be>
  40c9be:	3802      	subs	r0, #2
  40c9c0:	443d      	add	r5, r7
  40c9c2:	1aeb      	subs	r3, r5, r3
  40c9c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c9c8:	e78f      	b.n	40c8ea <__udivmoddi4+0x10e>
  40c9ca:	f1c1 0720 	rsb	r7, r1, #32
  40c9ce:	fa22 f807 	lsr.w	r8, r2, r7
  40c9d2:	408b      	lsls	r3, r1
  40c9d4:	fa05 f401 	lsl.w	r4, r5, r1
  40c9d8:	ea48 0303 	orr.w	r3, r8, r3
  40c9dc:	fa20 fe07 	lsr.w	lr, r0, r7
  40c9e0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c9e4:	40fd      	lsrs	r5, r7
  40c9e6:	ea4e 0e04 	orr.w	lr, lr, r4
  40c9ea:	fbb5 f9fc 	udiv	r9, r5, ip
  40c9ee:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c9f2:	fb0c 5519 	mls	r5, ip, r9, r5
  40c9f6:	fa1f f883 	uxth.w	r8, r3
  40c9fa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c9fe:	fb09 f408 	mul.w	r4, r9, r8
  40ca02:	42ac      	cmp	r4, r5
  40ca04:	fa02 f201 	lsl.w	r2, r2, r1
  40ca08:	fa00 fa01 	lsl.w	sl, r0, r1
  40ca0c:	d908      	bls.n	40ca20 <__udivmoddi4+0x244>
  40ca0e:	18ed      	adds	r5, r5, r3
  40ca10:	f109 30ff 	add.w	r0, r9, #4294967295
  40ca14:	d243      	bcs.n	40ca9e <__udivmoddi4+0x2c2>
  40ca16:	42ac      	cmp	r4, r5
  40ca18:	d941      	bls.n	40ca9e <__udivmoddi4+0x2c2>
  40ca1a:	f1a9 0902 	sub.w	r9, r9, #2
  40ca1e:	441d      	add	r5, r3
  40ca20:	1b2d      	subs	r5, r5, r4
  40ca22:	fa1f fe8e 	uxth.w	lr, lr
  40ca26:	fbb5 f0fc 	udiv	r0, r5, ip
  40ca2a:	fb0c 5510 	mls	r5, ip, r0, r5
  40ca2e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40ca32:	fb00 f808 	mul.w	r8, r0, r8
  40ca36:	45a0      	cmp	r8, r4
  40ca38:	d907      	bls.n	40ca4a <__udivmoddi4+0x26e>
  40ca3a:	18e4      	adds	r4, r4, r3
  40ca3c:	f100 35ff 	add.w	r5, r0, #4294967295
  40ca40:	d229      	bcs.n	40ca96 <__udivmoddi4+0x2ba>
  40ca42:	45a0      	cmp	r8, r4
  40ca44:	d927      	bls.n	40ca96 <__udivmoddi4+0x2ba>
  40ca46:	3802      	subs	r0, #2
  40ca48:	441c      	add	r4, r3
  40ca4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40ca4e:	eba4 0408 	sub.w	r4, r4, r8
  40ca52:	fba0 8902 	umull	r8, r9, r0, r2
  40ca56:	454c      	cmp	r4, r9
  40ca58:	46c6      	mov	lr, r8
  40ca5a:	464d      	mov	r5, r9
  40ca5c:	d315      	bcc.n	40ca8a <__udivmoddi4+0x2ae>
  40ca5e:	d012      	beq.n	40ca86 <__udivmoddi4+0x2aa>
  40ca60:	b156      	cbz	r6, 40ca78 <__udivmoddi4+0x29c>
  40ca62:	ebba 030e 	subs.w	r3, sl, lr
  40ca66:	eb64 0405 	sbc.w	r4, r4, r5
  40ca6a:	fa04 f707 	lsl.w	r7, r4, r7
  40ca6e:	40cb      	lsrs	r3, r1
  40ca70:	431f      	orrs	r7, r3
  40ca72:	40cc      	lsrs	r4, r1
  40ca74:	6037      	str	r7, [r6, #0]
  40ca76:	6074      	str	r4, [r6, #4]
  40ca78:	2100      	movs	r1, #0
  40ca7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ca7e:	4618      	mov	r0, r3
  40ca80:	e6f8      	b.n	40c874 <__udivmoddi4+0x98>
  40ca82:	4690      	mov	r8, r2
  40ca84:	e6e0      	b.n	40c848 <__udivmoddi4+0x6c>
  40ca86:	45c2      	cmp	sl, r8
  40ca88:	d2ea      	bcs.n	40ca60 <__udivmoddi4+0x284>
  40ca8a:	ebb8 0e02 	subs.w	lr, r8, r2
  40ca8e:	eb69 0503 	sbc.w	r5, r9, r3
  40ca92:	3801      	subs	r0, #1
  40ca94:	e7e4      	b.n	40ca60 <__udivmoddi4+0x284>
  40ca96:	4628      	mov	r0, r5
  40ca98:	e7d7      	b.n	40ca4a <__udivmoddi4+0x26e>
  40ca9a:	4640      	mov	r0, r8
  40ca9c:	e791      	b.n	40c9c2 <__udivmoddi4+0x1e6>
  40ca9e:	4681      	mov	r9, r0
  40caa0:	e7be      	b.n	40ca20 <__udivmoddi4+0x244>
  40caa2:	4601      	mov	r1, r0
  40caa4:	e778      	b.n	40c998 <__udivmoddi4+0x1bc>
  40caa6:	3802      	subs	r0, #2
  40caa8:	443c      	add	r4, r7
  40caaa:	e745      	b.n	40c938 <__udivmoddi4+0x15c>
  40caac:	4608      	mov	r0, r1
  40caae:	e708      	b.n	40c8c2 <__udivmoddi4+0xe6>
  40cab0:	f1a8 0802 	sub.w	r8, r8, #2
  40cab4:	443d      	add	r5, r7
  40cab6:	e72b      	b.n	40c910 <__udivmoddi4+0x134>

0040cab8 <__aeabi_idiv0>:
  40cab8:	4770      	bx	lr
  40caba:	bf00      	nop
  40cabc:	454c4449 	.word	0x454c4449
  40cac0:	00000000 	.word	0x00000000
  40cac4:	51726d54 	.word	0x51726d54
  40cac8:	00000000 	.word	0x00000000
  40cacc:	20726d54 	.word	0x20726d54
  40cad0:	00637653 	.word	0x00637653

0040cad4 <__FUNCTION__.11288>:
  40cad4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40cae4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40caf4:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  40cb04:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

0040cb14 <__FUNCTION__.9901>:
  40cb14:	5f666968 646e6573 00000000              hif_send....

0040cb20 <__FUNCTION__.9911>:
  40cb20:	5f666968 00727369                       hif_isr.

0040cb28 <__FUNCTION__.9917>:
  40cb28:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040cb38 <__FUNCTION__.9932>:
  40cb38:	5f666968 65636572 00657669              hif_receive.

0040cb44 <__FUNCTION__.9947>:
  40cb44:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40cb54:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  40cb64:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  40cb74:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  40cb84:	73657264 75622073 61662073 000a6c69     dress bus fail..
  40cb94:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  40cba4:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  40cbb4:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  40cbc4:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  40cbd4:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  40cbe4:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  40cbf4:	61207473 64207070 276e6469 65732074     st app didn't se
  40cc04:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  40cc14:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  40cc24:	66696828 61462029 2065736c 65746e69     (hif) False inte
  40cc34:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  40cc44:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  40cc54:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  40cc64:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  40cc74:	7075656b 65687420 69686320 00000a70     keup the chip...
  40cc84:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  40cc94:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  40cca4:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  40ccb4:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  40ccc4:	696c6176 72612064 656d7567 000a746e     valid argument..
  40ccd4:	20505041 75716552 65747365 69532064     APP Requested Si
  40cce4:	6920657a 616c2073 72656772 61687420     ze is larger tha
  40ccf4:	6874206e 65722065 65766963 75622064     n the recived bu
  40cd04:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  40cd14:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  40cd24:	64412064 73657264 65622073 646e6f79     d Address beyond
  40cd34:	65687420 63657220 64657669 66756220      the recived buf
  40cd44:	20726566 72646461 20737365 20646e61     fer address and 
  40cd54:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  40cd64:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  40cd74:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40cd84:	00000000                                ....

0040cd88 <__FUNCTION__.9874>:
  40cd88:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040cd94 <__FUNCTION__.9898>:
  40cd94:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040cda4 <__FUNCTION__.9926>:
  40cda4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40cdb4:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  40cdc4:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  40cdd4:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  40cde4:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  40cdf4:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  40ce04:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  40ce14:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  40ce24:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  40ce34:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40ce44:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40ce54:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40ce64:	2079656b 676e656c 25206874 00000a64     key length %d...
  40ce74:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40ce84:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40ce94:	656e6966 65732064 79742063 000a6570     fined sec type..
  40cea4:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40ceb4:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40cec4:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40ced4:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40cee4:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40cef4:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40cf04:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040cf14 <__FUNCTION__.9711>:
  40cf14:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040cf24 <__FUNCTION__.9805>:
  40cf24:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  40cf34:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40cf44:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40cf54:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40cf64:	00000000 6f727245 68772072 20656c69     ....Error while 
  40cf74:	64616572 20676e69 0a676572 00000000     reading reg.....
  40cf84:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40cf94:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40cfa4:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40cfb4:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40cfc4:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40cfd4:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40cfe4:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  40cff4:	0000000a                                ....

0040cff8 <__FUNCTION__.9792>:
  40cff8:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040d004 <__FUNCTION__.9799>:
  40d004:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40d014:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  40d024:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  40d034:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40d044:	73616c66 69642068 6c626173 61662065     flash disable fa
  40d054:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40d064:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40d074:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40d084:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40d094:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40d0a4:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40d0b4:	20444920 0a786c25 00000000               ID %lx.....

0040d0c0 <__FUNCTION__.9176>:
  40d0c0:	5f697073 00646d63                       spi_cmd.

0040d0c8 <__FUNCTION__.9184>:
  40d0c8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040d0d4 <__FUNCTION__.9200>:
  40d0d4:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040d0e4 <__FUNCTION__.9215>:
  40d0e4:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040d0f4 <__FUNCTION__.9225>:
  40d0f4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040d104 <__FUNCTION__.9233>:
  40d104:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040d114 <__FUNCTION__.9242>:
  40d114:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040d124 <__FUNCTION__.9250>:
  40d124:	735f6d6e 725f6970 00646165              nm_spi_read.

0040d130 <__FUNCTION__.9267>:
  40d130:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040d13c <crc7_syndrome_table>:
  40d13c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40d14c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40d15c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40d16c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40d17c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40d18c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40d19c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40d1ac:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40d1bc:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40d1cc:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40d1dc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40d1ec:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40d1fc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40d20c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40d21c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40d22c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40d23c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d24c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d25c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40d26c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40d27c:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40d28c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d29c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d2ac:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40d2bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d2cc:	6e692064 6e726574 77206c61 65746972     d internal write
  40d2dc:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40d2ec:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d2fc:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40d30c:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40d31c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d32c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40d33c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40d34c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d35c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d36c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40d37c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d38c:	656c6961 6c622064 206b636f 61746164     ailed block data
  40d39c:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40d3ac:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d3bc:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40d3cc:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40d3dc:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40d3ec:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40d3fc:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40d40c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d41c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d42c:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40d43c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40d44c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40d45c:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40d46c:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40d47c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d48c:	61642064 62206174 6b636f6c 63726320     d data block crc
  40d49c:	69727720 202c6574 20737562 6f727265      write, bus erro
  40d4ac:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40d4bc:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40d4cc:	61746164 69727720 2e2e6574 00000a2e     data write......
  40d4dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d4ec:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40d4fc:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40d50c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d51c:	65722064 6e6f7073 72206573 2c646165     d response read,
  40d52c:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40d53c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d54c:	61642064 72206174 6f707365 2065736e     d data response 
  40d55c:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40d56c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d57c:	656c6961 61642064 72206174 6f707365     ailed data respo
  40d58c:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40d59c:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40d5ac:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d5bc:	61657220 62202c64 65207375 726f7272      read, bus error
  40d5cc:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40d5dc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40d5ec:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40d5fc:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40d60c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d61c:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40d62c:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40d63c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d64c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d65c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40d66c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d67c:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40d68c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d69c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40d6ac:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40d6bc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d6cc:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40d6dc:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40d6ec:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  40d6fc:	253c2074 000a3e64 57202d2d 31434e49     t <%d>..-- WINC1
  40d70c:	20303035 65696c63 6520746e 706d6178     500 client examp
  40d71c:	2d20656c 2d0a0d2d 4153202d 3037454d     le --..-- SAME70
  40d72c:	4c50582d 2d2d2044 2d2d0a0d 6d6f4320     -XPLD --..-- Com
  40d73c:	656c6970 4d203a64 32207961 30322039     piled: May 29 20
  40d74c:	32203032 38323a31 2036353a 0a0d2d2d     20 21:28:56 --..
  40d75c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40d76c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40d77c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 00000a0d     ------------....
  40d78c:	69666957 00000000 636f7270 00737365     Wifi....process.
  40d79c:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
  40d7ac:	64612050 73657264 73692073 2e642520     P address is %d.
  40d7bc:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
  40d7cc:	6b636f73 6d5f7465 635f6773 656e6e6f     socket_msg_conne
  40d7dc:	000a7463 6b636f73 635f7465 63203a62     ct..socket_cb: c
  40d7ec:	656e6e6f 6f207463 000a206b 6b636f73     onnect ok ..sock
  40d7fc:	635f7465 63203a62 656e6e6f 65207463     et_cb: connect e
  40d80c:	726f7272 000a0d21 6b736174 6f727020     rror!...task pro
  40d81c:	73736563 65726320 64657461 00000a20     cess created ...
  40d82c:	54415453 57203a45 20544941 0000000a     STATE: WAIT ....
  40d83c:	54415453 47203a45 0a205445 00000000     STATE: GET .....
  40d84c:	20544547 6174732f 20737574 50545448     GET /status HTTP
  40d85c:	312e312f 41200a0d 70656363 2a203a74     /1.1.. Accept: *
  40d86c:	0a0d2a2f 00000a0d 54415453 41203a45     /*......STATE: A
  40d87c:	0a204b43 00000000 54415453 4d203a45     CK .....STATE: M
  40d88c:	0a204753 00000000 42424242 42424242     SG .....BBBBBBBB
  40d89c:	42424242 42424242 000a4242 4f4f410a     BBBBBBBBBB...AOO
  40d8ac:	4f4f4f4f 0000000a 00006425 203d2069     OOOO....%d..i = 
  40d8bc:	2d206425 2d2d2d2d 2d2d2d2d 206a202d     %d ---------- j 
  40d8cc:	7325203d 0000000a 47414c46 204e495a     = %s....FLAGZIN 
  40d8dc:	2d2d2d2d 7325203e 0000000a 4e454341     ----> %s....ACEN
  40d8ec:	0a204944 00000000 47415041 0a494555     DI .....APAGUEI.
  40d8fc:	00000000 54415453 44203a45 20454e4f     ....STATE: DONE 
  40d90c:	0000000a 6e69616d 326d203a 69775f6d     ....main: m2m_wi
  40d91c:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
  40d92c:	2821726f 0d296425 0000000a 61666152     or!(%d).....Rafa
  40d93c:	00000000 6e69616d 6f63203a 63656e6e     ....main: connec
  40d94c:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
  40d95c:	2e2e7325 000a0d2e 33383131 32323737     %s......11837722
  40d96c:	00003737 2e323931 2e383631 312e3531     77..192.168.15.1
  40d97c:	00000036 6b636f73 69207465 2074696e     6...socket init 
  40d98c:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
  40d99c:	206f7420 61657263 54206574 63205043      to create TCP c
  40d9ac:	6e65696c 6f732074 74656b63 72726520     lient socket err
  40d9bc:	0d21726f 0000000a 6b636f73 63207465     or!.....socket c
  40d9cc:	656e6e6f 6e697463 00000a67 6e69616d     onnecting...main
  40d9dc:	7265203a 20726f72 6e6e6f63 20746365     : error connect 
  40d9ec:	73206f74 656b636f 00000a74 63617473     to socket...stac
  40d9fc:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40da0c:	00000a0d 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40da1c:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
  40da2c:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40da3c:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
  40da4c:	0a0d4445 00000000 69666977 3a62635f     ED......wifi_cb:
  40da5c:	20504920 72646461 20737365 25207369      IP address is %
  40da6c:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
  40da7c:	6b636f73 635f7465 59203a62 3a726165     socket_cb: Year:
  40da8c:	2c642520 6e6f4d20 203a6874 202c6425      %d, Month: %d, 
  40da9c:	20656854 20544d47 656d6974 20736920     The GMT time is 
  40daac:	253a7525 3a753230 75323025 00000a0d     %u:%02u:%02u....

0040dabc <_global_impure_ptr>:
  40dabc:	20400028 00464e49 00666e69 004e414e     (.@ INF.inf.NAN.
  40dacc:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40dadc:	46454443 00000000 33323130 37363534     CDEF....01234567
  40daec:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40dafc:	0000296c 00000030                       l)..0...

0040db04 <blanks.7223>:
  40db04:	20202020 20202020 20202020 20202020                     

0040db14 <zeroes.7224>:
  40db14:	30303030 30303030 30303030 30303030     0000000000000000

0040db24 <blanks.7217>:
  40db24:	20202020 20202020 20202020 20202020                     

0040db34 <zeroes.7218>:
  40db34:	30303030 30303030 30303030 30303030     0000000000000000
  40db44:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40db54:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40db64:	00000000                                ....

0040db68 <__mprec_bigtens>:
  40db68:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40db78:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40db88:	7f73bf3c 75154fdd                       <.s..O.u

0040db90 <__mprec_tens>:
  40db90:	00000000 3ff00000 00000000 40240000     .......?......$@
  40dba0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40dbb0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40dbc0:	00000000 412e8480 00000000 416312d0     .......A......cA
  40dbd0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40dbe0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40dbf0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40dc00:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40dc10:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40dc20:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40dc30:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40dc40:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40dc50:	79d99db4 44ea7843                       ...yCx.D

0040dc58 <p05.6055>:
  40dc58:	00000005 00000019 0000007d              ........}...

0040dc64 <_ctype_>:
  40dc64:	20202000 20202020 28282020 20282828     .         ((((( 
  40dc74:	20202020 20202020 20202020 20202020                     
  40dc84:	10108820 10101010 10101010 10101010      ...............
  40dc94:	04040410 04040404 10040404 10101010     ................
  40dca4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40dcb4:	01010101 01010101 01010101 10101010     ................
  40dcc4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40dcd4:	02020202 02020202 02020202 10101010     ................
  40dce4:	00000020 00000000 00000000 00000000      ...............
	...

0040dd68 <_init>:
  40dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dd6a:	bf00      	nop
  40dd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dd6e:	bc08      	pop	{r3}
  40dd70:	469e      	mov	lr, r3
  40dd72:	4770      	bx	lr

0040dd74 <__init_array_start>:
  40dd74:	00408d1d 	.word	0x00408d1d

0040dd78 <__frame_dummy_init_array_entry>:
  40dd78:	00400165                                e.@.

0040dd7c <_fini>:
  40dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dd7e:	bf00      	nop
  40dd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dd82:	bc08      	pop	{r3}
  40dd84:	469e      	mov	lr, r3
  40dd86:	4770      	bx	lr

0040dd88 <__fini_array_start>:
  40dd88:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <tcp_client_socket>:
20400020:	00ff 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	d028 2040                                   (.@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	bb95 0040 acb1 0040 0000 0000 dc64 0040     ..@...@.....d.@.
20400544:	db60 0040 d7c8 0040 d7c8 0040 d7c8 0040     `.@...@...@...@.
20400554:	d7c8 0040 d7c8 0040 d7c8 0040 d7c8 0040     ..@...@...@...@.
20400564:	d7c8 0040 d7c8 0040 ffff ffff ffff ffff     ..@...@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
